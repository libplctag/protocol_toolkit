// Platform-specific includes for macOS
#include <sys/event.h>

// Platform-specific constants for macOS
#define PTK_MAX_KEVENTS 64
#define PTK_MAX_TIMERS_PER_LOOP 32

// Event source implementation for macOS (kevent)
typedef struct {
    enum { PTK_ES_TIMER, PTK_ES_SOCKET, PTK_ES_USER } type;
    uintptr_t ident;                     // kevent identifier (fd for sockets, timer_id for timers)
    bool active;                         // Whether this event source is currently registered
    struct timespec next_fire;           // For timers: next fire time (absolute)
    ptk_sm_t *owner_sm;                 // State machine that owns this event source
} ptk_ev_source_impl_t;

// Socket implementation for macOS
typedef struct {
    bool nonblocking;                    // Socket is in non-blocking mode
    bool registered_read;                // Read events registered with kevent
    bool registered_write;               // Write events registered with kevent
    ptk_ev_source_t *read_source;       // Associated read event source
    ptk_ev_source_t *write_source;      // Associated write event source
} ptk_socket_impl_t;

// Event loop implementation for macOS (kqueue)
typedef struct {
    int kqueue_fd;                      // kqueue file descriptor
    struct kevent events[PTK_MAX_KEVENTS];  // Event buffer for kevent()
    bool running;                       // Loop is running
    uint32_t next_timer_id;             // Next available timer ID

    // Timer management (static allocation, no malloc)
    struct {
        ptk_ev_source_t *source;        // Associated event source (user-allocated)
        bool in_use;                    // Timer slot is active
    } timers[PTK_MAX_TIMERS_PER_LOOP];
} ptk_ev_loop_impl_t;