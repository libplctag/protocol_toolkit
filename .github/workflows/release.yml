name: Release Management

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

env:
  BUILD_TYPE: Release

jobs:
  # =============================================================================
  # Release Creation (on merge to release branch)
  # =============================================================================

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: version
        run: |
          chmod +x scripts/version_manager.sh
          VERSION=$(./scripts/version_manager.sh get)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view "v${{ steps.version.outputs.current_version }}" &> /dev/null; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.current_version }} already exists"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.current_version }} does not exist"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in project files
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          echo "Updating project files with version ${{ steps.version.outputs.current_version }}"
          ./scripts/version_manager.sh update-files

      - name: Build release artifacts
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_C_COMPILER=clang \
            -DPTK_BUILD_TESTS=ON \
            -DPTK_ENABLE_STATIC_ANALYSIS=ON

          cmake --build build --config ${{env.BUILD_TYPE}} --parallel

          cd build
          ctest --output-on-failure --parallel
          cd ..

          tar -czf protocol_toolkit-${{ steps.version.outputs.current_version }}.tar.gz \
            --exclude='.git*' \
            --exclude='build' \
            --exclude='*.tar.gz' \
            --exclude='*.zip' \
            .

          mkdir -p artifacts
          cp build/lib/libprotocol_toolkit.a artifacts/ || true
          cp build/bin/test_harness artifacts/ || true

          tar -czf protocol_toolkit-${{ steps.version.outputs.current_version }}-artifacts.tar.gz \
            -C artifacts .

      - name: Generate release notes
        if: steps.check_release.outputs.release_exists == 'false'
        id: release_notes
        run: |
          LAST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")

          if [ -n "$LAST_RELEASE" ]; then
            COMMITS=$(git log --oneline "${LAST_RELEASE}..HEAD" --no-merges) || COMMITS=""
          else
            COMMITS=$(git log --oneline --no-merges -10) || COMMITS=""
          fi

          cat > release_notes.md << EOF
          # Protocol Toolkit v${{ steps.version.outputs.current_version }}

          ## üöÄ What's New

          This release includes all changes that have been tested and validated through our comprehensive CI/CD pipeline.

          ## üìã Changes

          EOF

          if [ -n "$COMMITS" ]; then
            echo "### Commits in this release:" >> release_notes.md
            echo "" >> release_notes.md
            echo "$COMMITS" | while read line; do
              echo "- $line" >> release_notes.md
            done
          else
            echo "- Initial release" >> release_notes.md
          fi

          cat >> release_notes.md << EOF

          ## ‚úÖ Testing

          This release has been thoroughly tested with:

          - **Architecture Support**: x86_64, x86, ARM64, ARMv6, ARMv7 Hard Float
          - **Platform Support**: Ubuntu (20.04, 22.04), Windows, macOS
          - **Sanitizer Testing**: AddressSanitizer, MemorySanitizer, UndefinedBehaviorSanitizer, ThreadSanitizer
          - **Memory Analysis**: Valgrind with leak detection and origin tracking
          - **Static Analysis**: Clang Static Analyzer, Cppcheck
          - **API Coverage**: 100% of 157 functions across 10 modules

          ## üì¶ Downloads

          - **Source Code**: Available as source tarball and ZIP
          - **Build Artifacts**: Pre-built libraries and test harness

          ## üîß Installation

          ### From Source
          ```bash
          tar -xzf protocol_toolkit-${{ steps.version.outputs.current_version }}.tar.gz
          cd protocol_toolkit-${{ steps.version.outputs.current_version }}
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          ```

          ### Using CMake
          ```cmake
          find_package(PTK ${{ steps.version.outputs.current_version }} REQUIRED)
          target_link_libraries(your_target PTK::protocol_toolkit)
          ```

          ## üêõ Known Issues

          None at this time. Please report any issues on our GitHub repository.

          ---

          **Full Changelog**: https://github.com/${{github.repository}}/compare/${LAST_RELEASE}...v${{ steps.version.outputs.current_version }}
          EOF

          echo "Release notes generated"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR title and body from latest merged PR
        id: pr_metadata
        run: |
          SHA=$(git rev-parse HEAD)
          PR_JSON=$(gh pr list --state merged --base release --json number,title,body,mergeCommit --limit 10 | jq -c --arg SHA "$SHA" '.[] | select(.mergeCommit == $SHA)')
          TITLE=$(echo "$PR_JSON" | jq -r '.title // empty')
          BODY=$(echo "$PR_JSON" | jq -r '.body // empty')
          echo "title<<EOF" >> $GITHUB_OUTPUT
          echo "$TITLE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Save PR title and body to files
        run: |
          echo "${{ steps.pr_metadata.outputs.title }}" > pr_title.txt
          echo "${{ steps.pr_metadata.outputs.body }}" > pr_body.txt

      - name: Create GitHub release
        if: steps.check_release.outputs.release_exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE=$(cat pr_title.txt)
          BODY=$(cat pr_body.txt)
          if [ -z "$TITLE" ]; then
            TITLE="Protocol Toolkit v${{ steps.version.outputs.current_version }}"
          fi
          if [ -z "$BODY" ]; then
            BODY=$(cat release_notes.md)
          fi
          gh release create "v${{ steps.version.outputs.current_version }}" \
            --title "$TITLE" \
            --notes "$BODY" \
            --target release \
            protocol_toolkit-${{ steps.version.outputs.current_version }}.tar.gz \
            protocol_toolkit-${{ steps.version.outputs.current_version }}-artifacts.tar.gz
          echo "‚úÖ Created release v${{ steps.version.outputs.current_version }}"

      - name: Increment patch version
        if: steps.check_release.outputs.release_exists == 'false'
        run: |
          NEW_VERSION=$(./scripts/version_manager.sh increment-patch)
          echo "Incremented version to $NEW_VERSION for next development cycle"
          ./scripts/version_manager.sh update-files
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION src/include/ptk_version.h CMakeLists.txt
          git commit -m "Bump version to $NEW_VERSION after release"
          git push origin release
          echo "‚úÖ Version bumped to $NEW_VERSION"

      - name: Propagate version changes to dev and prerelease branches
        if: steps.check_release.outputs.release_exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git ls-remote --exit-code --heads origin dev; then
            echo "üîÑ Propagating version changes to dev branch..."
            git fetch origin dev
            git checkout dev
            git pull origin dev
            if git merge-base --is-ancestor origin/dev origin/release; then
              echo "‚úÖ Fast-forward merge possible: release ‚Üí dev"
              git merge origin/release --ff-only
              git push origin dev
              echo "‚úÖ Successfully fast-forwarded dev branch"
            else
              echo "‚ö†Ô∏è  Fast-forward not possible, creating PR: release ‚Üí dev"
              git checkout release
              PR_EXISTS=$(gh pr list --base dev --head release --state open --json number --jq length)
              if [ "$PR_EXISTS" -eq 0 ]; then
                gh pr create \
                  --base dev \
                  --head release \
                  --title "Sync version update to dev branch" \
                  --body "# Version Sync: Post-Release Update\n\nThis PR syncs the version update from the release branch back to the dev branch.\n\n**Changes:**\n- Updated VERSION file to next development version\n- Updated project files with new version\n- Updated version header file\n\n**‚ö†Ô∏è Manual merge required** - Fast-forward was not possible due to divergent history.\n" \
                  --label "version-sync" \
                  --label "auto-generated"
                echo "‚úÖ Created version sync PR to dev branch"
              else
                echo "‚ÑπÔ∏è Version sync PR to dev already exists"
              fi
            fi
          else
            echo "‚ö†Ô∏è  Dev branch doesn't exist, skipping dev propagation"
          fi

          if git ls-remote --exit-code --heads origin prerelease && git ls-remote --exit-code --heads origin dev; then
            echo "üîÑ Propagating version changes to prerelease branch..."
            git fetch origin prerelease
            git fetch origin dev
            git checkout prerelease
            git pull origin prerelease
            if git merge-base --is-ancestor origin/prerelease origin/dev; then
              echo "‚úÖ Fast-forward merge possible: dev ‚Üí prerelease"
              git merge origin/dev --ff-only
              git push origin prerelease
              echo "‚úÖ Successfully fast-forwarded prerelease branch"
            else
              echo "‚ö†Ô∏è  Fast-forward not possible, creating PR: dev ‚Üí prerelease"
              git checkout dev
              PR_EXISTS=$(gh pr list --base prerelease --head dev --state open --json number --jq length)
              if [ "$PR_EXISTS" -eq 0 ]; then
                gh pr create \
                  --base prerelease \
                  --head dev \
                  --title "Sync version update to prerelease branch" \
                  --body "# Version Sync: Post-Release Update\n\nThis PR syncs the version update from the dev branch to the prerelease branch.\n\n**Changes:**\n- Updated VERSION file to next development version\n- Updated project files with new version\n- Updated version header file\n\n**‚ö†Ô∏è Manual merge required** - Fast-forward was not possible due to divergent history.\n" \
                  --label "version-sync" \
                  --label "auto-generated"
                echo "‚úÖ Created version sync PR to prerelease branch"
              else
                echo "‚ÑπÔ∏è Version sync PR to prerelease already exists"
              fi
            fi
          else
            echo "‚ö†Ô∏è  Prerelease or dev branch doesn't exist, skipping prerelease propagation"
          fi
          git checkout release