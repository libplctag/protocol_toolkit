// EtherNet/IP Protocol Definition Language Sample
// Based on specification from EtherNetIP_Protocol_Specification.md

protocol EtherNetIP {
    name: "EtherNet/IP",
    version: "1.0",
    default_port: 44818,
    endianness: little,
    transport: tcp
}

// Type aliases for common structures
type_aliases {
    // Standard endianness aliases
    alias u8 = uint8_t;
    alias u16_le = uint16_t;  // Little endian is default
    alias u32_le = uint32_t;
    alias u64_le = uint64_t;
    alias i8 = int8_t;
    alias i16_le = int16_t;
    alias i32_le = int32_t;
    alias i64_le = int64_t;
    alias f32_le = float32_t;
    alias f64_le = float64_t;

    // PLC5 specific byte orders
    alias f32_plc5 = f32 @byte_order(2, 3, 0, 1);
    alias i32_plc5 = i32 @byte_order(2, 3, 0, 1);

    // PLC5 string with custom byte order
    alias plc5_str_data = u8[82] @byte_order(
        1,0, 3,2, 5,4, 7,6, 9,8, 11,10, 13,12, 15,14,
        17,16, 19,18, 21,20, 23,22, 25,24, 27,26, 29,28,
        31,30, 33,32, 35,34, 37,36, 39,38, 41,40, 43,42,
        45,44, 47,46, 49,48, 51,50, 53,52, 55,54, 57,56,
        59,58, 61,60, 63,62, 65,64, 67,66, 69,68, 71,70,
        73,72, 75,74, 77,76, 79,78, 81,80
    );

    // Standard CIP string
    alias cip_string = message {
        u32_le length;
        u8 data[length];
    };
}

// Data type registry for CIP and PCCC types
datatype_registry {
    // CIP Data Types
    CIP_BOOL: { code: 0x00C1, size: 1, type: "u8" },
    CIP_SINT: { code: 0x00C2, size: 1, type: "i8" },
    CIP_INT: { code: 0x00C3, size: 2, type: "i16_le" },
    CIP_DINT: { code: 0x00C4, size: 4, type: "i32_le" },
    CIP_LINT: { code: 0x00C5, size: 8, type: "i64_le" },
    CIP_REAL: { code: 0x00CA, size: 4, type: "f32_le" },
    CIP_LREAL: { code: 0x00CB, size: 8, type: "f64_le" },
    CIP_STRING: {
        code: 0x00D0,
        size: variable,
        structure: {
            u32_le length;
            u8 data[length];
        }
    },

    // PCCC Data Types (Legacy)
    PCCC_INT: { code: 0x89, size: 2, type: "i16_le" },
    PCCC_DINT: { code: 0x91, size: 4, type: "i32_le" },
    PCCC_REAL: { code: 0x8A, size: 4, type: "f32_le" },
    PCCC_STRING: {
        code: 0x8D,
        size: 82,
        structure: {
            u16_le len @validate(len <= 82);
            plc5_str_data data;
        }
    }
}

// EtherNet/IP Layer Messages
message EIPHeader {
    u16_le command @validate(command >= 0x0065 && command <= 0x0070);
    u16_le length @auto_size(payload);
    u32_le session_handle @call_pre_encode(validate_session_handle);
    u32_le status;
    u64_le sender_context;
    u32_le options;
}

message RegisterSessionData {
    u16_le version @const(1);
    u16_le options @default(0);
}

message EIPMessage {
    EIPHeader header;
    
    @switch(header.command) {
        case 0x0065: {  // Register Session
            @when(header.session_handle == 0) RegisterSessionData request;
            @when(header.session_handle != 0) RegisterSessionData response;
        }
        case 0x0066: {  // Unregister Session
            @validate(header.length == 0);
        }
        case 0x006F: {  // Unconnected Send
            CPFUnconnectedPacket payload;
        }
        case 0x0070: {  // Connected Send
            CPFConnectedPacket payload;
        }
    }
}

// Common Packet Format (CPF) Layer
message CPFUnconnectedPacket {
    u32_le interface_handle @default(0);
    u16_le router_timeout;
    u16_le item_count @validate(item_count == 2);
    
    // Address Item
    u16_le addr_item_type @validate(addr_item_type == 0x0000);
    u16_le addr_item_length @validate(addr_item_length == 0);
    
    // Data Item
    u16_le data_item_type @validate(data_item_type == 0x00B2);
    u16_le data_item_length @auto_size(data_item_data);
    CIPMessage data_item_data;
}

message CPFConnectedPacket {
    u32_le interface_handle;
    u16_le router_timeout;
    u16_le item_count @validate(item_count == 2);
    
    // Connected Address Item
    u16_le addr_item_type @validate(addr_item_type == 0x00A1);
    u16_le addr_item_length @validate(addr_item_length == 4);
    u32_le connection_id;
    
    // Connected Data Item
    u16_le data_item_type @validate(data_item_type == 0x00B1);
    u16_le data_item_length @auto_size(data_item_data);
    u16_le connection_sequence;
    CIPMessage data_item_data;
}

// Common Industrial Protocol (CIP) Layer
message CIPMessage {
    u8 service @validate(service <= 0x7F);  // Request bit should be clear
    u8 request_path_size;  // Size in 16-bit words
    u8 request_path[request_path_size * 2] @align(2);  // Always even bytes
    
    @switch(service) {
        case 0x0A: {  // Multiple Service Packet
            MultipleServicePacket service_data;
        }
        case 0x4B: {  // PCCC Execute
            PCCCExecuteRequest service_data;
        }
        case 0x4C: {  // Read Named Tag
            ReadNamedTagRequest service_data;
        }
        case 0x4D: {  // Write Named Tag
            WriteNamedTagRequest service_data;
        }
        case 0x4E: {  // Forward Close
            ForwardCloseRequest service_data;
        }
        case 0x52: {  // Read Named Tag Fragment
            ReadNamedTagFragmentRequest service_data;
        }
        case 0x53: {  // Write Named Tag Fragment
            WriteNamedTagFragmentRequest service_data;
        }
        case 0x54: {  // Forward Open
            ForwardOpenRequest service_data;
        }
        case 0x5B: {  // Forward Open Extended
            ForwardOpenExtendedRequest service_data;
        }
        default: {
            u8 service_data[] @remaining_bytes;
        }
    }
}

message CIPResponse {
    u8 service @validate((service & 0x80) != 0);  // Response bit should be set
    u8 reserved @const(0);
    u8 general_status;
    u8 additional_status_size;  // Size in 16-bit words
    u16_le additional_status[additional_status_size];
    u8 response_data[] @remaining_bytes;
}

// CIP Service Definitions
message MultipleServicePacket {
    u16_le service_count;
    u16_le service_offsets[service_count];
    u8 service_data[] @remaining_bytes;
}

message ReadNamedTagRequest {
    u16_le element_count @default(1);
}

message WriteNamedTagRequest {
    u16_le data_type;
    u16_le element_count;
    u8 data[] @remaining_bytes;
}

message ReadNamedTagFragmentRequest {
    u16_le element_count;
    u32_le byte_offset;
}

message WriteNamedTagFragmentRequest {
    u16_le data_type;
    u16_le element_count;
    u32_le byte_offset;
    u8 data[] @remaining_bytes;
}

message ForwardOpenRequest {
    u8 secs_per_tick;
    u8 timeout_ticks;
    u32_le server_conn_id @default(0);
    u32_le client_conn_id @call_pre_encode(generate_connection_id);
    u16_le conn_serial_number;
    u16_le orig_vendor_id;
    u32_le orig_serial_number;
    u8 conn_timeout_multiplier;
    u8 reserved1 @const(0);
    u8 reserved2 @const(0);
    u8 reserved3 @const(0);
    u32_le client_to_server_rpi;
    u16_le client_to_server_conn_params;
    u32_le server_to_client_rpi;
    u16_le server_to_client_conn_params;
    u8 transport_class @const(0xA3);
    u8 path_size;
    u8 path[path_size * 2] @align(2);
}

message ForwardOpenExtendedRequest {
    u8 secs_per_tick;
    u8 timeout_ticks;
    u32_le server_conn_id @default(0);
    u32_le client_conn_id @call_pre_encode(generate_connection_id);
    u16_le conn_serial_number;
    u16_le orig_vendor_id;
    u32_le orig_serial_number;
    u8 conn_timeout_multiplier;
    u8 reserved1 @const(0);
    u8 reserved2 @const(0);
    u8 reserved3 @const(0);
    u32_le client_to_server_rpi;
    u32_le client_to_server_conn_params;  // Extended: 32-bit instead of 16-bit
    u32_le server_to_client_rpi;
    u32_le server_to_client_conn_params;  // Extended: 32-bit instead of 16-bit
    u8 transport_class @const(0xA3);
    u8 path_size;
    u8 path[path_size * 2] @align(2);
}

message ForwardCloseRequest {
    u8 secs_per_tick;
    u8 timeout_ticks;
    u16_le conn_serial_number;
    u16_le orig_vendor_id;
    u32_le orig_serial_number;
    u8 path_size;
    u8 reserved @const(0);
    u8 path[path_size * 2] @align(2);
}

message PCCCExecuteRequest {
    u8 pccc_data[] @remaining_bytes;
}

// Error codes for EtherNet/IP
error_codes {
    // EIP Status Codes
    EIP_SUCCESS: 0x00,
    EIP_INVALID_COMMAND: 0x01,
    EIP_INVALID_LENGTH: 0x02,
    EIP_INVALID_SESSION: 0x64,
    EIP_INVALID_DATA: 0x65,

    // CIP Status Codes
    CIP_SUCCESS: 0x00,
    CIP_EXTENDED_ERROR: 0x01,
    CIP_INVALID_PARAMETER: 0x03,
    CIP_PATH_SEGMENT_ERROR: 0x04,
    CIP_PATH_DESTINATION_UNKNOWN: 0x05,
    CIP_FRAGMENTATION_REQUIRED: 0x06,
    CIP_UNSUPPORTED_SERVICE: 0x08,
    CIP_INSUFFICIENT_DATA: 0x13,
    CIP_TOO_MUCH_DATA: 0x15,

    // Generic Protocol Errors
    PROTOCOL_PARSE_ERROR: 0x100,
    PROTOCOL_VALIDATION_ERROR: 0x101,
    PROTOCOL_BUFFER_OVERFLOW: 0x102,
    PROTOCOL_INVALID_STATE: 0x103
}

// Service definitions for session management
service SessionManager {
    request RegisterSession {
        command: 0x0065,
        session_handle: 0,
        payload: RegisterSessionData {
            version: 1,
            options: 0
        }
    }

    response RegisterSession {
        command: 0x0065,
        status: 0,
        session_handle: @generated,
        payload: RegisterSessionData {
            version: 1,
            options: 0
        }
    }

    request UnregisterSession {
        command: 0x0066,
        session_handle: @required,
        payload: @empty
    }

    response UnregisterSession {
        command: 0x0066,
        status: 0,
        session_handle: @echo,
        payload: @empty
    }
}

service CIPServices {
    request ReadNamedTag {
        service: 0x4C,
        path: @required,
        payload: ReadNamedTagRequest {
            element_count: 1
        }
    }

    response ReadNamedTag {
        service: 0xCC,  // 0x4C | 0x80
        status: 0,
        payload: {
            u16_le data_type;
            u16_le element_count;
            u8 data[] @remaining_bytes;
        }
    }

    request WriteNamedTag {
        service: 0x4D,
        path: @required,
        payload: WriteNamedTagRequest {
            data_type: @required,
            element_count: @required,
            data: @required
        }
    }

    response WriteNamedTag {
        service: 0xCD,  // 0x4D | 0x80
        status: 0,
        payload: @empty
    }
}

// Validators for common validation patterns
validators {
    validate_session_handle(uint32_t session_handle) {
        @validate(session_handle != 0);
        @call_post_decode(check_session_exists);
    }

    validate_command_code(uint16_t command) {
        @validate(command >= 0x0065 && command <= 0x0070);
    }

    validate_cip_service(uint8_t service) {
        @validate(service <= 0x7F);  // Ensure request bit is clear
    }

    validate_path_size(uint8_t path_size) {
        @validate(path_size <= 32);  // Reasonable limit
    }

    validate_item_count(uint16_t item_count) {
        @validate(item_count == 2);  // CPF always has 2 items
    }
}