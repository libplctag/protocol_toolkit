(* Protocol Definition Language v3 Grammar *)

protocol_file = { declaration } ;

declaration = alias_declaration | message_declaration ;

alias_declaration = "aliases" ":" "{" alias_definitions "}" ;
alias_definitions = { alias_definition "," } ;
alias_definition = identifier ":" alias_spec ;
alias_spec = "{" alias_attributes "}" ;
alias_attributes = { alias_attribute "," } ;
alias_attribute = "type" ":" type_name | "const" ":" constant | "byte_order_map" ":" byte_order ;

message_declaration = identifier ":" "{" message_body "}" ;
message_body = { field_declaration "," } ;
field_declaration = identifier ":" field_spec ;

field_spec = type_name | "{" field_attributes "}" | discriminated_union | array_type ;

field_attributes = { field_attribute "," } ;
field_attribute = "type" ":" type_name |
                  "const" ":" constant |
                  "validate" ":" expression |
                  "pre_encode" ":" identifier |
                  "post_decode" ":" identifier |
                  "auto_size" ":" string_literal ;

discriminated_union = "{" union_attributes "}" ;
union_attributes = { union_attribute "," } ;
union_attribute = "type_choice" ":" "[" choice_list "]" |
                  "default" ":" identifier ;

choice_list = identifier { "," identifier } ;

array_type = type_name "[" array_size "]" ;
array_size = identifier | number ;

type_name = base_type | identifier ;
base_type = "u8" | "u16" | "u32" | "u64" | "i8" | "i16" | "i32" | "i64" | "f32" | "f64" ;

byte_order = "[" number_list "]" ;
number_list = number { "," number } ;

expression = logical_or ;
logical_or = logical_and { "||" logical_and } ;
logical_and = equality { "&&" equality } ;
equality = relational { ( "==" | "!=" ) relational } ;
relational = additive { ( "<" | "<=" | ">" | ">=" ) additive } ;
additive = multiplicative { ( "+" | "-" ) multiplicative } ;
multiplicative = unary { ( "*" | "/" | "%" ) unary } ;
unary = [ ( "!" | "-" | "+" ) ] primary ;
primary = identifier | number | "(" expression ")" ;

constant = number | string_literal ;
identifier = letter { letter | digit | "_" } ;
number = digit { digit } [ "." digit { digit } ] ;
string_literal = '"' { character } '"' ;
letter = "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" ;
digit = "0" | "1" | ... | "9" ;
character = (* any character except '"' *) ;

(* Key features of the grammar:
 * - LL(1) Compatible: All constructs can be parsed with one lookahead token
 * - JSON-like Syntax: Uses commas within curly braces, no semicolons between top-level declarations
 * - Constant Generation: Constant aliases generate #define entries in header files using uppercase names
 * - Sequential Type Choice: Discriminated unions try alternatives in order until one passes (based on constant field validation)
 * - C-Style Arrays: Array notation uses type[size] format
 * - Clean Structure: Removes CUE constraint syntax in favor of explicit attributes
 *)