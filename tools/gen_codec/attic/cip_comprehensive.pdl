// Comprehensive CIP Protocol Definition Language Specification
// Based on analysis of EtherNet/IP specification, pycomm3 (Rockwell), and aphytcomm (OMRON)

protocol CIP_Comprehensive {
    name: "Common Industrial Protocol (CIP) - Comprehensive",
    version: "2.0",
    default_port: 44818,
    endianness: little,
    transport: tcp
}

// ============================================================================
// TYPE ALIASES AND COMMON STRUCTURES
// ============================================================================

type_aliases {
    // Basic data types
    alias u8 = uint8_t;
    alias u16 = uint16_t;
    alias u32 = uint32_t;
    alias u64 = uint64_t;
    alias i8 = int8_t;
    alias i16 = int16_t;
    alias i32 = int32_t;
    alias i64 = int64_t;
    alias f32 = float32_t;
    alias f64 = float64_t;
    
    // Legacy PLC5 byte orders
    alias f32_plc5 = f32 @byte_order(2, 3, 0, 1);
    alias i32_plc5 = i32 @byte_order(2, 3, 0, 1);
    alias u32_plc5 = u32 @byte_order(2, 3, 0, 1);
    
    // PLC5 string with swapped byte pairs
    alias plc5_str_data = u8[82] @byte_order(
        1,0, 3,2, 5,4, 7,6, 9,8, 11,10, 13,12, 15,14,
        17,16, 19,18, 21,20, 23,22, 25,24, 27,26, 29,28,
        31,30, 33,32, 35,34, 37,36, 39,38, 41,40, 43,42,
        45,44, 47,46, 49,48, 51,50, 53,52, 55,54, 57,56,
        59,58, 61,60, 63,62, 65,64, 67,66, 69,68, 71,70,
        73,72, 75,74, 77,76, 79,78, 81,80
    );
    
    // Common CIP string types
    alias cip_short_string = message {
        u8 length;
        u8 data[length];
    };
    
    alias cip_string = message {
        u16 length;
        u8 data[length];
    };
    
    alias cip_long_string = message {
        u32 length;
        u8 data[length];
    };
    
    // Logix string format
    alias logix_string = message {
        u32 length;
        u8 data[length];
    };
    
    // OMRON nanosecond timestamp
    alias omron_timestamp = u64 @call_post_decode(convert_omron_timestamp);
}

// ============================================================================
// CIP DATA TYPE REGISTRY
// ============================================================================

datatype_registry {
    // Standard CIP Elementary Data Types
    CIP_BOOL: { code: 0xC1, size: 1, type: "u8" },
    CIP_SINT: { code: 0xC2, size: 1, type: "i8" },
    CIP_INT: { code: 0xC3, size: 2, type: "i16" },
    CIP_DINT: { code: 0xC4, size: 4, type: "i32" },
    CIP_LINT: { code: 0xC5, size: 8, type: "i64" },
    CIP_USINT: { code: 0xC6, size: 1, type: "u8" },
    CIP_UINT: { code: 0xC7, size: 2, type: "u16" },
    CIP_UDINT: { code: 0xC8, size: 4, type: "u32" },
    CIP_ULINT: { code: 0xC9, size: 8, type: "u64" },
    CIP_REAL: { code: 0xCA, size: 4, type: "f32" },
    CIP_LREAL: { code: 0xCB, size: 8, type: "f64" },
    
    // Time Data Types
    CIP_STIME: { code: 0xCC, size: 4, type: "i32" },
    CIP_DATE: { code: 0xCD, size: 2, type: "u16" },
    CIP_TIME_OF_DAY: { code: 0xCE, size: 4, type: "u32" },
    CIP_DATE_AND_TIME: { code: 0xCF, size: 8, type: "u64" },
    
    // String Data Types
    CIP_STRING: { code: 0xD0, size: variable, type: "cip_string" },
    CIP_BYTE: { code: 0xD1, size: 1, type: "u8" },
    CIP_WORD: { code: 0xD2, size: 2, type: "u16" },
    CIP_DWORD: { code: 0xD3, size: 4, type: "u32" },
    CIP_LWORD: { code: 0xD4, size: 8, type: "u64" },
    CIP_STRING2: { code: 0xD5, size: variable, type: "cip_string" },
    CIP_FTIME: { code: 0xD6, size: 4, type: "u32" },
    CIP_LTIME: { code: 0xD7, size: 8, type: "u64" },
    CIP_ITIME: { code: 0xD8, size: 2, type: "u16" },
    CIP_STRINGN: { code: 0xD9, size: variable, type: "cip_string" },
    
    // Constructed Data Types
    CIP_ARRAY: { code: 0xA3, size: variable, type: "cip_array" },
    CIP_STRUCTURE: { code: 0xA2, size: variable, type: "cip_structure" },
    CIP_ABBREVIATED_STRUCTURE: { code: 0xA0, size: variable, type: "cip_abbrev_structure" },
    
    // OMRON-Specific Data Types
    OMRON_UNSIGNED_INTEGER_BCD: { code: 0x04, size: 2, type: "u16" },
    OMRON_UNSIGNED_DOUBLE_INTEGER: { code: 0x05, size: 4, type: "u32" },
    OMRON_UNSIGNED_LONG_INTEGER: { code: 0x06, size: 8, type: "u64" },
    OMRON_ENUM: { code: 0x07, size: 4, type: "u32" },
    OMRON_DATE: { code: 0x08, size: 8, type: "u64" },
    OMRON_TIME: { code: 0x09, size: 8, type: "omron_timestamp" },
    OMRON_DATE_AND_TIME: { code: 0x0A, size: 8, type: "omron_timestamp" },
    OMRON_TIME_OF_DAY: { code: 0x0B, size: 8, type: "u64" },
    OMRON_UNION: { code: 0x0C, size: variable, type: "omron_union" },
    
    // Legacy PCCC Data Types
    PCCC_INT: { code: 0x89, size: 2, type: "i16" },
    PCCC_DINT: { code: 0x91, size: 4, type: "i32" },
    PCCC_REAL: { code: 0x8A, size: 4, type: "f32" },
    PCCC_STRING: { code: 0x8D, size: 82, type: "plc5_str_data" }
}

// ============================================================================
// ETHERNET/IP ENCAPSULATION LAYER
// ============================================================================

message EIPHeader {
    u16 command @validate(command >= 0x0001 && command <= 0x0070);
    u16 length @auto_size(data);
    u32 session_handle @call_pre_encode(validate_session_handle);
    u32 status;
    u64 sender_context;
    u32 options;
}

message EIPMessage {
    EIPHeader header;
    
    @switch(header.command) {
        case 0x0001: {  // List Services
            ListServicesData data;
        }
        case 0x0004: {  // List Identity
            ListIdentityData data;
        }
        case 0x0063: {  // List Interfaces
            ListInterfacesData data;
        }
        case 0x0065: {  // Register Session
            RegisterSessionData data;
        }
        case 0x0066: {  // Unregister Session
            @validate(header.length == 0);
        }
        case 0x006F: {  // Send RR Data (Unconnected)
            SendRRData data;
        }
        case 0x0070: {  // Send Unit Data (Connected)
            SendUnitData data;
        }
        default: {
            u8 data[header.length];
        }
    }
}

message RegisterSessionData {
    u16 protocol_version @const(1);
    u16 options @default(0);
}

message ListServicesData {
    u16 item_count;
    ServiceItem items[item_count];
}

message ServiceItem {
    u16 item_type_code;
    u16 item_length;
    u16 version;
    u16 capability_flags;
    cip_short_string service_name;
}

message ListIdentityData {
    u16 item_count;
    IdentityItem items[item_count];
}

message IdentityItem {
    u16 item_type_code @const(0x000C);
    u16 item_length;
    u16 encapsulation_version;
    u32 socket_address;
    u16 socket_port;
    u16 vendor_id;
    u16 device_type;
    u16 product_code;
    u8 revision_major;
    u8 revision_minor;
    u16 status;
    u32 serial_number;
    cip_short_string product_name;
    u8 state;
}

// ============================================================================
// COMMON PACKET FORMAT (CPF) LAYER
// ============================================================================

message SendRRData {
    u32 interface_handle @default(0);
    u16 timeout;
    u16 item_count @validate(item_count >= 2);
    CPFItem items[item_count];
}

message SendUnitData {
    u32 interface_handle;
    u16 timeout;
    u16 item_count @validate(item_count >= 2);
    CPFItem items[item_count];
}

message CPFItem {
    u16 item_type;
    u16 item_length;
    
    @switch(item_type) {
        case 0x0000: {  // Null Address Item
            @validate(item_length == 0);
        }
        case 0x00A1: {  // Connected Address Item
            @validate(item_length == 4);
            u32 connection_id;
        }
        case 0x00B1: {  // Connected Data Item
            u16 connection_sequence;
            u8 data[item_length - 2];
        }
        case 0x00B2: {  // Unconnected Data Item
            u8 data[item_length];
        }
        case 0x0100: {  // Unconnected Address Item
            @validate(item_length == 0);
        }
        default: {
            u8 data[item_length];
        }
    }
}

// ============================================================================
// CIP MESSAGE LAYER
// ============================================================================

message CIPRequest {
    u8 service @validate(service <= 0x7F);
    u8 request_path_size;  // Size in 16-bit words
    u8 request_path[request_path_size * 2] @align(2);
    
    @switch(service) {
        case 0x01: {  // Get Attributes All
            GetAttributesAllRequest service_data;
        }
        case 0x02: {  // Get Attributes Single
            GetAttributesSingleRequest service_data;
        }
        case 0x03: {  // Set Attributes Single
            SetAttributesSingleRequest service_data;
        }
        case 0x04: {  // Get Attributes List
            GetAttributesListRequest service_data;
        }
        case 0x05: {  // Set Attributes List
            SetAttributesListRequest service_data;
        }
        case 0x0A: {  // Multiple Service Packet
            MultipleServicePacketRequest service_data;
        }
        case 0x0E: {  // Get Attributes All (with list)
            GetAttributesAllWithListRequest service_data;
        }
        case 0x4B: {  // PCCC Execute
            PCCCExecuteRequest service_data;
        }
        case 0x4C: {  // Read Named Tag
            ReadNamedTagRequest service_data;
        }
        case 0x4D: {  // Write Named Tag
            WriteNamedTagRequest service_data;
        }
        case 0x4E: {  // Read Modify Write / Forward Close
            ReadModifyWriteRequest service_data;
        }
        case 0x52: {  // Read Named Tag Fragmented
            ReadNamedTagFragmentedRequest service_data;
        }
        case 0x53: {  // Write Named Tag Fragmented
            WriteNamedTagFragmentedRequest service_data;
        }
        case 0x54: {  // Forward Open
            ForwardOpenRequest service_data;
        }
        case 0x55: {  // Get Instance Attribute List
            GetInstanceAttributeListRequest service_data;
        }
        case 0x5B: {  // Large Forward Open
            LargeForwardOpenRequest service_data;
        }
        case 0x5F: {  // Get Instance List Extended (OMRON)
            GetInstanceListExtendedRequest service_data;
        }
        default: {
            u8 service_data[] @remaining_bytes;
        }
    }
}

message CIPResponse {
    u8 service @validate((service & 0x80) != 0);
    u8 reserved @const(0);
    u8 general_status;
    u8 additional_status_size;
    u16 additional_status[additional_status_size];
    u8 response_data[] @remaining_bytes;
}

// ============================================================================
// CIP SERVICE DEFINITIONS
// ============================================================================

message GetAttributesAllRequest {
    // No additional data
}

message GetAttributesSingleRequest {
    u16 attribute_id;
}

message SetAttributesSingleRequest {
    u16 attribute_id;
    u8 attribute_data[] @remaining_bytes;
}

message GetAttributesListRequest {
    u16 attribute_count;
    u16 attribute_list[attribute_count];
}

message SetAttributesListRequest {
    u16 attribute_count;
    AttributeValuePair attributes[attribute_count];
}

message AttributeValuePair {
    u16 attribute_id;
    u16 attribute_status;
    u8 attribute_data[] @remaining_bytes;
}

message MultipleServicePacketRequest {
    u16 service_count;
    u16 service_offsets[service_count];
    u8 service_data[] @remaining_bytes;
}

message GetAttributesAllWithListRequest {
    u16 attribute_count;
    u16 attribute_list[attribute_count];
}

message ReadNamedTagRequest {
    u16 element_count @default(1);
}

message WriteNamedTagRequest {
    u16 data_type;
    u16 element_count;
    u8 data[] @remaining_bytes;
}

message ReadModifyWriteRequest {
    u16 element_count;
    u8 and_mask[] @remaining_bytes;
    u8 or_mask[] @remaining_bytes;
}

message ReadNamedTagFragmentedRequest {
    u16 element_count;
    u32 byte_offset;
}

message WriteNamedTagFragmentedRequest {
    u16 data_type;
    u16 element_count;
    u32 byte_offset;
    u8 data[] @remaining_bytes;
}

message ForwardOpenRequest {
    u8 secs_per_tick;
    u8 timeout_ticks;
    u32 server_conn_id @default(0);
    u32 client_conn_id @call_pre_encode(generate_connection_id);
    u16 conn_serial_number;
    u16 orig_vendor_id;
    u32 orig_serial_number;
    u8 conn_timeout_multiplier;
    u8 reserved1 @const(0);
    u8 reserved2 @const(0);
    u8 reserved3 @const(0);
    u32 client_to_server_rpi;
    u16 client_to_server_params;
    u32 server_to_client_rpi;
    u16 server_to_client_params;
    u8 transport_class @const(0xA3);
    u8 connection_path_size;
    u8 connection_path[connection_path_size * 2] @align(2);
}

message LargeForwardOpenRequest {
    u8 secs_per_tick;
    u8 timeout_ticks;
    u32 server_conn_id @default(0);
    u32 client_conn_id @call_pre_encode(generate_connection_id);
    u16 conn_serial_number;
    u16 orig_vendor_id;
    u32 orig_serial_number;
    u8 conn_timeout_multiplier;
    u8 reserved1 @const(0);
    u8 reserved2 @const(0);
    u8 reserved3 @const(0);
    u32 client_to_server_rpi;
    u32 client_to_server_params;  // 32-bit instead of 16-bit
    u32 server_to_client_rpi;
    u32 server_to_client_params;  // 32-bit instead of 16-bit
    u8 transport_class @const(0xA3);
    u8 connection_path_size;
    u8 connection_path[connection_path_size * 2] @align(2);
}

message GetInstanceAttributeListRequest {
    u16 attribute_count;
    u16 attribute_list[attribute_count];
}

message GetInstanceListExtendedRequest {
    u16 class_id;
    u16 starting_instance;
    u16 number_of_instances;
}

message PCCCExecuteRequest {
    u8 pccc_command;
    u8 pccc_status;
    u16 pccc_transaction_id;
    u8 pccc_data[] @remaining_bytes;
}

// ============================================================================
// OMRON-SPECIFIC EXTENSIONS
// ============================================================================

message OMRONSimpleDataSegmentRequest {
    u8 segment_type @const(0x80);
    u8 segment_length @const(0x03);
    u32 offset;
    u16 size;
}

message OMRONVariableObjectRequest {
    u8 service;
    u8 request_path_size;
    u8 request_path[request_path_size * 2] @align(2);
    OMRONSimpleDataSegmentRequest segment;
}

message OMRONVariableTypeObject {
    u16 type_code;
    u16 crc_code;
    u16 structure_size;
    u16 member_count;
    OMRONTypeMember members[member_count];
}

message OMRONTypeMember {
    u16 data_type;
    u16 offset;
    cip_short_string member_name;
}

message OMRONUnion {
    u16 union_type;
    u16 union_size;
    u8 union_data[union_size];
}

// ============================================================================
// LEGACY PCCC SUPPORT
// ============================================================================

message PCCCDataFileRequest {
    u8 file_type;
    u8 file_number;
    u16 element_number;
    u16 sub_element;
    u16 element_count;
}

message PCCCStringData {
    u16 length @validate(length <= 82);
    plc5_str_data data;
}

// ============================================================================
// COMPLEX DATA STRUCTURES
// ============================================================================

message CIPArray {
    u16 data_type;
    u8 dimensions;
    u32 dimension_sizes[dimensions];
    u8 array_data[] @remaining_bytes;
}

message CIPStructure {
    u16 structure_handle;
    u16 crc_code;
    u16 member_count;
    CIPStructureMember members[member_count];
}

message CIPStructureMember {
    u16 data_type;
    u16 offset;
    cip_short_string member_name;
}

message CIPAbbreviatedStructure {
    u16 structure_handle;
    u8 structure_data[] @remaining_bytes;
}

// ============================================================================
// CIP SEGMENTS AND PATHS
// ============================================================================

message CIPSegment {
    u8 segment_type;
    
    @switch(segment_type & 0xE0) {
        case 0x00: {  // Port Segment
            PortSegment port_data;
        }
        case 0x20: {  // Logical Segment
            LogicalSegment logical_data;
        }
        case 0x40: {  // Network Segment
            NetworkSegment network_data;
        }
        case 0x60: {  // Symbolic Segment
            SymbolicSegment symbolic_data;
        }
        case 0x80: {  // Data Segment
            DataSegment data_segment;
        }
        default: {
            u8 segment_data[] @remaining_bytes;
        }
    }
}

message PortSegment {
    @switch(segment_type & 0x0F) {
        case 0x00: {  // Port identifier
            u8 port_id;
        }
        case 0x01: {  // Extended port identifier
            u16 port_id;
        }
        default: {
            u8 port_data[] @remaining_bytes;
        }
    }
}

message LogicalSegment {
    @switch(segment_type & 0x1C) {
        case 0x00: {  // Class ID
            @switch(segment_type & 0x03) {
                case 0x00: { u8 class_id; }
                case 0x01: { u16 class_id; }
                case 0x02: { u32 class_id; }
            }
        }
        case 0x04: {  // Instance ID
            @switch(segment_type & 0x03) {
                case 0x00: { u8 instance_id; }
                case 0x01: { u16 instance_id; }
                case 0x02: { u32 instance_id; }
            }
        }
        case 0x08: {  // Member ID
            @switch(segment_type & 0x03) {
                case 0x00: { u8 member_id; }
                case 0x01: { u16 member_id; }
                case 0x02: { u32 member_id; }
            }
        }
        case 0x10: {  // Attribute ID
            @switch(segment_type & 0x03) {
                case 0x00: { u8 attribute_id; }
                case 0x01: { u16 attribute_id; }
                case 0x02: { u32 attribute_id; }
            }
        }
        case 0x18: {  // Special/Electronic Key
            u8 key_format;
            u8 key_data[] @remaining_bytes;
        }
        case 0x1C: {  // Service ID
            @switch(segment_type & 0x03) {
                case 0x00: { u8 service_id; }
                case 0x01: { u16 service_id; }
                case 0x02: { u32 service_id; }
            }
        }
    }
}

message NetworkSegment {
    u8 network_id;
    u8 network_data[] @remaining_bytes;
}

message SymbolicSegment {
    u8 symbol_size;
    u8 symbol_data[symbol_size];
    @when(symbol_size % 2 == 1) u8 padding;
}

message DataSegment {
    u8 data_size;
    u8 data[data_size];
    @when(data_size % 2 == 1) u8 padding;
}

// ============================================================================
// ERROR HANDLING AND STATUS CODES
// ============================================================================

error_codes {
    // EIP Encapsulation Status Codes
    EIP_SUCCESS: 0x0000,
    EIP_INVALID_COMMAND: 0x0001,
    EIP_INSUFFICIENT_MEMORY: 0x0002,
    EIP_INCORRECT_DATA: 0x0003,
    EIP_INVALID_SESSION_HANDLE: 0x0064,
    EIP_INVALID_LENGTH: 0x0065,
    EIP_UNSUPPORTED_PROTOCOL: 0x0069,
    
    // CIP General Status Codes
    CIP_SUCCESS: 0x00,
    CIP_CONNECTION_FAILURE: 0x01,
    CIP_RESOURCE_UNAVAILABLE: 0x02,
    CIP_INVALID_PARAMETER: 0x03,
    CIP_PATH_SEGMENT_ERROR: 0x04,
    CIP_PATH_DESTINATION_UNKNOWN: 0x05,
    CIP_PARTIAL_TRANSFER: 0x06,
    CIP_CONNECTION_LOST: 0x07,
    CIP_SERVICE_NOT_SUPPORTED: 0x08,
    CIP_INVALID_ATTRIBUTE: 0x09,
    CIP_ATTRIBUTE_LIST_ERROR: 0x0A,
    CIP_ALREADY_IN_REQUESTED_MODE: 0x0B,
    CIP_OBJECT_STATE_CONFLICT: 0x0C,
    CIP_OBJECT_ALREADY_EXISTS: 0x0D,
    CIP_ATTRIBUTE_NOT_SETTABLE: 0x0E,
    CIP_PRIVILEGE_VIOLATION: 0x0F,
    CIP_DEVICE_STATE_CONFLICT: 0x10,
    CIP_REPLY_DATA_TOO_LARGE: 0x11,
    CIP_FRAGMENTATION_PRIMITIVE: 0x12,
    CIP_NOT_ENOUGH_DATA: 0x13,
    CIP_ATTRIBUTE_NOT_SUPPORTED: 0x14,
    CIP_TOO_MUCH_DATA: 0x15,
    CIP_OBJECT_DOES_NOT_EXIST: 0x16,
    CIP_SERVICE_FRAGMENTATION: 0x17,
    CIP_NO_STORED_ATTRIBUTE_DATA: 0x18,
    CIP_STORE_OPERATION_FAILURE: 0x19,
    CIP_ROUTING_FAILURE: 0x1A,
    CIP_ROUTING_FAILURE_BAD_SERVICE: 0x1B,
    CIP_ROUTING_FAILURE_BAD_ATTRIBUTE: 0x1C,
    CIP_ROUTING_FAILURE_ALREADY_COMPLETE: 0x1D,
    CIP_ROUTING_FAILURE_OBJECT_DOES_NOT_EXIST: 0x1E,
    CIP_ROUTING_FAILURE_INSTANCE_DOES_NOT_EXIST: 0x1F,
    CIP_ROUTING_FAILURE_ATTRIBUTE_DOES_NOT_EXIST: 0x20,
    CIP_ROUTING_FAILURE_EMBEDDED_SERVICE_ERROR: 0x21,
    CIP_ROUTING_FAILURE_VENDOR_SPECIFIC_ERROR: 0x22,
    CIP_ROUTING_FAILURE_INVALID_PARAMETER: 0x23,
    CIP_ROUTING_FAILURE_WRITE_ONCE_ALREADY_WRITTEN: 0x24,
    CIP_ROUTING_FAILURE_INVALID_REPLY: 0x25,
    CIP_ROUTING_FAILURE_BUFFER_OVERFLOW: 0x26,
    CIP_ROUTING_FAILURE_MESSAGE_FORMAT_ERROR: 0x27,
    CIP_ROUTING_FAILURE_KEY_SEGMENT_ERROR: 0x28,
    CIP_ROUTING_FAILURE_PATH_SIZE_INVALID: 0x29,
    CIP_ROUTING_FAILURE_UNEXPECTED_ATTRIBUTE: 0x2A,
    CIP_ROUTING_FAILURE_INVALID_MEMBER: 0x2B,
    CIP_ROUTING_FAILURE_MEMBER_NOT_SETTABLE: 0x2C,
    CIP_ROUTING_FAILURE_GROUP2_ONLY_SERVER: 0x2D,
    CIP_ROUTING_FAILURE_UNKNOWN_MODBUS_ERROR: 0x2E,
    CIP_ROUTING_FAILURE_ATTRIBUTE_NOT_GETTABLE: 0x2F,
    
    // Vendor-specific error codes
    ROCKWELL_KEYSWITCH_POSITION: 0x30,
    ROCKWELL_INVALID_PASSWORD: 0x31,
    ROCKWELL_PROTECTION_VIOLATION: 0x32,
    ROCKWELL_TAG_DOES_NOT_EXIST: 0x33,
    ROCKWELL_INVALID_DATA_TYPE: 0x34,
    ROCKWELL_INVALID_ARRAY_SUBSCRIPT: 0x35,
    
    // OMRON-specific error codes
    OMRON_VARIABLE_NOT_FOUND: 0x50,
    OMRON_TYPE_MISMATCH: 0x51,
    OMRON_ACCESS_DENIED: 0x52,
    OMRON_STRUCTURE_CRC_ERROR: 0x53,
    
    // Protocol-level errors
    PROTOCOL_PARSE_ERROR: 0x100,
    PROTOCOL_VALIDATION_ERROR: 0x101,
    PROTOCOL_BUFFER_OVERFLOW: 0x102,
    PROTOCOL_INVALID_STATE: 0x103,
    PROTOCOL_TIMEOUT: 0x104,
    PROTOCOL_CONNECTION_LOST: 0x105
}

// ============================================================================
// SERVICE DEFINITIONS
// ============================================================================

service EIPSessionManager {
    request RegisterSession {
        command: 0x0065,
        session_handle: 0,
        data: RegisterSessionData {
            protocol_version: 1,
            options: 0
        }
    }
    
    response RegisterSession {
        command: 0x0065,
        status: 0,
        session_handle: @generated,
        data: RegisterSessionData {
            protocol_version: 1,
            options: 0
        }
    }
    
    request UnregisterSession {
        command: 0x0066,
        session_handle: @required,
        data: @empty
    }
    
    response UnregisterSession {
        command: 0x0066,
        status: 0,
        session_handle: @echo,
        data: @empty
    }
}

service CIPTagServices {
    request ReadTag {
        service: 0x4C,
        request_path: @required,
        service_data: ReadNamedTagRequest {
            element_count: 1
        }
    }
    
    response ReadTag {
        service: 0xCC,
        general_status: 0,
        response_data: {
            u16 data_type;
            u16 element_count;
            u8 data[] @remaining_bytes;
        }
    }
    
    request WriteTag {
        service: 0x4D,
        request_path: @required,
        service_data: WriteNamedTagRequest {
            data_type: @required,
            element_count: @required,
            data: @required
        }
    }
    
    response WriteTag {
        service: 0xCD,
        general_status: 0,
        response_data: @empty
    }
}

service CIPConnectionManager {
    request ForwardOpen {
        service: 0x54,
        request_path: @required,
        service_data: ForwardOpenRequest
    }
    
    response ForwardOpen {
        service: 0xD4,
        general_status: 0,
        response_data: {
            u32 server_conn_id;
            u32 client_conn_id;
            u16 conn_serial_number;
            u16 orig_vendor_id;
            u32 orig_serial_number;
            u32 client_to_server_api;
            u32 server_to_client_api;
            u8 application_reply_size;
            u8 application_reply[] @remaining_bytes;
        }
    }
}

// ============================================================================
// VALIDATION FUNCTIONS
// ============================================================================

validators {
    validate_session_handle(uint32_t session_handle) {
        @validate(session_handle != 0);
        @call_post_decode(check_session_exists);
    }
    
    validate_eip_command(uint16_t command) {
        @validate(command >= 0x0001 && command <= 0x0070);
    }
    
    validate_cip_service(uint8_t service) {
        @validate(service <= 0x7F);
    }
    
    validate_path_size(uint8_t path_size) {
        @validate(path_size <= 64);
    }
    
    validate_item_count(uint16_t item_count) {
        @validate(item_count >= 2 && item_count <= 8);
    }
    
    validate_data_type(uint16_t data_type) {
        @validate(data_type >= 0x00 && data_type <= 0xFF);
    }
    
    validate_crc_code(uint16_t crc_code) {
        @call_post_decode(verify_structure_crc);
    }
}