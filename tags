!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CHECK_PTK_ERR	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	73;"	d	file:
CHECK_PTK_ERR	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	73;"	d	file:
CIP_DEVICE_TYPES	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static const cip_device_type_t CIP_DEVICE_TYPES[] = {$/;"	v	file:
CIP_DEVICE_TYPES	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static const cip_device_type_t CIP_DEVICE_TYPES[] = {$/;"	v	file:
CIP_DEVICE_TYPES	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^} CIP_DEVICE_TYPES[] = {$/;"	v	typeref:struct:__anon16	file:
CIP_SEGMENT_TYPE_DATA	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_DATA = 0x80,        \/\/ Data segment$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL = 0x20,    \/\/ Logical segment$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL_CLASS	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL_CLASS = 0x21, \/\/ Logical segment with 8-bit class ID$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL_CONNECTION	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL_CONNECTION = 0x2C, \/\/ Logical segment with 8-bit connection point$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL_ELEMENT	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL_ELEMENT = 0x30,    \/\/ Logical segment with 8-bit element index$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL_INSTANCE	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL_INSTANCE = 0x24, \/\/ Logical segment with 8-bit instance ID$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL_MEMBER	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL_MEMBER = 0x28,   \/\/ Logical segment with 8-bit member ID$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_LOGICAL_SPECIAL	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_LOGICAL_SPECIAL = 0x38,    \/\/ Logical segment special (e.g. all$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_NETWORK	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_NETWORK = 0x40,    \/\/ Network segment$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_PORT	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_PORT = 0x00,       \/\/ Port segment$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_SYMBOLIC	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_SYMBOLIC = 0x60,   \/\/ Symbolic segment$/;"	e	enum:__anon13
CIP_SEGMENT_TYPE_SYMBOLIC_EXTENDED	src/examples/ethernetip/lib/include/ethernetip.h	/^    CIP_SEGMENT_TYPE_SYMBOLIC_EXTENDED = 0x91, \/\/ Extended symbolic segment$/;"	e	enum:__anon13
CIP_VENDORS	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static const cip_vendor_t CIP_VENDORS[] = {$/;"	v	file:
CIP_VENDORS	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static const cip_vendor_t CIP_VENDORS[] = {$/;"	v	file:
CIP_VENDORS	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^} CIP_VENDORS[] = {$/;"	v	typeref:struct:__anon15	file:
CPF_TYPE_CIP_IDENTITY	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	31;"	d	file:
CPF_TYPE_CIP_IDENTITY	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	31;"	d	file:
CPF_TYPE_CIP_IDENTITY	src/examples/ethernetip/lib/src/ethernetip_pdu.c	30;"	d	file:
CPF_TYPE_NULL	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	30;"	d	file:
CPF_TYPE_NULL	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	30;"	d	file:
CPF_TYPE_NULL	src/examples/ethernetip/lib/src/ethernetip_pdu.c	29;"	d	file:
CPF_TYPE_SOCKET_ADDR	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	32;"	d	file:
CPF_TYPE_SOCKET_ADDR	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	32;"	d	file:
CPF_TYPE_UNCONNECTED_DATA	src/examples/ethernetip/lib/src/ethernetip_pdu.c	31;"	d	file:
DEVICE_STATE_MAJOR_FAULT	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	153;"	d	file:
DEVICE_STATE_OPERATIONAL	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	151;"	d	file:
DEVICE_STATE_STANDBY	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	152;"	d	file:
DEVICE_STATUS_CONFIGURED_MASK	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	147;"	d	file:
DEVICE_STATUS_CONFIGURED_SHIFT	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	148;"	d	file:
DEVICE_STATUS_OWNED	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	146;"	d	file:
EIP_DEFAULT_PORT	src/examples/ethernetip/lib/src/ethernetip_connection.c	33;"	d	file:
EIP_DEVICE_STATE_CONFIGURATION	src/examples/ethernetip/lib/include/ethernetip.h	180;"	d
EIP_DEVICE_STATE_MAJOR_FAULT	src/examples/ethernetip/lib/include/ethernetip.h	179;"	d
EIP_DEVICE_STATE_NONEXISTENT	src/examples/ethernetip/lib/include/ethernetip.h	175;"	d
EIP_DEVICE_STATE_OPERATIONAL	src/examples/ethernetip/lib/include/ethernetip.h	178;"	d
EIP_DEVICE_STATE_SELF_TESTING	src/examples/ethernetip/lib/include/ethernetip.h	176;"	d
EIP_DEVICE_STATE_STANDBY	src/examples/ethernetip/lib/include/ethernetip.h	177;"	d
EIP_DEVICE_STATE_WAITING_FOR_RESET	src/examples/ethernetip/lib/include/ethernetip.h	181;"	d
EIP_HEADER_SIZE	src/examples/ethernetip/lib/src/ethernetip_connection.c	39;"	d	file:
EIP_HEADER_SIZE	src/examples/ethernetip/lib/src/ethernetip_pdu.c	26;"	d	file:
EIP_LIST_IDENTITY_CMD	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	27;"	d	file:
EIP_LIST_IDENTITY_CMD	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	27;"	d	file:
EIP_LIST_IDENTITY_CMD	src/examples/ethernetip/lib/src/ethernetip_pdu.c	24;"	d	file:
EIP_LIST_IDENTITY_REQ_TYPE	src/examples/ethernetip/lib/include/ethernetip.h	188;"	d
EIP_LIST_IDENTITY_RESP_TYPE	src/examples/ethernetip/lib/include/ethernetip.h	200;"	d
EIP_PDU_IS_RESPONSE	src/examples/ethernetip/lib/include/ethernetip.h	198;"	d
EIP_PDU_TYPE_RESPONSE_FLAG	src/examples/ethernetip/lib/include/ethernetip.h	197;"	d
EIP_PORT	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	26;"	d	file:
EIP_PORT	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	26;"	d	file:
EIP_REGISTER_SESSION_CMD	src/examples/ethernetip/lib/src/ethernetip_connection.c	34;"	d	file:
EIP_UNCONNECTED_SEND_CMD	src/examples/ethernetip/lib/src/ethernetip_connection.c	36;"	d	file:
EIP_UNCONNECTED_SEND_CMD	src/examples/ethernetip/lib/src/ethernetip_pdu.c	25;"	d	file:
EIP_UNREGISTER_SESSION_CMD	src/examples/ethernetip/lib/src/ethernetip_connection.c	35;"	d	file:
ETHERNETIP_H	src/examples/ethernetip/lib/include/ethernetip.h	2;"	d
HANDLE_GENERATION_SHIFT	src/lib/ptk_shared.c	22;"	d	file:
HANDLE_INDEX_MASK	src/lib/ptk_shared.c	21;"	d	file:
INITIAL_QUEUE_CAPACITY	src/lib/linux/threadlet_scheduler.c	8;"	d	file:
INITIAL_REGISTRATIONS_CAPACITY	src/lib/linux/threadlet_scheduler.c	7;"	d	file:
INITIAL_TABLE_SIZE	src/lib/ptk_shared.c	23;"	d	file:
MAX_CLIENTS	src/tests/test_tcp_echo_abort.c	35;"	d	file:
MAX_EVENTS	src/lib/linux/linux_event_loop.c	6;"	d	file:
MODBUS_EXCEPTION_ILLEGAL_DATA_ADDRESS	src/examples/modbus/lib/include/modbus.h	341;"	d
MODBUS_EXCEPTION_ILLEGAL_DATA_VALUE	src/examples/modbus/lib/include/modbus.h	342;"	d
MODBUS_EXCEPTION_ILLEGAL_FUNCTION	src/examples/modbus/lib/include/modbus.h	340;"	d
MODBUS_EXCEPTION_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	331;"	d
MODBUS_EXCEPTION_SLAVE_DEVICE_FAILURE	src/examples/modbus/lib/include/modbus.h	343;"	d
MODBUS_FC_READ_COILS	src/examples/modbus/lib/include/modbus.h	146;"	d
MODBUS_FC_READ_DISCRETE_INPUTS	src/examples/modbus/lib/include/modbus.h	169;"	d
MODBUS_FC_READ_HOLDING_REGISTERS	src/examples/modbus/lib/include/modbus.h	191;"	d
MODBUS_FC_READ_INPUT_REGISTERS	src/examples/modbus/lib/include/modbus.h	214;"	d
MODBUS_FC_WRITE_MULTIPLE_COILS	src/examples/modbus/lib/include/modbus.h	282;"	d
MODBUS_FC_WRITE_MULTIPLE_REGISTERS	src/examples/modbus/lib/include/modbus.h	307;"	d
MODBUS_FC_WRITE_SINGLE_COIL	src/examples/modbus/lib/include/modbus.h	236;"	d
MODBUS_FC_WRITE_SINGLE_REGISTER	src/examples/modbus/lib/include/modbus.h	259;"	d
MODBUS_H	src/examples/modbus/lib/include/modbus.h	2;"	d
MODBUS_MAX_PDU_SIZE	src/examples/modbus/lib/src/modbus_pdu.c	16;"	d	file:
MODBUS_PDU_IS_RESPONSE	src/examples/modbus/lib/include/modbus.h	139;"	d
MODBUS_PDU_TYPE_RESPONSE_FLAG	src/examples/modbus/lib/include/modbus.h	138;"	d
MODBUS_READ_COILS_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	145;"	d
MODBUS_READ_COILS_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	155;"	d
MODBUS_READ_DISCRETE_INPUTS_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	168;"	d
MODBUS_READ_DISCRETE_INPUTS_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	177;"	d
MODBUS_READ_HOLDING_REGISTERS_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	190;"	d
MODBUS_READ_HOLDING_REGISTERS_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	200;"	d
MODBUS_READ_INPUT_REGISTERS_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	213;"	d
MODBUS_READ_INPUT_REGISTERS_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	222;"	d
MODBUS_TCP_HEADER_SIZE	src/examples/modbus/lib/src/modbus_pdu.c	14;"	d	file:
MODBUS_TCP_MAX_ADU_SIZE	src/examples/modbus/lib/src/modbus_pdu.c	17;"	d	file:
MODBUS_TCP_PROTOCOL_ID	src/examples/modbus/lib/src/modbus_pdu.c	15;"	d	file:
MODBUS_WRITE_MULTIPLE_COILS_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	281;"	d
MODBUS_WRITE_MULTIPLE_COILS_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	293;"	d
MODBUS_WRITE_MULTIPLE_REGISTERS_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	306;"	d
MODBUS_WRITE_MULTIPLE_REGISTERS_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	318;"	d
MODBUS_WRITE_SINGLE_COIL_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	235;"	d
MODBUS_WRITE_SINGLE_COIL_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	245;"	d
MODBUS_WRITE_SINGLE_REGISTER_REQ_TYPE	src/examples/modbus/lib/include/modbus.h	258;"	d
MODBUS_WRITE_SINGLE_REGISTER_RESP_TYPE	src/examples/modbus/lib/include/modbus.h	268;"	d
POSIX_ATOMIC_ADD_FETCH	src/lib/posix/atomic_operations.c	146;"	d	file:
POSIX_ATOMIC_ADD_FETCH	src/lib/posix/atomic_operations.c	26;"	d	file:
POSIX_ATOMIC_ALL_OPS	src/lib/posix/atomic_operations.c	/^POSIX_ATOMIC_ALL_OPS(uint8_t, u8)$/;"	f
POSIX_ATOMIC_ALL_OPS	src/lib/posix/atomic_operations.c	206;"	d	file:
POSIX_ATOMIC_ALL_OPS	src/lib/posix/atomic_operations.c	87;"	d	file:
POSIX_ATOMIC_AND_FETCH	src/lib/posix/atomic_operations.c	170;"	d	file:
POSIX_ATOMIC_AND_FETCH	src/lib/posix/atomic_operations.c	50;"	d	file:
POSIX_ATOMIC_CAS	src/lib/posix/atomic_operations.c	200;"	d	file:
POSIX_ATOMIC_CAS	src/lib/posix/atomic_operations.c	80;"	d	file:
POSIX_ATOMIC_FETCH_ADD	src/lib/posix/atomic_operations.c	140;"	d	file:
POSIX_ATOMIC_FETCH_ADD	src/lib/posix/atomic_operations.c	20;"	d	file:
POSIX_ATOMIC_FETCH_AND	src/lib/posix/atomic_operations.c	164;"	d	file:
POSIX_ATOMIC_FETCH_AND	src/lib/posix/atomic_operations.c	44;"	d	file:
POSIX_ATOMIC_FETCH_OR	src/lib/posix/atomic_operations.c	176;"	d	file:
POSIX_ATOMIC_FETCH_OR	src/lib/posix/atomic_operations.c	56;"	d	file:
POSIX_ATOMIC_FETCH_SUB	src/lib/posix/atomic_operations.c	152;"	d	file:
POSIX_ATOMIC_FETCH_SUB	src/lib/posix/atomic_operations.c	32;"	d	file:
POSIX_ATOMIC_FETCH_XOR	src/lib/posix/atomic_operations.c	188;"	d	file:
POSIX_ATOMIC_FETCH_XOR	src/lib/posix/atomic_operations.c	68;"	d	file:
POSIX_ATOMIC_LOAD	src/lib/posix/atomic_operations.c	128;"	d	file:
POSIX_ATOMIC_LOAD	src/lib/posix/atomic_operations.c	8;"	d	file:
POSIX_ATOMIC_OR_FETCH	src/lib/posix/atomic_operations.c	182;"	d	file:
POSIX_ATOMIC_OR_FETCH	src/lib/posix/atomic_operations.c	62;"	d	file:
POSIX_ATOMIC_STORE	src/lib/posix/atomic_operations.c	134;"	d	file:
POSIX_ATOMIC_STORE	src/lib/posix/atomic_operations.c	14;"	d	file:
POSIX_ATOMIC_SUB_FETCH	src/lib/posix/atomic_operations.c	158;"	d	file:
POSIX_ATOMIC_SUB_FETCH	src/lib/posix/atomic_operations.c	38;"	d	file:
POSIX_ATOMIC_XOR_FETCH	src/lib/posix/atomic_operations.c	194;"	d	file:
POSIX_ATOMIC_XOR_FETCH	src/lib/posix/atomic_operations.c	74;"	d	file:
PTK_ALLOC_ALIGNMENT	src/lib/ptk_alloc.c	10;"	d	file:
PTK_ARRAY_DECLARE	src/include/ptk_array.h	42;"	d
PTK_BUF_ARG_COUNT	src/include/ptk_buf.h	254;"	d
PTK_BUF_ARG_COUNT_IMPL	src/include/ptk_buf.h	259;"	d
PTK_BUF_BIG_ENDIAN	src/include/ptk_buf.h	/^typedef enum { PTK_BUF_LITTLE_ENDIAN = 0, PTK_BUF_BIG_ENDIAN = 1 } ptk_buf_endian_t;$/;"	e	enum:__anon7
PTK_BUF_EXPAND	src/include/ptk_buf.h	319;"	d
PTK_BUF_EXPAND_1	src/include/ptk_buf.h	275;"	d
PTK_BUF_EXPAND_10	src/include/ptk_buf.h	307;"	d
PTK_BUF_EXPAND_2	src/include/ptk_buf.h	278;"	d
PTK_BUF_EXPAND_3	src/include/ptk_buf.h	281;"	d
PTK_BUF_EXPAND_4	src/include/ptk_buf.h	284;"	d
PTK_BUF_EXPAND_5	src/include/ptk_buf.h	288;"	d
PTK_BUF_EXPAND_6	src/include/ptk_buf.h	292;"	d
PTK_BUF_EXPAND_7	src/include/ptk_buf.h	297;"	d
PTK_BUF_EXPAND_8	src/include/ptk_buf.h	302;"	d
PTK_BUF_EXPAND_DISPATCH	src/include/ptk_buf.h	318;"	d
PTK_BUF_EXPAND_PTR	src/include/ptk_buf.h	370;"	d
PTK_BUF_EXPAND_PTR_1	src/include/ptk_buf.h	331;"	d
PTK_BUF_EXPAND_PTR_2	src/include/ptk_buf.h	334;"	d
PTK_BUF_EXPAND_PTR_3	src/include/ptk_buf.h	337;"	d
PTK_BUF_EXPAND_PTR_4	src/include/ptk_buf.h	340;"	d
PTK_BUF_EXPAND_PTR_5	src/include/ptk_buf.h	344;"	d
PTK_BUF_EXPAND_PTR_6	src/include/ptk_buf.h	349;"	d
PTK_BUF_EXPAND_PTR_7	src/include/ptk_buf.h	354;"	d
PTK_BUF_EXPAND_PTR_8	src/include/ptk_buf.h	359;"	d
PTK_BUF_EXPAND_PTR_DISPATCH	src/include/ptk_buf.h	369;"	d
PTK_BUF_EXPAND_PTR_SELECT	src/include/ptk_buf.h	368;"	d
PTK_BUF_EXPAND_SELECT	src/include/ptk_buf.h	317;"	d
PTK_BUF_GENERATE_READ_FUNC	src/lib/ptk_buf.c	287;"	d	file:
PTK_BUF_GENERATE_WRITE_FUNC	src/lib/ptk_buf.c	269;"	d	file:
PTK_BUF_LITTLE_ENDIAN	src/include/ptk_buf.h	/^typedef enum { PTK_BUF_LITTLE_ENDIAN = 0, PTK_BUF_BIG_ENDIAN = 1 } ptk_buf_endian_t;$/;"	e	enum:__anon7
PTK_BUF_TYPE_DOUBLE	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_DOUBLE,        \/\/ double$/;"	e	enum:__anon6
PTK_BUF_TYPE_FLOAT	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_FLOAT,         \/\/ float$/;"	e	enum:__anon6
PTK_BUF_TYPE_OF	src/include/ptk_buf.h	225;"	d
PTK_BUF_TYPE_OF_PTR	src/include/ptk_buf.h	244;"	d
PTK_BUF_TYPE_S16	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_S16,           \/\/ int16_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_S32	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_S32,           \/\/ int32_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_S64	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_S64,           \/\/ int64_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_S8	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_S8,            \/\/ int8_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_SERIALIZABLE	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_SERIALIZABLE,  \/\/ struct ptk_serializable*$/;"	e	enum:__anon6
PTK_BUF_TYPE_U16	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_U16,           \/\/ uint16_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_U32	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_U32,           \/\/ uint32_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_U64	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_U64,           \/\/ uint64_t$/;"	e	enum:__anon6
PTK_BUF_TYPE_U8	src/include/ptk_buf.h	/^    PTK_BUF_TYPE_U8 = 1,        \/\/ uint8_t$/;"	e	enum:__anon6
PTK_CONFIG_BOOL	src/include/ptk_config.h	/^    PTK_CONFIG_BOOL,     \/\/ bool*$/;"	e	enum:__anon1
PTK_CONFIG_END	src/include/ptk_config.h	41;"	d
PTK_CONFIG_HELP	src/include/ptk_config.h	/^    PTK_CONFIG_HELP      \/\/ Special type for help flag$/;"	e	enum:__anon1
PTK_CONFIG_INT	src/include/ptk_config.h	/^    PTK_CONFIG_INT,      \/\/ int*$/;"	e	enum:__anon1
PTK_CONFIG_STRING	src/include/ptk_config.h	/^    PTK_CONFIG_STRING,   \/\/ char*$/;"	e	enum:__anon1
PTK_CONFIG_UINT16	src/include/ptk_config.h	/^    PTK_CONFIG_UINT16,   \/\/ uint16_t*$/;"	e	enum:__anon1
PTK_ERR_ABORT	src/include/ptk_err.h	/^    PTK_ERR_ABORT,              \/\/ The current operation was aborted.$/;"	e	enum:ptk_err
PTK_ERR_ADDRESS_IN_USE	src/include/ptk_err.h	/^    PTK_ERR_ADDRESS_IN_USE,     \/\/ Address already in use$/;"	e	enum:ptk_err
PTK_ERR_AUTHENTICATION_FAILED	src/include/ptk_err.h	/^    PTK_ERR_AUTHENTICATION_FAILED, \/\/ Authentication failed$/;"	e	enum:ptk_err
PTK_ERR_AUTHORIZATION_FAILED	src/include/ptk_err.h	/^    PTK_ERR_AUTHORIZATION_FAILED,  \/\/ Authorization failed$/;"	e	enum:ptk_err
PTK_ERR_BAD_FORMAT	src/include/ptk_err.h	/^    PTK_ERR_BAD_FORMAT,         \/\/ Invalid format in a format string$/;"	e	enum:ptk_err
PTK_ERR_BUFFER_TOO_SMALL	src/include/ptk_err.h	/^    PTK_ERR_BUFFER_TOO_SMALL,   \/\/ Buffer too small for operation$/;"	e	enum:ptk_err
PTK_ERR_CHECKSUM_FAILED	src/include/ptk_err.h	/^    PTK_ERR_CHECKSUM_FAILED,    \/\/ Checksum\/CRC verification failed$/;"	e	enum:ptk_err
PTK_ERR_CLOSED	src/include/ptk_err.h	/^    PTK_ERR_CLOSED,             \/\/ Socket is closed$/;"	e	enum:ptk_err
PTK_ERR_CONFIGURATION_ERROR	src/include/ptk_err.h	/^    PTK_ERR_CONFIGURATION_ERROR,\/\/ Configuration error$/;"	e	enum:ptk_err
PTK_ERR_CONNECTION_REFUSED	src/include/ptk_err.h	/^    PTK_ERR_CONNECTION_REFUSED, \/\/ Connection refused by remote$/;"	e	enum:ptk_err
PTK_ERR_DEVICE_BUSY	src/include/ptk_err.h	/^    PTK_ERR_DEVICE_BUSY,        \/\/ Device is busy$/;"	e	enum:ptk_err
PTK_ERR_DEVICE_FAILURE	src/include/ptk_err.h	/^    PTK_ERR_DEVICE_FAILURE,     \/\/ Device failure$/;"	e	enum:ptk_err
PTK_ERR_HOST_UNREACHABLE	src/include/ptk_err.h	/^    PTK_ERR_HOST_UNREACHABLE,   \/\/ Host unreachable$/;"	e	enum:ptk_err
PTK_ERR_INTERRUPT	src/include/ptk_err.h	/^    PTK_ERR_INTERRUPT,          \/\/ The current operation was interrupted.$/;"	e	enum:ptk_err
PTK_ERR_INVALID_PARAM	src/include/ptk_err.h	/^    PTK_ERR_INVALID_PARAM,      \/\/ Invalid parameter passed$/;"	e	enum:ptk_err
PTK_ERR_NETWORK_ERROR	src/include/ptk_err.h	/^    PTK_ERR_NETWORK_ERROR,      \/\/ Network operation failed$/;"	e	enum:ptk_err
PTK_ERR_NO_RESOURCES	src/include/ptk_err.h	/^    PTK_ERR_NO_RESOURCES,       \/\/ No resources available, memory, file descriptors etc.$/;"	e	enum:ptk_err
PTK_ERR_NULL_PTR	src/include/ptk_err.h	/^    PTK_ERR_NULL_PTR,           \/\/ Null pointer in params or returns$/;"	e	enum:ptk_err
PTK_ERR_OUT_OF_BOUNDS	src/include/ptk_err.h	/^    PTK_ERR_OUT_OF_BOUNDS,      \/\/ Index out of bounds$/;"	e	enum:ptk_err
PTK_ERR_PARSE_ERROR	src/include/ptk_err.h	/^    PTK_ERR_PARSE_ERROR,        \/\/ Failed to parse data$/;"	e	enum:ptk_err
PTK_ERR_PROTOCOL_ERROR	src/include/ptk_err.h	/^    PTK_ERR_PROTOCOL_ERROR,     \/\/ Protocol-specific error$/;"	e	enum:ptk_err
PTK_ERR_RATE_LIMITED	src/include/ptk_err.h	/^    PTK_ERR_RATE_LIMITED,       \/\/ Rate limit exceeded$/;"	e	enum:ptk_err
PTK_ERR_SEQUENCE_ERROR	src/include/ptk_err.h	/^    PTK_ERR_SEQUENCE_ERROR,     \/\/ Sequence\/ordering error$/;"	e	enum:ptk_err
PTK_ERR_SIGNAL	src/include/ptk_err.h	/^    PTK_ERR_SIGNAL,             \/\/ Socket operation was signaled\/interrupted by external thread$/;"	e	enum:ptk_err
PTK_ERR_TIMEOUT	src/include/ptk_err.h	/^    PTK_ERR_TIMEOUT,            \/\/ Operation timed out$/;"	e	enum:ptk_err
PTK_ERR_UNSUPPORTED	src/include/ptk_err.h	/^    PTK_ERR_UNSUPPORTED         \/\/ Operation not supported$/;"	e	enum:ptk_err
PTK_ERR_UNSUPPORTED_VERSION	src/include/ptk_err.h	/^    PTK_ERR_UNSUPPORTED_VERSION, \/\/ Unsupported protocol version$/;"	e	enum:ptk_err
PTK_ERR_VALIDATION	src/include/ptk_err.h	/^    PTK_ERR_VALIDATION,         \/\/ Validation error$/;"	e	enum:ptk_err
PTK_ERR_WOULD_BLOCK	src/include/ptk_err.h	/^    PTK_ERR_WOULD_BLOCK,        \/\/ Operation would block$/;"	e	enum:ptk_err
PTK_EVENT_ERROR	src/lib/linux/ptk_platform.h	18;"	d
PTK_EVENT_READ	src/lib/linux/ptk_platform.h	16;"	d
PTK_EVENT_WRITE	src/lib/linux/ptk_platform.h	17;"	d
PTK_LOG_LEVEL_DEBUG	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_DEBUG,     \/**< Debugging messages. *\/$/;"	e	enum:__anon8
PTK_LOG_LEVEL_END	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_END,       \/**< Sentinel value (not a valid level). *\/$/;"	e	enum:__anon8
PTK_LOG_LEVEL_ERROR	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_ERROR,     \/**< Error conditions. *\/$/;"	e	enum:__anon8
PTK_LOG_LEVEL_INFO	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_INFO,      \/**< Informational messages. *\/$/;"	e	enum:__anon8
PTK_LOG_LEVEL_NONE	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_NONE = 0,  \/**< Logging disabled. *\/$/;"	e	enum:__anon8
PTK_LOG_LEVEL_TRACE	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_TRACE,     \/**< Fine-grained tracing messages. *\/$/;"	e	enum:__anon8
PTK_LOG_LEVEL_WARN	src/include/ptk_log.h	/^    PTK_LOG_LEVEL_WARN,      \/**< Warning conditions. *\/$/;"	e	enum:__anon8
PTK_OK	src/include/ptk_err.h	/^    PTK_OK,                     \/\/ Status\/error was OK$/;"	e	enum:ptk_err
PTK_SHARED_HANDLE_EQUAL	src/include/ptk_shared.h	25;"	d
PTK_SHARED_INVALID_HANDLE	src/include/ptk_shared.h	23;"	d
PTK_SHARED_IS_VALID	src/include/ptk_shared.h	24;"	d
PTK_SOCK_INVALID	src/include/ptk_sock.h	/^    PTK_SOCK_INVALID,     \/\/ Invalid socket type$/;"	e	enum:__anon3
PTK_SOCK_TCP_CLIENT	src/include/ptk_sock.h	/^    PTK_SOCK_TCP_CLIENT,  \/\/ TCP client socket$/;"	e	enum:__anon3
PTK_SOCK_TCP_SERVER	src/include/ptk_sock.h	/^    PTK_SOCK_TCP_SERVER,  \/\/ TCP listening socket$/;"	e	enum:__anon3
PTK_SOCK_UDP	src/include/ptk_sock.h	/^    PTK_SOCK_UDP,         \/\/ UDP socket$/;"	e	enum:__anon3
PTK_TIME_NO_WAIT	src/include/ptk_utils.h	21;"	d
PTK_TIME_WAIT_FOREVER	src/include/ptk_utils.h	15;"	d
TEST_DURATION_SEC	src/tests/test_tcp_echo_abort.c	43;"	d	file:
TEST_DURATION_SEC	src/tests/test_udp_echo_abort.c	35;"	d	file:
TEST_PORT	src/tests/test_tcp_echo_abort.c	41;"	d	file:
TEST_PORT	src/tests/test_udp_echo_abort.c	33;"	d	file:
THREADLET_CREATED	src/lib/linux/threadlet_core.h	/^    THREADLET_CREATED,$/;"	e	enum:__anon29
THREADLET_FINISHED	src/lib/linux/threadlet_core.h	/^    THREADLET_FINISHED$/;"	e	enum:__anon29
THREADLET_READY	src/lib/linux/threadlet_core.h	/^    THREADLET_READY,$/;"	e	enum:__anon29
THREADLET_RUNNING	src/lib/linux/threadlet_core.h	/^    THREADLET_RUNNING,$/;"	e	enum:__anon29
THREADLET_STACK_SIZE	src/lib/linux/ptk_platform.h	14;"	d
THREADLET_WAITING	src/lib/linux/threadlet_core.h	/^    THREADLET_WAITING,$/;"	e	enum:__anon29
TIMER_PERIOD_MS	src/tests/test_tcp_echo_abort.c	42;"	d	file:
TIMER_PERIOD_MS	src/tests/test_udp_echo_abort.c	34;"	d	file:
__anon10::base	src/tests/test_type_safe_serialize.c	/^    ptk_serializable_t base;  \/\/ Must be first member$/;"	m	struct:__anon10	file:
__anon10::checksum	src/tests/test_type_safe_serialize.c	/^    uint16_t checksum;$/;"	m	struct:__anon10	file:
__anon10::command	src/tests/test_type_safe_serialize.c	/^    uint16_t command;$/;"	m	struct:__anon10	file:
__anon10::length	src/tests/test_type_safe_serialize.c	/^    uint32_t length;$/;"	m	struct:__anon10	file:
__anon11::client_id	src/tests/test_tcp_echo_abort.c	/^    int client_id;$/;"	m	struct:__anon11	file:
__anon11::client_socket	src/tests/test_tcp_echo_abort.c	/^    ptk_sock *client_socket;$/;"	m	struct:__anon11	file:
__anon11::message_num	src/tests/test_tcp_echo_abort.c	/^    int message_num;$/;"	m	struct:__anon11	file:
__anon12::command	src/tests/demo_type_safe_serialize.c	/^    uint16_t command;         \/\/ EIP command type$/;"	m	struct:__anon12	file:
__anon12::length	src/tests/demo_type_safe_serialize.c	/^    uint16_t length;          \/\/ Length of data following header$/;"	m	struct:__anon12	file:
__anon12::options	src/tests/demo_type_safe_serialize.c	/^    uint32_t options;         \/\/ Command options$/;"	m	struct:__anon12	file:
__anon12::sender_context	src/tests/demo_type_safe_serialize.c	/^    uint64_t sender_context;  \/\/ Client context data (8 bytes)$/;"	m	struct:__anon12	file:
__anon12::session_handle	src/tests/demo_type_safe_serialize.c	/^    uint32_t session_handle;  \/\/ Session identifier$/;"	m	struct:__anon12	file:
__anon12::status	src/tests/demo_type_safe_serialize.c	/^    uint32_t status;          \/\/ Status\/error code$/;"	m	struct:__anon12	file:
__anon14::command	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint16_t command;         \/\/ EIP command$/;"	m	struct:__anon14	file:
__anon14::length	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint16_t length;          \/\/ Length of data following header$/;"	m	struct:__anon14	file:
__anon14::options	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint32_t options;         \/\/ Options flags$/;"	m	struct:__anon14	file:
__anon14::sender_context	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint64_t sender_context;  \/\/ Context data$/;"	m	struct:__anon14	file:
__anon14::session_handle	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint32_t session_handle;  \/\/ Session identifier$/;"	m	struct:__anon14	file:
__anon14::status	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint32_t status;          \/\/ Status code$/;"	m	struct:__anon14	file:
__anon15::vendor_id	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    uint16_t vendor_id;$/;"	m	struct:__anon15	file:
__anon15::vendor_name	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    const char *vendor_name;$/;"	m	struct:__anon15	file:
__anon16::device_name	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    const char *device_name;$/;"	m	struct:__anon16	file:
__anon16::device_type	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    uint16_t device_type;$/;"	m	struct:__anon16	file:
__anon17::command	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t command;         \/\/ EIP command (ListIdentity=0x0063)$/;"	m	struct:__anon17	file:
__anon17::length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t length;          \/\/ Length of data following this header$/;"	m	struct:__anon17	file:
__anon17::options	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t options;         \/\/ Options flags (typically 0)$/;"	m	struct:__anon17	file:
__anon17::sender_context	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint64_t sender_context;  \/\/ Echo data for request\/response matching$/;"	m	struct:__anon17	file:
__anon17::session_handle	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t session_handle;  \/\/ Session identifier (0 for unregistered)$/;"	m	struct:__anon17	file:
__anon17::status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t status;          \/\/ Status code (0 = success)$/;"	m	struct:__anon17	file:
__anon18::device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t device_type;    \/\/ Device type (little-endian)$/;"	m	struct:__anon18	file:
__anon18::encap_version	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t encap_version;  \/\/ Encapsulation protocol version$/;"	m	struct:__anon18	file:
__anon18::item_length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t item_length;    \/\/ Length of following data$/;"	m	struct:__anon18	file:
__anon18::item_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t item_type;      \/\/ 0x000C for CIP Identity$/;"	m	struct:__anon18	file:
__anon18::product_code	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t product_code;   \/\/ Product code (little-endian)$/;"	m	struct:__anon18	file:
__anon18::revision_major	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t revision_major;  \/\/ Major revision$/;"	m	struct:__anon18	file:
__anon18::revision_minor	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t revision_minor;  \/\/ Minor revision$/;"	m	struct:__anon18	file:
__anon18::serial_number	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t serial_number;  \/\/ Serial number$/;"	m	struct:__anon18	file:
__anon18::sin_addr	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t sin_addr[4];     \/\/ IP address (network byte order)$/;"	m	struct:__anon18	file:
__anon18::sin_family	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int16_t sin_family;      \/\/ Address family (big-endian)$/;"	m	struct:__anon18	file:
__anon18::sin_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t sin_port;       \/\/ Port number (big-endian)$/;"	m	struct:__anon18	file:
__anon18::sin_zero	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t sin_zero[8];     \/\/ Padding$/;"	m	struct:__anon18	file:
__anon18::status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t status;         \/\/ Device status$/;"	m	struct:__anon18	file:
__anon18::vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t vendor_id;      \/\/ Vendor ID (little-endian)$/;"	m	struct:__anon18	file:
__anon19::broadcast_interval_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int broadcast_interval_ms;$/;"	m	struct:__anon19	file:
__anon19::discovery_time_seconds	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int discovery_time_seconds;$/;"	m	struct:__anon19	file:
__anon19::eip_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t eip_port;$/;"	m	struct:__anon19	file:
__anon19::response_timeout_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int response_timeout_ms;$/;"	m	struct:__anon19	file:
__anon19::verbose_output	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    bool verbose_output;$/;"	m	struct:__anon19	file:
__anon20::vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t vendor_id;$/;"	m	struct:__anon20	file:
__anon20::vendor_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    const char *vendor_name;$/;"	m	struct:__anon20	file:
__anon21::device_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    const char *device_name;$/;"	m	struct:__anon21	file:
__anon21::device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t device_type;$/;"	m	struct:__anon21	file:
__anon22::command	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t command;         \/\/ EIP command (ListIdentity=0x0063)$/;"	m	struct:__anon22	file:
__anon22::length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t length;          \/\/ Length of data following this header$/;"	m	struct:__anon22	file:
__anon22::options	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t options;         \/\/ Options flags (typically 0)$/;"	m	struct:__anon22	file:
__anon22::sender_context	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint64_t sender_context;  \/\/ Echo data for request\/response matching$/;"	m	struct:__anon22	file:
__anon22::session_handle	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t session_handle;  \/\/ Session identifier (0 for unregistered)$/;"	m	struct:__anon22	file:
__anon22::status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t status;          \/\/ Status code (0 = success)$/;"	m	struct:__anon22	file:
__anon23::device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t device_type;    \/\/ Device type (little-endian)$/;"	m	struct:__anon23	file:
__anon23::encap_version	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t encap_version;  \/\/ Encapsulation protocol version$/;"	m	struct:__anon23	file:
__anon23::item_length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t item_length;    \/\/ Length of following data$/;"	m	struct:__anon23	file:
__anon23::item_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t item_type;      \/\/ 0x000C for CIP Identity$/;"	m	struct:__anon23	file:
__anon23::product_code	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t product_code;   \/\/ Product code (little-endian)$/;"	m	struct:__anon23	file:
__anon23::revision_major	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t revision_major;  \/\/ Major revision$/;"	m	struct:__anon23	file:
__anon23::revision_minor	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t revision_minor;  \/\/ Minor revision$/;"	m	struct:__anon23	file:
__anon23::serial_number	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t serial_number;  \/\/ Serial number$/;"	m	struct:__anon23	file:
__anon23::sin_addr	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t sin_addr[4];     \/\/ IP address (network byte order)$/;"	m	struct:__anon23	file:
__anon23::sin_family	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int16_t sin_family;      \/\/ Address family (big-endian)$/;"	m	struct:__anon23	file:
__anon23::sin_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t sin_port;       \/\/ Port number (big-endian)$/;"	m	struct:__anon23	file:
__anon23::sin_zero	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t sin_zero[8];     \/\/ Padding$/;"	m	struct:__anon23	file:
__anon23::status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t status;         \/\/ Device status$/;"	m	struct:__anon23	file:
__anon23::vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t vendor_id;      \/\/ Vendor ID (little-endian)$/;"	m	struct:__anon23	file:
__anon24::broadcast_interval_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int broadcast_interval_ms;$/;"	m	struct:__anon24	file:
__anon24::discovery_time_seconds	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int discovery_time_seconds;$/;"	m	struct:__anon24	file:
__anon24::eip_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t eip_port;$/;"	m	struct:__anon24	file:
__anon24::response_timeout_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int response_timeout_ms;$/;"	m	struct:__anon24	file:
__anon24::verbose_output	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    bool verbose_output;$/;"	m	struct:__anon24	file:
__anon25::vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t vendor_id;$/;"	m	struct:__anon25	file:
__anon25::vendor_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    const char *vendor_name;$/;"	m	struct:__anon25	file:
__anon26::device_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    const char *device_name;$/;"	m	struct:__anon26	file:
__anon26::device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t device_type;$/;"	m	struct:__anon26	file:
__anon27::data_ptr	src/lib/ptk_shared.c	/^    void *data_ptr;             \/\/ Points to ptk_alloc'd memory (NULL = free slot)$/;"	m	struct:__anon27	file:
__anon27::file	src/lib/ptk_shared.c	/^    const char *file;           \/\/ Debug info from ptk_shared_wrap macro$/;"	m	struct:__anon27	file:
__anon27::handle_value	src/lib/ptk_shared.c	/^    uint64_t handle_value;      \/\/ Combined generation + index$/;"	m	struct:__anon27	file:
__anon27::line	src/lib/ptk_shared.c	/^    int line;                   \/\/ Debug info from ptk_shared_wrap macro$/;"	m	struct:__anon27	file:
__anon27::mutex	src/lib/ptk_shared.c	/^    ptk_mutex *mutex;           \/\/ Per-entry mutex$/;"	m	struct:__anon27	file:
__anon27::ref_count	src/lib/ptk_shared.c	/^    uint32_t ref_count;         \/\/ Reference counter (protected by mutex)$/;"	m	struct:__anon27	file:
__anon28::capacity	src/lib/ptk_shared.c	/^    size_t capacity;            \/\/ Total table size$/;"	m	struct:__anon28	file:
__anon28::count	src/lib/ptk_shared.c	/^    size_t count;               \/\/ Entries in use$/;"	m	struct:__anon28	file:
__anon28::entries	src/lib/ptk_shared.c	/^    shared_entry_t *entries;    \/\/ Array of entries (NOT pointers)$/;"	m	struct:__anon28	file:
__anon28::next_generation	src/lib/ptk_shared.c	/^    uint32_t next_generation;   \/\/ Global generation counter$/;"	m	struct:__anon28	file:
__anon28::table_mutex	src/lib/ptk_shared.c	/^    ptk_mutex *table_mutex;     \/\/ Global table protection$/;"	m	struct:__anon28	file:
__anon2::default_str	src/include/ptk_config.h	/^    const char *default_str;    \/\/ Default value as string (for display)$/;"	m	struct:__anon2
__anon2::help	src/include/ptk_config.h	/^    const char *help;           \/\/ Help text$/;"	m	struct:__anon2
__anon2::name	src/include/ptk_config.h	/^    const char *name;           \/\/ Long option name (without --)$/;"	m	struct:__anon2
__anon2::short_name	src/include/ptk_config.h	/^    char short_name;            \/\/ Short option character (0 if none)$/;"	m	struct:__anon2
__anon2::target	src/include/ptk_config.h	/^    void *target;               \/\/ Pointer to store the value$/;"	m	struct:__anon2
__anon2::type	src/include/ptk_config.h	/^    ptk_config_type_t type;     \/\/ Type of the field$/;"	m	struct:__anon2
__anon30::deadline	src/lib/linux/threadlet_scheduler.h	/^    ptk_time_ms deadline;$/;"	m	struct:__anon30
__anon30::events	src/lib/linux/threadlet_scheduler.h	/^    uint32_t events;$/;"	m	struct:__anon30
__anon30::fd	src/lib/linux/threadlet_scheduler.h	/^    int fd;$/;"	m	struct:__anon30
__anon30::waiting_threadlet	src/lib/linux/threadlet_scheduler.h	/^    threadlet_t *waiting_threadlet;$/;"	m	struct:__anon30
__anon31::events	src/lib/linux/ptk_platform.h	/^    uint32_t events;$/;"	m	struct:__anon31
__anon31::fd	src/lib/linux/ptk_platform.h	/^    int fd;$/;"	m	struct:__anon31
__anon32::capacity	src/lib/linux/ptk_platform.h	/^    int capacity;$/;"	m	struct:__anon32
__anon32::count	src/lib/linux/ptk_platform.h	/^    int count;$/;"	m	struct:__anon32
__anon32::events	src/lib/linux/ptk_platform.h	/^    platform_event_t *events;$/;"	m	struct:__anon32
__anon4::family	src/include/ptk_sock.h	/^    uint8_t family;    \/\/ Address family (AF_INET for IPv4)$/;"	m	struct:__anon4
__anon4::ip	src/include/ptk_sock.h	/^    uint32_t ip;       \/\/ IPv4 address in network byte order$/;"	m	struct:__anon4
__anon4::port	src/include/ptk_sock.h	/^    uint16_t port;     \/\/ Port number in host byte order$/;"	m	struct:__anon4
__anon4::reserved	src/include/ptk_sock.h	/^    uint8_t reserved;  \/\/ Reserved for alignment\/future use$/;"	m	struct:__anon4
__anon5::broadcast	src/include/ptk_sock.h	/^    char broadcast[16];          \/\/ Broadcast address (e.g., "192.168.1.255")$/;"	m	struct:__anon5
__anon5::interface_name	src/include/ptk_sock.h	/^    char interface_name[32];     \/\/ Interface name (e.g., "eth0", "wlan0")$/;"	m	struct:__anon5
__anon5::ip_address	src/include/ptk_sock.h	/^    char ip_address[16];         \/\/ IP address (e.g., "192.168.1.100")$/;"	m	struct:__anon5
__anon5::is_loopback	src/include/ptk_sock.h	/^    bool is_loopback;            \/\/ True if this is loopback interface$/;"	m	struct:__anon5
__anon5::is_up	src/include/ptk_sock.h	/^    bool is_up;                  \/\/ True if interface is up$/;"	m	struct:__anon5
__anon5::netmask	src/include/ptk_sock.h	/^    char netmask[16];            \/\/ Subnet mask (e.g., "255.255.255.0")$/;"	m	struct:__anon5
__anon5::supports_broadcast	src/include/ptk_sock.h	/^    bool supports_broadcast;     \/\/ True if interface supports broadcast$/;"	m	struct:__anon5
__anon9::command	src/tests/test_type_safe_serialize.c	/^    uint16_t command;         \/\/ EIP command type$/;"	m	struct:__anon9	file:
__anon9::length	src/tests/test_type_safe_serialize.c	/^    uint16_t length;          \/\/ Length of data following header$/;"	m	struct:__anon9	file:
__anon9::options	src/tests/test_type_safe_serialize.c	/^    uint32_t options;         \/\/ Command options$/;"	m	struct:__anon9	file:
__anon9::sender_context	src/tests/test_type_safe_serialize.c	/^    uint64_t sender_context;  \/\/ Client context data (8 bytes)$/;"	m	struct:__anon9	file:
__anon9::session_handle	src/tests/test_type_safe_serialize.c	/^    uint32_t session_handle;  \/\/ Session identifier$/;"	m	struct:__anon9	file:
__anon9::status	src/tests/test_type_safe_serialize.c	/^    uint32_t status;          \/\/ Status\/error code$/;"	m	struct:__anon9	file:
__func__	src/include/ptk_log.h	27;"	d
addr	src/examples/modbus/lib/src/modbus_connection.c	/^    ptk_address_t addr;$/;"	m	struct:modbus_connection_t	file:
addr	src/examples/modbus/lib/src/modbus_pdu.c	/^    ptk_address_t addr;$/;"	m	struct:modbus_connection_t	file:
base	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_pdu_base_t *base;  \/\/ For type checking and generic access$/;"	m	union:eip_pdu_u
base	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_pdu_base_t base;               \/\/ Base PDU structure$/;"	m	struct:eip_list_identity_resp_t
base	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_pdu_base_t base;$/;"	m	struct:eip_list_identity_req_t
base	src/examples/ethernetip/lib/include/ethernetip.h	/^    ptk_serializable_t base;  \/\/ Inherits serialization interface$/;"	m	struct:eip_pdu_base_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t *base;  \/\/ For type checking and generic access$/;"	m	union:modbus_pdu_u
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_exception_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_coils_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_coils_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_discrete_inputs_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_discrete_inputs_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_holding_registers_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_holding_registers_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_input_registers_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_input_registers_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_coils_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_coils_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_registers_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_registers_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_coil_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_coil_resp_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_register_req_t
base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_register_resp_t
base	src/tests/test_type_safe_serialize.c	/^    ptk_serializable_t base;  \/\/ Must be first member$/;"	m	struct:__anon10	file:
bits_to_bytes	src/examples/modbus/lib/src/modbus_bit_array.c	/^static size_t bits_to_bytes(size_t num_bits) {$/;"	f	file:	signature:(size_t num_bits)
broadcast	src/include/ptk_sock.h	/^    char broadcast[16];          \/\/ Broadcast address (e.g., "192.168.1.255")$/;"	m	struct:__anon5
broadcast	src/include/ptk_sock.h	/^    char broadcast[16];          \/\/ Broadcast address (e.g., "192.168.1.255")$/;"	m	struct:ptk_network_interface
broadcast_interval_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int broadcast_interval_ms;$/;"	m	struct:__anon24	file:
broadcast_interval_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int broadcast_interval_ms;$/;"	m	struct:__anon19	file:
broadcast_to_all_networks	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err broadcast_to_all_networks(ptk_sock *socket, ptk_buf *request_buf, ptk_network_info *networks) {$/;"	f	file:	signature:(ptk_sock *socket, ptk_buf *request_buf, ptk_network_info *networks)
broadcast_to_all_networks	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err broadcast_to_all_networks(ptk_sock *socket, ptk_buf *request_buf, ptk_network_info *networks) {$/;"	f	file:	signature:(ptk_sock *socket, ptk_buf *request_buf, ptk_network_info *networks)
buf	src/include/ptk_sock.h	/^    ptk_buf *buf;                \/\/ Buffer containing UDP packet data$/;"	m	struct:ptk_udp_buf_entry_t
buf_base	src/examples/modbus/lib/include/modbus.h	/^    ptk_serializable_t buf_base;  \/\/ Inherits serialization interface$/;"	m	struct:modbus_pdu_base_t
buf_size_t	src/include/ptk_buf.h	/^typedef uint16_t buf_size_t;$/;"	t
build_list_identity_request	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err build_list_identity_request(ptk_buf *buffer) {$/;"	f	file:	signature:(ptk_buf *buffer)
build_list_identity_request	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err build_list_identity_request(ptk_buf *buffer) {$/;"	f	file:	signature:(ptk_buf *buffer)
bytes	src/examples/modbus/lib/src/modbus_bit_array.c	/^    uint8_t *bytes;           \/\/ Packed bit storage$/;"	m	struct:modbus_bit_array	file:
bytes_to_u64	src/lib/ptk_buf.c	/^static inline uint64_t bytes_to_u64(const uint8_t *bytes, size_t size) {$/;"	f	file:	signature:(const uint8_t *bytes, size_t size)
capacity	src/lib/linux/ptk_platform.h	/^    int capacity;$/;"	m	struct:__anon32
capacity	src/lib/ptk_shared.c	/^    size_t capacity;            \/\/ Total table size$/;"	m	struct:__anon28	file:
checksum	src/tests/test_type_safe_serialize.c	/^    uint16_t checksum;$/;"	m	struct:__anon10	file:
cip_class_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_class_segment {$/;"	s
cip_class_segment::class_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t class_id;                  \/\/ CIP class identifier$/;"	m	struct:cip_class_segment
cip_class_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_CLASS$/;"	m	struct:cip_class_segment
cip_class_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_class_segment_t;$/;"	t	typeref:struct:cip_class_segment
cip_connection_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_connection_segment {$/;"	s
cip_connection_segment::connection_point	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t connection_point;          \/\/ Connection point identifier$/;"	m	struct:cip_connection_segment
cip_connection_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_CONNECTION$/;"	m	struct:cip_connection_segment
cip_connection_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_connection_segment_t;$/;"	t	typeref:struct:cip_connection_segment
cip_data_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_data_segment {$/;"	s
cip_data_segment::data	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t *data;                      \/\/ Raw data bytes (child allocation)$/;"	m	struct:cip_data_segment
cip_data_segment::data_length	src/examples/ethernetip/lib/include/ethernetip.h	/^    size_t data_length;                 \/\/ Length of data$/;"	m	struct:cip_data_segment
cip_data_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_DATA$/;"	m	struct:cip_data_segment
cip_data_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_data_segment_t;$/;"	t	typeref:struct:cip_data_segment
cip_device_type_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^} cip_device_type_t;$/;"	t	typeref:struct:__anon26	file:
cip_device_type_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^} cip_device_type_t;$/;"	t	typeref:struct:__anon21	file:
cip_element_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_element_segment {$/;"	s
cip_element_segment::element_index	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t element_index;             \/\/ Array element index$/;"	m	struct:cip_element_segment
cip_element_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_ELEMENT$/;"	m	struct:cip_element_segment
cip_element_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_element_segment_t;$/;"	t	typeref:struct:cip_element_segment
cip_get_device_state_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static const char *cip_get_device_state_name(uint8_t state) {$/;"	f	file:	signature:(uint8_t state)
cip_get_device_state_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static const char *cip_get_device_state_name(uint8_t state) {$/;"	f	file:	signature:(uint8_t state)
cip_get_device_type_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static const char *cip_get_device_type_name(uint16_t device_type) {$/;"	f	file:	signature:(uint16_t device_type)
cip_get_device_type_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static const char *cip_get_device_type_name(uint16_t device_type) {$/;"	f	file:	signature:(uint16_t device_type)
cip_get_vendor_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static const char *cip_get_vendor_name(uint16_t vendor_id) {$/;"	f	file:	signature:(uint16_t vendor_id)
cip_get_vendor_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static const char *cip_get_vendor_name(uint16_t vendor_id) {$/;"	f	file:	signature:(uint16_t vendor_id)
cip_identity_item_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^} cip_identity_item_t;$/;"	t	typeref:struct:__anon23	file:
cip_identity_item_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^} cip_identity_item_t;$/;"	t	typeref:struct:__anon18	file:
cip_instance_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_instance_segment {$/;"	s
cip_instance_segment::instance_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t instance_id;               \/\/ Instance identifier$/;"	m	struct:cip_instance_segment
cip_instance_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_INSTANCE$/;"	m	struct:cip_instance_segment
cip_instance_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_instance_segment_t;$/;"	t	typeref:struct:cip_instance_segment
cip_ioi_path_pdu_create_from_string	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err cip_ioi_path_pdu_create_from_string(cip_segment_array_t *path, const char *path_string);$/;"	p	signature:(cip_segment_array_t *path, const char *path_string)
cip_ioi_path_pdu_create_from_string	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^ptk_err cip_ioi_path_pdu_create_from_string(cip_segment_array_t *path, const char *path_string) {$/;"	f	signature:(cip_segment_array_t *path, const char *path_string)
cip_member_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_member_segment {$/;"	s
cip_member_segment::member_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t member_id;                 \/\/ Member\/attribute identifier$/;"	m	struct:cip_member_segment
cip_member_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_MEMBER$/;"	m	struct:cip_member_segment
cip_member_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_member_segment_t;$/;"	t	typeref:struct:cip_member_segment
cip_port_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_port_segment {$/;"	s
cip_port_segment::port_number	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t port_number;                \/\/ Port number (1-255)$/;"	m	struct:cip_port_segment
cip_port_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_PORT$/;"	m	struct:cip_port_segment
cip_port_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_port_segment_t;$/;"	t	typeref:struct:cip_port_segment
cip_segment_array_serialize	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err cip_segment_array_serialize(ptk_buf *buf, const cip_segment_array_t *segments);$/;"	p	signature:(ptk_buf *buf, const cip_segment_array_t *segments)
cip_segment_array_serialize	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^ptk_err cip_segment_array_serialize(ptk_buf *buf, const cip_segment_array_t *segments) {$/;"	f	signature:(ptk_buf *buf, const cip_segment_array_t *segments)
cip_segment_serialize	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err cip_segment_serialize(ptk_buf *buf, const union cip_segment_u *segment);$/;"	p	signature:(ptk_buf *buf, const union cip_segment_u *segment)
cip_segment_serialize	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^ptk_err cip_segment_serialize(ptk_buf *buf, const cip_segment_u *segment) {$/;"	f	signature:(ptk_buf *buf, const cip_segment_u *segment)
cip_segment_serialize_class	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err cip_segment_serialize_class(ptk_buf *buf, const cip_class_segment_t *seg) {$/;"	f	file:	signature:(ptk_buf *buf, const cip_class_segment_t *seg)
cip_segment_serialize_data	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err cip_segment_serialize_data(ptk_buf *buf, const cip_data_segment_t *seg) {$/;"	f	file:	signature:(ptk_buf *buf, const cip_data_segment_t *seg)
cip_segment_serialize_instance	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err cip_segment_serialize_instance(ptk_buf *buf, const cip_instance_segment_t *seg) {$/;"	f	file:	signature:(ptk_buf *buf, const cip_instance_segment_t *seg)
cip_segment_serialize_member	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err cip_segment_serialize_member(ptk_buf *buf, const cip_member_segment_t *seg) {$/;"	f	file:	signature:(ptk_buf *buf, const cip_member_segment_t *seg)
cip_segment_serialize_port	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err cip_segment_serialize_port(ptk_buf *buf, const cip_port_segment_t *seg) {$/;"	f	file:	signature:(ptk_buf *buf, const cip_port_segment_t *seg)
cip_segment_serialize_symbolic	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err cip_segment_serialize_symbolic(ptk_buf *buf, const cip_symbolic_segment_t *seg) {$/;"	f	file:	signature:(ptk_buf *buf, const cip_symbolic_segment_t *seg)
cip_segment_type_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_segment_type_t;$/;"	t	typeref:enum:__anon13
cip_segment_u	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef union cip_segment_u cip_segment_u;$/;"	t	typeref:union:cip_segment_u
cip_segment_u	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef union cip_segment_u {$/;"	u
cip_segment_u	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_segment_u;$/;"	t	typeref:union:cip_segment_u
cip_segment_u::connection	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_connection_segment_t connection;$/;"	m	union:cip_segment_u
cip_segment_u::data	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_data_segment_t data;$/;"	m	union:cip_segment_u
cip_segment_u::element	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_element_segment_t element;$/;"	m	union:cip_segment_u
cip_segment_u::instance	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_instance_segment_t instance;$/;"	m	union:cip_segment_u
cip_segment_u::member	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_member_segment_t member;$/;"	m	union:cip_segment_u
cip_segment_u::port	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_port_segment_t port;$/;"	m	union:cip_segment_u
cip_segment_u::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ Common type field for all segments$/;"	m	union:cip_segment_u
cip_segment_u::symbolic	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_symbolic_segment_t symbolic;$/;"	m	union:cip_segment_u
cip_symbolic_segment	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct cip_symbolic_segment {$/;"	s
cip_symbolic_segment::segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_SYMBOLIC$/;"	m	struct:cip_symbolic_segment
cip_symbolic_segment::symbol_length	src/examples/ethernetip/lib/include/ethernetip.h	/^    size_t symbol_length;               \/\/ Length of symbol name$/;"	m	struct:cip_symbolic_segment
cip_symbolic_segment::symbol_name	src/examples/ethernetip/lib/include/ethernetip.h	/^    char *symbol_name;                  \/\/ Symbolic name (child allocation)$/;"	m	struct:cip_symbolic_segment
cip_symbolic_segment_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} cip_symbolic_segment_t;$/;"	t	typeref:struct:cip_symbolic_segment
cip_vendor_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^} cip_vendor_t;$/;"	t	typeref:struct:__anon25	file:
cip_vendor_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^} cip_vendor_t;$/;"	t	typeref:struct:__anon20	file:
class_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t class_id;                  \/\/ CIP class identifier$/;"	m	struct:cip_class_segment
client_id	src/tests/test_tcp_echo_abort.c	/^    int client_id;$/;"	m	struct:__anon11	file:
client_socket	src/tests/test_tcp_echo_abort.c	/^    ptk_sock *client_socket;$/;"	m	struct:__anon11	file:
client_thread	src/tests/test_tcp_echo_abort.c	/^static void client_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
client_thread	src/tests/test_udp_echo_abort.c	/^static void client_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
client_timer_interrupt	src/tests/test_tcp_echo_abort.c	/^static void client_timer_interrupt(ptk_sock *sock, ptk_time_ms time_ms, void *user_data) {$/;"	f	file:	signature:(ptk_sock *sock, ptk_time_ms time_ms, void *user_data)
client_timer_interrupt	src/tests/test_udp_echo_abort.c	/^static void client_timer_interrupt(ptk_sock *sock, ptk_time_ms time_ms, void *user_data) {$/;"	f	file:	signature:(ptk_sock *sock, ptk_time_ms time_ms, void *user_data)
coil_status	src/examples/modbus/lib/include/modbus.h	/^    modbus_bit_array_t *coil_status;  \/\/ bit array$/;"	m	struct:modbus_read_coils_resp_t
command	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t command;         \/\/ EIP command (ListIdentity=0x0063)$/;"	m	struct:__anon22	file:
command	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t command;         \/\/ EIP command (ListIdentity=0x0063)$/;"	m	struct:__anon17	file:
command	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint16_t command;         \/\/ EIP command$/;"	m	struct:__anon14	file:
command	src/tests/demo_type_safe_serialize.c	/^    uint16_t command;         \/\/ EIP command type$/;"	m	struct:__anon12	file:
command	src/tests/test_type_safe_serialize.c	/^    uint16_t command;         \/\/ EIP command type$/;"	m	struct:__anon9	file:
command	src/tests/test_type_safe_serialize.c	/^    uint16_t command;$/;"	m	struct:__anon10	file:
cond	src/lib/ptk_os_thread.c	/^    pthread_cond_t cond;$/;"	m	struct:ptk_cond_var	file:
configuration_mode	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool configuration_mode;          \/\/ true if in configuration mode$/;"	m	struct:eip_list_identity_resp_t
configured	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool configured;                    \/\/ Device is configured$/;"	m	struct:eip_list_identity_resp_t
conn	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_connection_t *conn;   \/\/ Owning connection$/;"	m	struct:eip_pdu_base_t
conn	src/examples/modbus/lib/include/modbus.h	/^    modbus_connection_t *conn;      \/\/ Owning connection$/;"	m	struct:modbus_pdu_base_t
connection	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_connection_segment_t connection;$/;"	m	union:cip_segment_u
connection_point	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t connection_point;          \/\/ Connection point identifier$/;"	m	struct:cip_connection_segment
context	src/lib/linux/threadlet_core.h	/^    ucontext_t context;$/;"	m	struct:threadlet_t
convert_endian	src/lib/ptk_buf.c	/^static inline uint64_t convert_endian(uint64_t value, size_t size, ptk_buf_endian_t endian) {$/;"	f	file:	signature:(uint64_t value, size_t size, ptk_buf_endian_t endian)
count	src/lib/linux/ptk_platform.h	/^    int count;$/;"	m	struct:__anon32
count	src/lib/ptk_shared.c	/^    size_t count;               \/\/ Entries in use$/;"	m	struct:__anon28	file:
create_new_handle	src/lib/ptk_shared.c	/^static uint64_t create_new_handle(size_t index) {$/;"	f	file:	signature:(size_t index)
create_read_coils_response	src/examples/modbus/lib/src/modbus_pdu.c	/^static modbus_read_coils_resp_t *create_read_coils_response(modbus_connection_t *conn, size_t num_coils) {$/;"	f	file:	signature:(modbus_connection_t *conn, size_t num_coils)
create_read_discrete_inputs_response	src/examples/modbus/lib/src/modbus_pdu.c	/^static modbus_read_discrete_inputs_resp_t *create_read_discrete_inputs_response(modbus_connection_t *conn, size_t num_inputs) {$/;"	f	file:	signature:(modbus_connection_t *conn, size_t num_inputs)
create_socket	src/lib/linux/socket_integration.c	/^static ptk_sock *create_socket(ptk_sock_type type, int domain, int sock_type, int protocol) {$/;"	f	file:	signature:(ptk_sock_type type, int domain, int sock_type, int protocol)
create_write_multiple_coils_request	src/examples/modbus/lib/src/modbus_pdu.c	/^static modbus_write_multiple_coils_req_t *create_write_multiple_coils_request(modbus_connection_t *conn, size_t num_coils) {$/;"	f	file:	signature:(modbus_connection_t *conn, size_t num_coils)
ctrlc_handler	src/examples/modbus/client/modbus_client_sketch.c	/^void ctrlc_handler(void) {$/;"	f	signature:(void)
current_thread_index	src/lib/linux/threadlet_api.c	/^static size_t current_thread_index = 0;$/;"	v	file:
current_threadlet	src/lib/linux/threadlet_core.c	/^static ptk_thread_local threadlet_t *current_threadlet = NULL;$/;"	v	file:
current_time_ms	src/lib/linux/threadlet_scheduler.h	/^    ptk_time_ms current_time_ms;$/;"	m	struct:event_loop_t
data	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_data_segment_t data;$/;"	m	union:cip_segment_u
data	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t *data;                      \/\/ Raw data bytes (child allocation)$/;"	m	struct:cip_data_segment
data	src/include/ptk_buf.h	/^    u8 *data;           \/\/ Pointer to start of buffer$/;"	m	struct:ptk_buf
data_len	src/include/ptk_buf.h	/^    buf_size_t data_len;  \/\/ Total length of buffer$/;"	m	struct:ptk_buf
data_length	src/examples/ethernetip/lib/include/ethernetip.h	/^    size_t data_length;                 \/\/ Length of data$/;"	m	struct:cip_data_segment
data_ptr	src/lib/ptk_shared.c	/^    void *data_ptr;             \/\/ Points to ptk_alloc'd memory (NULL = free slot)$/;"	m	struct:__anon27	file:
deadline	src/lib/linux/threadlet_core.h	/^    ptk_time_ms deadline;$/;"	m	struct:threadlet_t
deadline	src/lib/linux/threadlet_scheduler.h	/^    ptk_time_ms deadline;$/;"	m	struct:__anon30
debug	src/include/ptk_log.h	95;"	d
debug_buf	src/include/ptk_log.h	140;"	d
default_str	src/include/ptk_config.h	/^    const char *default_str;    \/\/ Default value as string (for display)$/;"	m	struct:__anon2
demonstrate_basic_usage	src/tests/demo_type_safe_serialize.c	/^void demonstrate_basic_usage() {$/;"	f
demonstrate_endian_conversion	src/tests/demo_type_safe_serialize.c	/^void demonstrate_endian_conversion() {$/;"	f
demonstrate_peek_functionality	src/tests/demo_type_safe_serialize.c	/^void demonstrate_peek_functionality() {$/;"	f
demonstrate_safety_features	src/tests/demo_type_safe_serialize.c	/^void demonstrate_safety_features() {$/;"	f
deserialize	src/include/ptk_buf.h	/^    ptk_err (*deserialize)(ptk_buf *buf, struct ptk_serializable *obj);$/;"	m	struct:ptk_serializable
destructor	src/lib/ptk_alloc.c	/^    void (*destructor)(void *ptr);$/;"	m	struct:ptk_alloc_header	file:
destructor_a	src/tests/test_parent_child_alloc.c	/^void destructor_a(void *ptr) {$/;"	f	signature:(void *ptr)
destructor_b	src/tests/test_parent_child_alloc.c	/^void destructor_b(void *ptr) {$/;"	f	signature:(void *ptr)
destructor_c	src/tests/test_parent_child_alloc.c	/^void destructor_c(void *ptr) {$/;"	f	signature:(void *ptr)
destructor_call_count	src/tests/test_parent_child_alloc.c	/^static int destructor_call_count = 0;$/;"	v	file:
destructor_call_log	src/tests/test_parent_child_alloc.c	/^static char destructor_call_log[1024] = {0};$/;"	v	file:
destructor_calls	src/lib/test/test_ptk_alloc.c	/^static int destructor_calls = 0;$/;"	v	file:
destructor_d	src/tests/test_parent_child_alloc.c	/^void destructor_d(void *ptr) {$/;"	f	signature:(void *ptr)
destructor_expected_order	src/tests/test_parent_child_alloc.c	/^static int destructor_expected_order = 0;$/;"	v	file:
device_found_callback	src/examples/ethernetip/eip_discovery_example.c	/^static void device_found_callback(const eip_list_identity_resp_t *resp, void *user_data) {$/;"	f	file:	signature:(const eip_list_identity_resp_t *resp, void *user_data)
device_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    const char *device_name;$/;"	m	struct:__anon26	file:
device_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    const char *device_name;$/;"	m	struct:__anon21	file:
device_name	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    const char *device_name;$/;"	m	struct:__anon16	file:
device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t device_type;    \/\/ Device type (little-endian)$/;"	m	struct:__anon23	file:
device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t device_type;$/;"	m	struct:__anon26	file:
device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t device_type;    \/\/ Device type (little-endian)$/;"	m	struct:__anon18	file:
device_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t device_type;$/;"	m	struct:__anon21	file:
device_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t device_type;               \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
device_type	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    uint16_t device_type;$/;"	m	struct:__anon16	file:
discover_devices	src/examples/ethernetip/eip_discovery_example.c	/^static void discover_devices(int response_time_range_ms) {$/;"	f	file:	signature:(int response_time_range_ms)
discovery_config_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^} discovery_config_t;$/;"	t	typeref:struct:__anon24	file:
discovery_config_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^} discovery_config_t;$/;"	t	typeref:struct:__anon19	file:
discovery_thread	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static void discovery_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
discovery_thread	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static void discovery_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
discovery_time_seconds	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int discovery_time_seconds;$/;"	m	struct:__anon24	file:
discovery_time_seconds	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int discovery_time_seconds;$/;"	m	struct:__anon19	file:
discovery_timestamp_ms	src/examples/ethernetip/lib/include/ethernetip.h	/^    int64_t discovery_timestamp_ms;     \/\/ When this response was received$/;"	m	struct:eip_list_identity_resp_t
display_device_info	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static void display_device_info(const cip_identity_item_t *identity, const char *product_name, const char *sender_ip,$/;"	f	file:	signature:(const cip_identity_item_t *identity, const char *product_name, const char *sender_ip, uint16_t sender_port, uint8_t device_state)
display_device_info	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static void display_device_info(const cip_identity_item_t *identity, const char *product_name, const char *sender_ip,$/;"	f	file:	signature:(const cip_identity_item_t *identity, const char *product_name, const char *sender_ip, uint16_t sender_port, uint8_t device_state)
done	src/examples/modbus/client/modbus_client_sketch.c	/^static bool done = false;$/;"	v	file:
eip_abort	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err eip_abort(eip_connection_t *conn);$/;"	p	signature:(eip_connection_t *conn)
eip_abort	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^ptk_err eip_abort(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_client_connect	src/examples/ethernetip/lib/include/ethernetip.h	/^eip_connection_t *eip_client_connect(const char *host, int port);$/;"	p	signature:(const char *host, int port)
eip_client_connect	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^eip_connection_t *eip_client_connect(const char *host, int port) {$/;"	f	signature:(const char *host, int port)
eip_client_connect_udp	src/examples/ethernetip/lib/include/ethernetip.h	/^eip_connection_t *eip_client_connect_udp(const char *host, int port);$/;"	p	signature:(const char *host, int port)
eip_client_connect_udp	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^eip_connection_t *eip_client_connect_udp(const char *host, int port) {$/;"	f	signature:(const char *host, int port)
eip_connection_destructor	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^static void eip_connection_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
eip_connection_get_buffer	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^ptk_buf *eip_connection_get_buffer(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_connection_get_buffer	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^extern ptk_buf *eip_connection_get_buffer(eip_connection_t *conn);$/;"	p	file:	signature:(eip_connection_t *conn)
eip_connection_get_next_sender_context	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^uint64_t eip_connection_get_next_sender_context(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_connection_get_next_sender_context	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^extern uint64_t eip_connection_get_next_sender_context(eip_connection_t *conn);$/;"	p	file:	signature:(eip_connection_t *conn)
eip_connection_get_session_handle	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^uint32_t eip_connection_get_session_handle(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_connection_get_session_handle	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^extern uint32_t eip_connection_get_session_handle(eip_connection_t *conn);$/;"	p	file:	signature:(eip_connection_t *conn)
eip_connection_get_socket	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^ptk_sock *eip_connection_get_socket(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_connection_get_socket	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^extern ptk_sock *eip_connection_get_socket(eip_connection_t *conn);$/;"	p	file:	signature:(eip_connection_t *conn)
eip_connection_is_session_registered	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^bool eip_connection_is_session_registered(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_connection_is_session_registered	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^extern bool eip_connection_is_session_registered(eip_connection_t *conn);$/;"	p	file:	signature:(eip_connection_t *conn)
eip_connection_is_udp	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^bool eip_connection_is_udp(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_connection_is_udp	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^extern bool eip_connection_is_udp(eip_connection_t *conn);$/;"	p	file:	signature:(eip_connection_t *conn)
eip_connection_t	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct eip_connection_t eip_connection_t;$/;"	t	typeref:struct:eip_connection_t
eip_connection_t	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^struct eip_connection_t {$/;"	s	file:
eip_connection_t::host	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    char host[256];             \/\/ Target host (IP or hostname)$/;"	m	struct:eip_connection_t	file:
eip_connection_t::io_buffer	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    ptk_buf *io_buffer;         \/\/ Child of connection$/;"	m	struct:eip_connection_t	file:
eip_connection_t::is_udp	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    bool is_udp;                \/\/ true for UDP (discovery), false for TCP$/;"	m	struct:eip_connection_t	file:
eip_connection_t::next_sender_context	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    uint64_t next_sender_context; \/\/ For request\/response matching$/;"	m	struct:eip_connection_t	file:
eip_connection_t::port	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    uint16_t port;              \/\/ Target port (typically 44818)$/;"	m	struct:eip_connection_t	file:
eip_connection_t::session_handle	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    uint32_t session_handle;    \/\/ Current session handle (0 if no session)$/;"	m	struct:eip_connection_t	file:
eip_connection_t::session_registered	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    bool session_registered;    \/\/ true if session is active$/;"	m	struct:eip_connection_t	file:
eip_connection_t::socket	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    ptk_sock *socket;           \/\/ Child of connection$/;"	m	struct:eip_connection_t	file:
eip_device_found_callback_t	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef void (*eip_device_found_callback_t)(const eip_list_identity_resp_t *device, void *user_data);$/;"	t
eip_device_state_to_string	src/examples/ethernetip/lib/include/ethernetip.h	/^const char *eip_device_state_to_string(uint8_t state);$/;"	p	signature:(uint8_t state)
eip_device_state_to_string	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^const char *eip_device_state_to_string(uint8_t state) {$/;"	f	signature:(uint8_t state)
eip_device_type_to_string	src/examples/ethernetip/lib/include/ethernetip.h	/^const char *eip_device_type_to_string(uint16_t device_type);$/;"	p	signature:(uint16_t device_type)
eip_device_type_to_string	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^const char *eip_device_type_to_string(uint16_t device_type) {$/;"	f	signature:(uint16_t device_type)
eip_discover_devices_simple	src/examples/ethernetip/lib/include/ethernetip.h	/^int eip_discover_devices_simple(ptk_duration_ms response_time_range_ms, $/;"	p	signature:(ptk_duration_ms response_time_range_ms, eip_device_found_callback_t callback, void *user_data)
eip_discover_devices_simple	src/examples/ethernetip/lib/src/ethernetip_discovery.c	/^int eip_discover_devices_simple(ptk_duration_ms response_time_range_ms, $/;"	f	signature:(ptk_duration_ms response_time_range_ms, eip_device_found_callback_t callback, void *user_data)
eip_encap_header_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^} eip_encap_header_t;$/;"	t	typeref:struct:__anon22	file:
eip_encap_header_t	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^} eip_encap_header_t;$/;"	t	typeref:struct:__anon17	file:
eip_encap_header_t	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^} eip_encap_header_t;$/;"	t	typeref:struct:__anon14	file:
eip_header_t	src/tests/demo_type_safe_serialize.c	/^} eip_header_t;$/;"	t	typeref:struct:__anon12	file:
eip_header_t	src/tests/test_type_safe_serialize.c	/^} eip_header_t;$/;"	t	typeref:struct:__anon9	file:
eip_list_identity_req_serialize	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err eip_list_identity_req_serialize(ptk_buf *buf, struct eip_list_identity_req_t *req);$/;"	p	signature:(ptk_buf *buf, struct eip_list_identity_req_t *req)
eip_list_identity_req_serialize	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^ptk_err eip_list_identity_req_serialize(ptk_buf *buf, eip_list_identity_req_t *req) {$/;"	f	signature:(ptk_buf *buf, eip_list_identity_req_t *req)
eip_list_identity_req_t	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct eip_list_identity_req_t {$/;"	s
eip_list_identity_req_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} eip_list_identity_req_t;$/;"	t	typeref:struct:eip_list_identity_req_t
eip_list_identity_req_t::base	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_pdu_base_t base;$/;"	m	struct:eip_list_identity_req_t
eip_list_identity_req_t::response_time_range_ms	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t response_time_range_ms;$/;"	m	struct:eip_list_identity_req_t
eip_list_identity_resp_deserialize	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err eip_list_identity_resp_deserialize(ptk_buf *buf, struct eip_list_identity_resp_t *resp);$/;"	p	signature:(ptk_buf *buf, struct eip_list_identity_resp_t *resp)
eip_list_identity_resp_deserialize	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^ptk_err eip_list_identity_resp_deserialize(ptk_buf *buf, eip_list_identity_resp_t *resp) {$/;"	f	signature:(ptk_buf *buf, eip_list_identity_resp_t *resp)
eip_list_identity_resp_serialize	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err eip_list_identity_resp_serialize(ptk_buf *buf, struct eip_list_identity_resp_t *resp);$/;"	p	signature:(ptk_buf *buf, struct eip_list_identity_resp_t *resp)
eip_list_identity_resp_serialize	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^ptk_err eip_list_identity_resp_serialize(ptk_buf *buf, eip_list_identity_resp_t *resp) {$/;"	f	signature:(ptk_buf *buf, eip_list_identity_resp_t *resp)
eip_list_identity_resp_serialize	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^ptk_err eip_list_identity_resp_serialize(ptk_buf *buf, eip_list_identity_resp_t *resp) {$/;"	f	signature:(ptk_buf *buf, eip_list_identity_resp_t *resp)
eip_list_identity_resp_t	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct eip_list_identity_resp_t {$/;"	s
eip_list_identity_resp_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} eip_list_identity_resp_t;$/;"	t	typeref:struct:eip_list_identity_resp_t
eip_list_identity_resp_t::base	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_pdu_base_t base;               \/\/ Base PDU structure$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::configuration_mode	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool configuration_mode;          \/\/ true if in configuration mode$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::configured	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool configured;                    \/\/ Device is configured$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::device_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t device_type;               \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::discovery_timestamp_ms	src/examples/ethernetip/lib/include/ethernetip.h	/^    int64_t discovery_timestamp_ms;     \/\/ When this response was received$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::ip_address	src/examples/ethernetip/lib/include/ethernetip.h	/^    char ip_address[16];                \/\/ "192.168.1.100" format$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::major_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool major_fault;                 \/\/ true if in major fault state$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::major_recoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool major_recoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::major_unrecoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool major_unrecoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::minor_recoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool minor_recoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::minor_unrecoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool minor_unrecoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::operational	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool operational;                 \/\/ true if operational$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::owned	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool owned;                         \/\/ Device is owned by another master$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::port	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t port;                      \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::product_code	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t product_code;              \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::product_name	src/examples/ethernetip/lib/include/ethernetip.h	/^    char product_name[64];              \/\/ Null-terminated string$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::revision_major	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t revision_major;$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::revision_minor	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t revision_minor;$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::self_test_in_progress	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool self_test_in_progress;        \/\/ true if self-test is in progress$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::serial_number	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t serial_number;             \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::standby	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool standby;                     \/\/ true if in standby mode$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::vendor_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t vendor_id;                 \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
eip_list_identity_resp_t::waiting_for_reset	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool waiting_for_reset;           \/\/ true if waiting for reset$/;"	m	struct:eip_list_identity_resp_t
eip_pdu_base_deserialize	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^static ptk_err eip_pdu_base_deserialize(ptk_buf *buf, ptk_serializable_t *obj) {$/;"	f	file:	signature:(ptk_buf *buf, ptk_serializable_t *obj)
eip_pdu_base_serialize	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^static ptk_err eip_pdu_base_serialize(ptk_buf *buf, ptk_serializable_t *obj) {$/;"	f	file:	signature:(ptk_buf *buf, ptk_serializable_t *obj)
eip_pdu_base_t	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct eip_pdu_base_t eip_pdu_base_t;$/;"	t	typeref:struct:eip_pdu_base_t
eip_pdu_base_t	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef struct eip_pdu_base_t {$/;"	s
eip_pdu_base_t	src/examples/ethernetip/lib/include/ethernetip.h	/^} eip_pdu_base_t;$/;"	t	typeref:struct:eip_pdu_base_t
eip_pdu_base_t::base	src/examples/ethernetip/lib/include/ethernetip.h	/^    ptk_serializable_t base;  \/\/ Inherits serialization interface$/;"	m	struct:eip_pdu_base_t
eip_pdu_base_t::conn	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_connection_t *conn;   \/\/ Owning connection$/;"	m	struct:eip_pdu_base_t
eip_pdu_base_t::pdu_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    size_t pdu_type;          \/\/ Unique type identifier from #defines$/;"	m	struct:eip_pdu_base_t
eip_pdu_create_from_type	src/examples/ethernetip/lib/include/ethernetip.h	/^eip_pdu_base_t *eip_pdu_create_from_type(eip_connection_t *conn, size_t pdu_type);$/;"	p	signature:(eip_connection_t *conn, size_t pdu_type)
eip_pdu_create_from_type	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^eip_pdu_base_t *eip_pdu_create_from_type(eip_connection_t *conn, size_t pdu_type) {$/;"	f	signature:(eip_connection_t *conn, size_t pdu_type)
eip_pdu_destructor	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^static void eip_pdu_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
eip_pdu_recv	src/examples/ethernetip/lib/include/ethernetip.h	/^eip_pdu_u eip_pdu_recv(eip_connection_t *conn, ptk_duration_ms timeout_ms);$/;"	p	signature:(eip_connection_t *conn, ptk_duration_ms timeout_ms)
eip_pdu_recv	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^eip_pdu_u eip_pdu_recv(eip_connection_t *conn, ptk_duration_ms timeout_ms) {$/;"	f	signature:(eip_connection_t *conn, ptk_duration_ms timeout_ms)
eip_pdu_send	src/examples/ethernetip/lib/include/ethernetip.h	/^eip_pdu_base_t *eip_pdu_send(eip_pdu_base_t **pdu, ptk_duration_ms timeout_ms);$/;"	p	signature:(eip_pdu_base_t **pdu, ptk_duration_ms timeout_ms)
eip_pdu_send	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^eip_pdu_base_t *eip_pdu_send(eip_pdu_base_t **pdu, ptk_duration_ms timeout_ms) {$/;"	f	signature:(eip_pdu_base_t **pdu, ptk_duration_ms timeout_ms)
eip_pdu_u	src/examples/ethernetip/lib/include/ethernetip.h	/^typedef union eip_pdu_u {$/;"	u
eip_pdu_u	src/examples/ethernetip/lib/include/ethernetip.h	/^} eip_pdu_u;$/;"	t	typeref:union:eip_pdu_u
eip_pdu_u::base	src/examples/ethernetip/lib/include/ethernetip.h	/^    eip_pdu_base_t *base;  \/\/ For type checking and generic access$/;"	m	union:eip_pdu_u
eip_pdu_u::list_identity_req	src/examples/ethernetip/lib/include/ethernetip.h	/^    struct eip_list_identity_req_t *list_identity_req;$/;"	m	union:eip_pdu_u	typeref:struct:eip_pdu_u::eip_list_identity_req_t
eip_pdu_u::list_identity_resp	src/examples/ethernetip/lib/include/ethernetip.h	/^    struct eip_list_identity_resp_t *list_identity_resp;$/;"	m	union:eip_pdu_u	typeref:struct:eip_pdu_u::eip_list_identity_resp_t
eip_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t eip_port;$/;"	m	struct:__anon24	file:
eip_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t eip_port;$/;"	m	struct:__anon19	file:
eip_register_session	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^static ptk_err eip_register_session(eip_connection_t *conn) {$/;"	f	file:	signature:(eip_connection_t *conn)
eip_server_listen	src/examples/ethernetip/lib/include/ethernetip.h	/^eip_connection_t *eip_server_listen(const char *host, int port, int backlog);$/;"	p	signature:(const char *host, int port, int backlog)
eip_server_listen	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^eip_connection_t *eip_server_listen(const char *host, int port, int backlog) {$/;"	f	signature:(const char *host, int port, int backlog)
eip_signal	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err eip_signal(eip_connection_t *conn);$/;"	p	signature:(eip_connection_t *conn)
eip_signal	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^ptk_err eip_signal(eip_connection_t *conn) {$/;"	f	signature:(eip_connection_t *conn)
eip_unregister_session	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^static ptk_err eip_unregister_session(eip_connection_t *conn) {$/;"	f	file:	signature:(eip_connection_t *conn)
eip_vendor_id_to_string	src/examples/ethernetip/lib/include/ethernetip.h	/^const char *eip_vendor_id_to_string(uint16_t vendor_id);$/;"	p	signature:(uint16_t vendor_id)
eip_vendor_id_to_string	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^const char *eip_vendor_id_to_string(uint16_t vendor_id) {$/;"	f	signature:(uint16_t vendor_id)
eip_wait_for_signal	src/examples/ethernetip/lib/include/ethernetip.h	/^ptk_err eip_wait_for_signal(eip_connection_t *conn, ptk_duration_ms timeout_ms);$/;"	p	signature:(eip_connection_t *conn, ptk_duration_ms timeout_ms)
eip_wait_for_signal	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^ptk_err eip_wait_for_signal(eip_connection_t *conn, ptk_duration_ms timeout_ms) {$/;"	f	signature:(eip_connection_t *conn, ptk_duration_ms timeout_ms)
element	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_element_segment_t element;$/;"	m	union:cip_segment_u
element_index	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t element_index;             \/\/ Array element index$/;"	m	struct:cip_element_segment
encap_version	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t encap_version;  \/\/ Encapsulation protocol version$/;"	m	struct:__anon23	file:
encap_version	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t encap_version;  \/\/ Encapsulation protocol version$/;"	m	struct:__anon18	file:
end	src/include/ptk_buf.h	/^    buf_size_t end;$/;"	m	struct:ptk_buf
entries	src/lib/ptk_shared.c	/^    shared_entry_t *entries;    \/\/ Array of entries (NOT pointers)$/;"	m	struct:__anon28	file:
entry_func	src/lib/linux/threadlet_core.h	/^    threadlet_run_func_t entry_func;$/;"	m	struct:threadlet_t
epoll_fd	src/lib/linux/linux_event_loop.c	/^    int epoll_fd;$/;"	m	struct:linux_event_loop_t	file:
error	src/include/ptk_log.h	74;"	d
error_buf	src/include/ptk_log.h	119;"	d
event_loop	src/lib/linux/socket_integration.c	/^    event_loop_t *event_loop;$/;"	m	struct:ptk_sock	file:
event_loop_create	src/lib/linux/threadlet_scheduler.c	/^event_loop_t *event_loop_create(void) {$/;"	f	signature:(void)
event_loop_create	src/lib/linux/threadlet_scheduler.h	/^event_loop_t *event_loop_create(void);$/;"	p	signature:(void)
event_loop_destructor	src/lib/linux/threadlet_scheduler.c	/^static void event_loop_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
event_loop_enqueue_ready	src/lib/linux/threadlet_scheduler.c	/^ptk_err event_loop_enqueue_ready(event_loop_t *loop, threadlet_t *threadlet) {$/;"	f	signature:(event_loop_t *loop, threadlet_t *threadlet)
event_loop_enqueue_ready	src/lib/linux/threadlet_scheduler.h	/^ptk_err event_loop_enqueue_ready(event_loop_t *loop, threadlet_t *threadlet);$/;"	p	signature:(event_loop_t *loop, threadlet_t *threadlet)
event_loop_register_io	src/lib/linux/threadlet_scheduler.c	/^ptk_err event_loop_register_io(event_loop_t *loop, int fd, uint32_t events, $/;"	f	signature:(event_loop_t *loop, int fd, uint32_t events, threadlet_t *threadlet, ptk_duration_ms timeout_ms)
event_loop_register_io	src/lib/linux/threadlet_scheduler.h	/^ptk_err event_loop_register_io(event_loop_t *loop, int fd, uint32_t events, $/;"	p	signature:(event_loop_t *loop, int fd, uint32_t events, threadlet_t *threadlet, ptk_duration_ms timeout_ms)
event_loop_run	src/lib/linux/threadlet_scheduler.c	/^ptk_err event_loop_run(event_loop_t *loop) {$/;"	f	signature:(event_loop_t *loop)
event_loop_run	src/lib/linux/threadlet_scheduler.h	/^ptk_err event_loop_run(event_loop_t *loop);$/;"	p	signature:(event_loop_t *loop)
event_loop_stop	src/lib/linux/threadlet_scheduler.c	/^ptk_err event_loop_stop(event_loop_t *loop) {$/;"	f	signature:(event_loop_t *loop)
event_loop_stop	src/lib/linux/threadlet_scheduler.h	/^ptk_err event_loop_stop(event_loop_t *loop);$/;"	p	signature:(event_loop_t *loop)
event_loop_t	src/lib/linux/threadlet_scheduler.h	/^typedef struct event_loop_t {$/;"	s
event_loop_t	src/lib/linux/threadlet_scheduler.h	/^} event_loop_t;$/;"	t	typeref:struct:event_loop_t
event_loop_t::current_time_ms	src/lib/linux/threadlet_scheduler.h	/^    ptk_time_ms current_time_ms;$/;"	m	struct:event_loop_t
event_loop_t::platform	src/lib/linux/threadlet_scheduler.h	/^    platform_event_loop_t *platform;$/;"	m	struct:event_loop_t
event_loop_t::ready_queue	src/lib/linux/threadlet_scheduler.h	/^    threadlet_queue_t *ready_queue;$/;"	m	struct:event_loop_t
event_loop_t::registrations	src/lib/linux/threadlet_scheduler.h	/^    event_registration_t *registrations;$/;"	m	struct:event_loop_t
event_loop_t::registrations_capacity	src/lib/linux/threadlet_scheduler.h	/^    size_t registrations_capacity;$/;"	m	struct:event_loop_t
event_loop_t::registrations_count	src/lib/linux/threadlet_scheduler.h	/^    size_t registrations_count;$/;"	m	struct:event_loop_t
event_loop_t::running	src/lib/linux/threadlet_scheduler.h	/^    bool running;$/;"	m	struct:event_loop_t
event_loop_t::waiting_queue	src/lib/linux/threadlet_scheduler.h	/^    threadlet_queue_t *waiting_queue;$/;"	m	struct:event_loop_t
event_loop_unregister_io	src/lib/linux/threadlet_scheduler.c	/^ptk_err event_loop_unregister_io(event_loop_t *loop, int fd) {$/;"	f	signature:(event_loop_t *loop, int fd)
event_loop_unregister_io	src/lib/linux/threadlet_scheduler.h	/^ptk_err event_loop_unregister_io(event_loop_t *loop, int fd);$/;"	p	signature:(event_loop_t *loop, int fd)
event_registration_t	src/lib/linux/threadlet_scheduler.h	/^} event_registration_t;$/;"	t	typeref:struct:__anon30
events	src/lib/linux/linux_event_loop.c	/^    struct epoll_event *events;$/;"	m	struct:linux_event_loop_t	typeref:struct:linux_event_loop_t::epoll_event	file:
events	src/lib/linux/ptk_platform.h	/^    platform_event_t *events;$/;"	m	struct:__anon32
events	src/lib/linux/ptk_platform.h	/^    uint32_t events;$/;"	m	struct:__anon31
events	src/lib/linux/threadlet_scheduler.h	/^    uint32_t events;$/;"	m	struct:__anon30
example_cip_path_construction	src/examples/ethernetip/ethernetip_usage_example.c	/^void example_cip_path_construction() {$/;"	f
example_device_discovery	src/examples/ethernetip/ethernetip_usage_example.c	/^void example_device_discovery() {$/;"	f
example_targeted_discovery	src/examples/ethernetip/ethernetip_usage_example.c	/^void example_targeted_discovery() {$/;"	f
example_tcp_messaging	src/examples/ethernetip/ethernetip_usage_example.c	/^void example_tcp_messaging() {$/;"	f
exception_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t exception_code;           \/\/ Error code (1-4, etc.)$/;"	m	struct:modbus_exception_resp_t
exception_function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t exception_function_code;  \/\/ Original function code + 0x80$/;"	m	struct:modbus_exception_resp_t
exception_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_exception_resp_t *exception_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_exception_resp_t
execute_ready_threadlets	src/lib/linux/threadlet_scheduler.c	/^static void execute_ready_threadlets(event_loop_t *loop) {$/;"	f	file:	signature:(event_loop_t *loop)
expand_shared_table	src/lib/ptk_shared.c	/^static ptk_err expand_shared_table(void) {$/;"	f	file:	signature:(void)
f32	src/include/ptk_buf.h	/^typedef float f32;$/;"	t
f64	src/include/ptk_buf.h	/^typedef double f64;$/;"	t
family	src/include/ptk_sock.h	/^    uint8_t family;    \/\/ Address family (AF_INET for IPv4)$/;"	m	struct:__anon4
fd	src/lib/linux/ptk_platform.h	/^    int fd;$/;"	m	struct:__anon31
fd	src/lib/linux/socket_integration.c	/^    int fd;$/;"	m	struct:ptk_sock	file:
fd	src/lib/linux/threadlet_scheduler.h	/^    int fd;$/;"	m	struct:__anon30
file	src/lib/ptk_alloc.c	/^    const char *file;$/;"	m	struct:ptk_alloc_header	file:
file	src/lib/ptk_shared.c	/^    const char *file;           \/\/ Debug info from ptk_shared_wrap macro$/;"	m	struct:__anon27	file:
find_free_slot_or_expand	src/lib/ptk_shared.c	/^static shared_entry_t *find_free_slot_or_expand(void) {$/;"	f	file:	signature:(void)
find_registration	src/lib/linux/threadlet_scheduler.c	/^static event_registration_t *find_registration(event_loop_t *loop, int fd) {$/;"	f	file:	signature:(event_loop_t *loop, int fd)
finished	src/lib/linux/threadlet_core.h	/^    bool finished;$/;"	m	struct:threadlet_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_COILS$/;"	m	struct:modbus_read_coils_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_COILS$/;"	m	struct:modbus_read_coils_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_DISCRETE_INPUTS$/;"	m	struct:modbus_read_discrete_inputs_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_DISCRETE_INPUTS$/;"	m	struct:modbus_read_discrete_inputs_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_HOLDING_REGISTERS$/;"	m	struct:modbus_read_holding_registers_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_HOLDING_REGISTERS$/;"	m	struct:modbus_read_holding_registers_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_INPUT_REGISTERS$/;"	m	struct:modbus_read_input_registers_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_INPUT_REGISTERS$/;"	m	struct:modbus_read_input_registers_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_COILS$/;"	m	struct:modbus_write_multiple_coils_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_COILS$/;"	m	struct:modbus_write_multiple_coils_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_REGISTERS$/;"	m	struct:modbus_write_multiple_registers_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_REGISTERS$/;"	m	struct:modbus_write_multiple_registers_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_COIL$/;"	m	struct:modbus_write_single_coil_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_COIL$/;"	m	struct:modbus_write_single_coil_resp_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_REGISTER$/;"	m	struct:modbus_write_single_register_req_t
function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_REGISTER$/;"	m	struct:modbus_write_single_register_resp_t
g_allocator	src/tests/test_tcp_echo_abort.c	/^static ptk_allocator_t *g_allocator = NULL;$/;"	v	file:
g_allocator	src/tests/test_udp_echo_abort.c	/^static ptk_allocator_t *g_allocator = NULL;$/;"	v	file:
g_client_handler_threads	src/tests/test_tcp_echo_abort.c	/^static ptk_thread *g_client_handler_threads[MAX_CLIENTS];$/;"	v	file:
g_client_sockets	src/tests/test_tcp_echo_abort.c	/^static ptk_sock *g_client_sockets[MAX_CLIENTS];$/;"	v	file:
g_client_thread	src/tests/test_tcp_echo_abort.c	/^static ptk_thread *g_client_thread = NULL;$/;"	v	file:
g_client_thread	src/tests/test_udp_echo_abort.c	/^static ptk_thread *g_client_thread = NULL;$/;"	v	file:
g_clients_mutex	src/tests/test_tcp_echo_abort.c	/^static ptk_mutex *g_clients_mutex = NULL;$/;"	v	file:
g_config	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static discovery_config_t g_config = {.discovery_time_seconds = 30,$/;"	v	file:
g_config	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static discovery_config_t g_config = {.discovery_time_seconds = 30,$/;"	v	file:
g_discovery_thread	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_thread *g_discovery_thread = NULL;$/;"	v	file:
g_discovery_thread	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_thread *g_discovery_thread = NULL;$/;"	v	file:
g_interrupt_handler	src/lib/ptk_utils.c	/^static void (*g_interrupt_handler)(void) = NULL;$/;"	v	file:
g_num_clients	src/tests/test_tcp_echo_abort.c	/^static size_t g_num_clients = 0;$/;"	v	file:
g_responses_received	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static int g_responses_received = 0;$/;"	v	file:
g_responses_received	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static int g_responses_received = 0;$/;"	v	file:
g_running	src/examples/ethernetip/eip_discovery_example.c	/^static volatile bool g_running = true;$/;"	v	file:
g_running	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static volatile bool g_running = true;$/;"	v	file:
g_running	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static volatile bool g_running = true;$/;"	v	file:
g_server_socket	src/tests/test_tcp_echo_abort.c	/^static ptk_sock *g_server_socket = NULL;$/;"	v	file:
g_server_socket	src/tests/test_udp_echo_abort.c	/^static ptk_sock *g_server_socket = NULL;$/;"	v	file:
g_server_thread	src/tests/test_tcp_echo_abort.c	/^static ptk_thread *g_server_thread = NULL;$/;"	v	file:
g_server_thread	src/tests/test_udp_echo_abort.c	/^static ptk_thread *g_server_thread = NULL;$/;"	v	file:
g_test_running	src/tests/test_tcp_echo_abort.c	/^static volatile bool g_test_running = true;$/;"	v	file:
g_test_running	src/tests/test_udp_echo_abort.c	/^static volatile bool g_test_running = true;$/;"	v	file:
g_udp_socket	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_sock *g_udp_socket = NULL;$/;"	v	file:
g_udp_socket	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_sock *g_udp_socket = NULL;$/;"	v	file:
get_next_thread_round_robin	src/lib/linux/threadlet_api.c	/^static ptk_thread *get_next_thread_round_robin(void) {$/;"	f	file:	signature:(void)
get_next_transaction_id	src/examples/modbus/lib/src/modbus_pdu.c	/^static uint16_t get_next_transaction_id(modbus_connection_t *conn) {$/;"	f	file:	signature:(modbus_connection_t *conn)
get_thread_local_event_loop	src/lib/linux/threadlet_scheduler.c	/^event_loop_t *get_thread_local_event_loop(void) {$/;"	f	signature:(void)
get_thread_local_event_loop	src/lib/linux/threadlet_scheduler.h	/^event_loop_t *get_thread_local_event_loop(void);$/;"	p	signature:(void)
get_type_size	src/lib/ptk_buf.c	/^static inline size_t get_type_size(ptk_buf_type_t type) {$/;"	f	file:	signature:(ptk_buf_type_t type)
global_debug_level	src/lib/ptk_log.c	/^static ptk_atomic ptk_log_level global_debug_level = PTK_LOG_LEVEL_INFO;$/;"	v	file:
global_thread_mutex	src/lib/linux/threadlet_api.c	/^static ptk_mutex *global_thread_mutex = NULL;$/;"	v	file:
handle_value	src/lib/ptk_shared.c	/^    uint64_t handle_value;      \/\/ Combined generation + index$/;"	m	struct:__anon27	file:
head	src/lib/linux/threadlet_scheduler.h	/^    size_t head;$/;"	m	struct:threadlet_queue_t
help	src/include/ptk_config.h	/^    const char *help;           \/\/ Help text$/;"	m	struct:__anon2
host	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    char host[256];             \/\/ Target host (IP or hostname)$/;"	m	struct:eip_connection_t	file:
i16	src/include/ptk_buf.h	/^typedef int16_t i16;$/;"	t
i32	src/include/ptk_buf.h	/^typedef int32_t i32;$/;"	t
i64	src/include/ptk_buf.h	/^typedef int64_t i64;$/;"	t
i8	src/include/ptk_buf.h	/^typedef int8_t i8;$/;"	t
impl	src/lib/linux/linux_event_loop.h	/^    linux_event_loop_t *impl;$/;"	m	struct:platform_event_loop_t
info	src/include/ptk_log.h	88;"	d
info_buf	src/include/ptk_log.h	133;"	d
init_shared_table	src/lib/ptk_shared.c	/^static ptk_err init_shared_table(void) {$/;"	f	file:	signature:(void)
init_thread_pool	src/lib/linux/threadlet_api.c	/^static void init_thread_pool(void) {$/;"	f	file:	signature:(void)
input_status	src/examples/modbus/lib/include/modbus.h	/^    modbus_bit_array_t *input_status;  \/\/ bit array$/;"	m	struct:modbus_read_discrete_inputs_resp_t
instance	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_instance_segment_t instance;$/;"	m	union:cip_segment_u
instance_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t instance_id;               \/\/ Instance identifier$/;"	m	struct:cip_instance_segment
integration_initialized	src/lib/linux/linux_integration.c	/^static ptk_thread_local bool integration_initialized = false;$/;"	v	file:
interface_name	src/include/ptk_sock.h	/^    char interface_name[32];     \/\/ Interface name (e.g., "eth0", "wlan0") $/;"	m	struct:ptk_network_interface
interface_name	src/include/ptk_sock.h	/^    char interface_name[32];     \/\/ Interface name (e.g., "eth0", "wlan0")$/;"	m	struct:__anon5
internal_signal_handler	src/lib/ptk_utils.c	/^static void internal_signal_handler(int sig) {$/;"	f	file:	signature:(int sig)
io_buffer	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    ptk_buf *io_buffer;         \/\/ Child of connection$/;"	m	struct:eip_connection_t	file:
ip	src/include/ptk_sock.h	/^    uint32_t ip;       \/\/ IPv4 address in network byte order$/;"	m	struct:__anon4
ip_address	src/examples/ethernetip/lib/include/ethernetip.h	/^    char ip_address[16];                \/\/ "192.168.1.100" format$/;"	m	struct:eip_list_identity_resp_t
ip_address	src/include/ptk_sock.h	/^    char ip_address[16];         \/\/ IP address (e.g., "192.168.1.100")$/;"	m	struct:__anon5
ip_address	src/include/ptk_sock.h	/^    char ip_address[16];         \/\/ IP address (e.g., "192.168.1.100")$/;"	m	struct:ptk_network_interface
is_loopback	src/include/ptk_sock.h	/^    bool is_loopback;            \/\/ True if this is loopback interface$/;"	m	struct:__anon5
is_loopback	src/include/ptk_sock.h	/^    bool is_loopback;            \/\/ True if this is loopback interface$/;"	m	struct:ptk_network_interface
is_server	src/examples/modbus/lib/src/modbus_connection.c	/^    bool is_server;$/;"	m	struct:modbus_connection_t	file:
is_server	src/examples/modbus/lib/src/modbus_pdu.c	/^    bool is_server;$/;"	m	struct:modbus_connection_t	file:
is_udp	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    bool is_udp;                \/\/ true for UDP (discovery), false for TCP$/;"	m	struct:eip_connection_t	file:
is_up	src/include/ptk_sock.h	/^    bool is_up;                  \/\/ True if interface is up$/;"	m	struct:__anon5
is_up	src/include/ptk_sock.h	/^    bool is_up;                  \/\/ True if interface is up$/;"	m	struct:ptk_network_interface
item_length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t item_length;    \/\/ Length of following data$/;"	m	struct:__anon23	file:
item_length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t item_length;    \/\/ Length of following data$/;"	m	struct:__anon18	file:
item_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t item_type;      \/\/ 0x000C for CIP Identity$/;"	m	struct:__anon23	file:
item_type	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t item_type;      \/\/ 0x000C for CIP Identity$/;"	m	struct:__anon18	file:
keepalive_handler	src/examples/timer_example.c	/^static bool keepalive_handler(void *user_data) {$/;"	f	file:	signature:(void *user_data)
len	src/examples/modbus/lib/src/modbus_bit_array.c	/^    size_t len;               \/\/ Number of bits (not bytes)$/;"	m	struct:modbus_bit_array	file:
length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t length;          \/\/ Length of data following this header$/;"	m	struct:__anon22	file:
length	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t length;          \/\/ Length of data following this header$/;"	m	struct:__anon17	file:
length	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint16_t length;          \/\/ Length of data following header$/;"	m	struct:__anon14	file:
length	src/tests/demo_type_safe_serialize.c	/^    uint16_t length;          \/\/ Length of data following header$/;"	m	struct:__anon12	file:
length	src/tests/test_type_safe_serialize.c	/^    uint16_t length;          \/\/ Length of data following header$/;"	m	struct:__anon9	file:
length	src/tests/test_type_safe_serialize.c	/^    uint32_t length;$/;"	m	struct:__anon10	file:
line	src/lib/ptk_alloc.c	/^    int line;$/;"	m	struct:ptk_alloc_header	file:
line	src/lib/ptk_shared.c	/^    int line;                   \/\/ Debug info from ptk_shared_wrap macro$/;"	m	struct:__anon27	file:
linux_event_loop_destructor	src/lib/linux/linux_event_loop.c	/^static void linux_event_loop_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
linux_event_loop_t	src/lib/linux/linux_event_loop.c	/^struct linux_event_loop_t {$/;"	s	file:
linux_event_loop_t	src/lib/linux/linux_event_loop.h	/^typedef struct linux_event_loop_t linux_event_loop_t;$/;"	t	typeref:struct:linux_event_loop_t
linux_event_loop_t::epoll_fd	src/lib/linux/linux_event_loop.c	/^    int epoll_fd;$/;"	m	struct:linux_event_loop_t	file:
linux_event_loop_t::events	src/lib/linux/linux_event_loop.c	/^    struct epoll_event *events;$/;"	m	struct:linux_event_loop_t	typeref:struct:linux_event_loop_t::epoll_event	file:
linux_event_loop_t::max_events	src/lib/linux/linux_event_loop.c	/^    int max_events;$/;"	m	struct:linux_event_loop_t	file:
linux_event_loop_t::wake_fd	src/lib/linux/linux_event_loop.c	/^    int wake_fd;$/;"	m	struct:linux_event_loop_t	file:
list_identity_req	src/examples/ethernetip/lib/include/ethernetip.h	/^    struct eip_list_identity_req_t *list_identity_req;$/;"	m	union:eip_pdu_u	typeref:struct:eip_pdu_u::eip_list_identity_req_t
list_identity_resp	src/examples/ethernetip/lib/include/ethernetip.h	/^    struct eip_list_identity_resp_t *list_identity_resp;$/;"	m	union:eip_pdu_u	typeref:struct:eip_pdu_u::eip_list_identity_resp_t
log_level_string	src/lib/ptk_log.c	/^static const char *log_level_string(ptk_log_level level) {$/;"	f	file:	signature:(ptk_log_level level)
lookup_entry_unsafe	src/lib/ptk_shared.c	/^static shared_entry_t *lookup_entry_unsafe(ptk_shared_handle_t handle) {$/;"	f	file:	signature:(ptk_shared_handle_t handle)
main	src/examples/ethernetip/eip_discovery_example.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	src/examples/ethernetip/ethernetip_usage_example.c	/^int main() {$/;"	f
main	src/examples/modbus/client/modbus_client_sketch.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	src/examples/timer_example.c	/^int main(void) {$/;"	f	signature:(void)
main	src/lib/test/test_ptk_alloc.c	/^int main() {$/;"	f
main	src/lib/test/test_ptk_buf.c	/^int main() {$/;"	f
main	src/tests/demo_type_safe_serialize.c	/^int main() {$/;"	f
main	src/tests/test_parent_child_alloc.c	/^int main() {$/;"	f
main	src/tests/test_ptk_buf.c	/^int main() {$/;"	f
main	src/tests/test_tcp_echo_abort.c	/^int main() {$/;"	f
main	src/tests/test_type_safe_serialize.c	/^int main() {$/;"	f
main	src/tests/test_udp_echo_abort.c	/^int main() {$/;"	f
major_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool major_fault;                 \/\/ true if in major fault state$/;"	m	struct:eip_list_identity_resp_t
major_recoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool major_recoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
major_unrecoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool major_unrecoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
max_events	src/lib/linux/linux_event_loop.c	/^    int max_events;$/;"	m	struct:linux_event_loop_t	file:
max_events	src/lib/linux/linux_event_loop.h	/^    int max_events;$/;"	m	struct:platform_event_loop_t
member	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_member_segment_t member;$/;"	m	union:cip_segment_u
member_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t member_id;                 \/\/ Member\/attribute identifier$/;"	m	struct:cip_member_segment
message_num	src/tests/test_tcp_echo_abort.c	/^    int message_num;$/;"	m	struct:__anon11	file:
minor_recoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool minor_recoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
minor_unrecoverable_fault	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool minor_unrecoverable_fault;$/;"	m	struct:eip_list_identity_resp_t
modbus_abort	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_abort(modbus_connection_t *conn);$/;"	p	signature:(modbus_connection_t *conn)
modbus_abort	src/examples/modbus/lib/src/modbus_connection.c	/^ptk_err modbus_abort(modbus_connection_t *conn) {$/;"	f	signature:(modbus_connection_t *conn)
modbus_bit_array	src/examples/modbus/lib/src/modbus_bit_array.c	/^struct modbus_bit_array {$/;"	s	file:
modbus_bit_array::bytes	src/examples/modbus/lib/src/modbus_bit_array.c	/^    uint8_t *bytes;           \/\/ Packed bit storage$/;"	m	struct:modbus_bit_array	file:
modbus_bit_array::len	src/examples/modbus/lib/src/modbus_bit_array.c	/^    size_t len;               \/\/ Number of bits (not bytes)$/;"	m	struct:modbus_bit_array	file:
modbus_bit_array_copy	src/examples/modbus/lib/include/modbus.h	/^modbus_bit_array_t *modbus_bit_array_copy(const modbus_bit_array_t *src);$/;"	p	signature:(const modbus_bit_array_t *src)
modbus_bit_array_copy	src/examples/modbus/lib/src/modbus_bit_array.c	/^modbus_bit_array_t *modbus_bit_array_copy(const modbus_bit_array_t *src) {$/;"	f	signature:(const modbus_bit_array_t *src)
modbus_bit_array_create	src/examples/modbus/lib/include/modbus.h	/^modbus_bit_array_t *modbus_bit_array_create(size_t num_bits);$/;"	p	signature:(size_t num_bits)
modbus_bit_array_create	src/examples/modbus/lib/src/modbus_bit_array.c	/^modbus_bit_array_t *modbus_bit_array_create(size_t num_bits) {$/;"	f	signature:(size_t num_bits)
modbus_bit_array_destructor	src/examples/modbus/lib/src/modbus_bit_array.c	/^static void modbus_bit_array_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
modbus_bit_array_from_bytes	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_bit_array_from_bytes(const uint8_t *bytes, size_t num_bits, modbus_bit_array_t **arr);$/;"	p	signature:(const uint8_t *bytes, size_t num_bits, modbus_bit_array_t **arr)
modbus_bit_array_from_bytes	src/examples/modbus/lib/src/modbus_bit_array.c	/^ptk_err modbus_bit_array_from_bytes(const uint8_t *bytes, size_t num_bits, modbus_bit_array_t **arr) {$/;"	f	signature:(const uint8_t *bytes, size_t num_bits, modbus_bit_array_t **arr)
modbus_bit_array_get	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_bit_array_get(const modbus_bit_array_t *arr, size_t index, bool *value);$/;"	p	signature:(const modbus_bit_array_t *arr, size_t index, bool *value)
modbus_bit_array_get	src/examples/modbus/lib/src/modbus_bit_array.c	/^ptk_err modbus_bit_array_get(const modbus_bit_array_t *arr, size_t index, bool *value) {$/;"	f	signature:(const modbus_bit_array_t *arr, size_t index, bool *value)
modbus_bit_array_is_valid	src/examples/modbus/lib/include/modbus.h	/^bool modbus_bit_array_is_valid(const modbus_bit_array_t *arr);$/;"	p	signature:(const modbus_bit_array_t *arr)
modbus_bit_array_is_valid	src/examples/modbus/lib/src/modbus_bit_array.c	/^bool modbus_bit_array_is_valid(const modbus_bit_array_t *arr) {$/;"	f	signature:(const modbus_bit_array_t *arr)
modbus_bit_array_len	src/examples/modbus/lib/include/modbus.h	/^size_t modbus_bit_array_len(const modbus_bit_array_t *arr);$/;"	p	signature:(const modbus_bit_array_t *arr)
modbus_bit_array_len	src/examples/modbus/lib/src/modbus_bit_array.c	/^size_t modbus_bit_array_len(const modbus_bit_array_t *arr) {$/;"	f	signature:(const modbus_bit_array_t *arr)
modbus_bit_array_resize	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_bit_array_resize(modbus_bit_array_t *arr, size_t new_len);$/;"	p	signature:(modbus_bit_array_t *arr, size_t new_len)
modbus_bit_array_resize	src/examples/modbus/lib/src/modbus_bit_array.c	/^ptk_err modbus_bit_array_resize(modbus_bit_array_t *arr, size_t new_len) {$/;"	f	signature:(modbus_bit_array_t *arr, size_t new_len)
modbus_bit_array_set	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_bit_array_set(modbus_bit_array_t *arr, size_t index, bool value);$/;"	p	signature:(modbus_bit_array_t *arr, size_t index, bool value)
modbus_bit_array_set	src/examples/modbus/lib/src/modbus_bit_array.c	/^ptk_err modbus_bit_array_set(modbus_bit_array_t *arr, size_t index, bool value) {$/;"	f	signature:(modbus_bit_array_t *arr, size_t index, bool value)
modbus_bit_array_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_bit_array modbus_bit_array_t;$/;"	t	typeref:struct:modbus_bit_array
modbus_bit_array_to_bytes	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_bit_array_to_bytes(const modbus_bit_array_t *arr, uint8_t **bytes, size_t *byte_count);$/;"	p	signature:(const modbus_bit_array_t *arr, uint8_t **bytes, size_t *byte_count)
modbus_bit_array_to_bytes	src/examples/modbus/lib/src/modbus_bit_array.c	/^ptk_err modbus_bit_array_to_bytes(const modbus_bit_array_t *arr, uint8_t **bytes, size_t *byte_count) {$/;"	f	signature:(const modbus_bit_array_t *arr, uint8_t **bytes, size_t *byte_count)
modbus_client_connect	src/examples/modbus/lib/include/modbus.h	/^modbus_connection_t *modbus_client_connect(const char *host, int port);$/;"	p	signature:(const char *host, int port)
modbus_client_connect	src/examples/modbus/lib/src/modbus_connection.c	/^modbus_connection_t *modbus_client_connect(const char *host, int port) {$/;"	f	signature:(const char *host, int port)
modbus_connection_destructor	src/examples/modbus/lib/src/modbus_connection.c	/^static void modbus_connection_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
modbus_connection_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_connection_t modbus_connection_t;$/;"	t	typeref:struct:modbus_connection_t
modbus_connection_t	src/examples/modbus/lib/src/modbus_connection.c	/^struct modbus_connection_t {$/;"	s	file:
modbus_connection_t	src/examples/modbus/lib/src/modbus_pdu.c	/^extern struct modbus_connection_t {$/;"	s	file:
modbus_connection_t::addr	src/examples/modbus/lib/src/modbus_connection.c	/^    ptk_address_t addr;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::addr	src/examples/modbus/lib/src/modbus_pdu.c	/^    ptk_address_t addr;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::is_server	src/examples/modbus/lib/src/modbus_connection.c	/^    bool is_server;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::is_server	src/examples/modbus/lib/src/modbus_pdu.c	/^    bool is_server;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::socket	src/examples/modbus/lib/src/modbus_connection.c	/^    ptk_sock *socket;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::socket	src/examples/modbus/lib/src/modbus_pdu.c	/^    ptk_sock *socket;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::transaction_id	src/examples/modbus/lib/src/modbus_connection.c	/^    uint16_t transaction_id;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::transaction_id	src/examples/modbus/lib/src/modbus_pdu.c	/^    uint16_t transaction_id;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::unit_id	src/examples/modbus/lib/src/modbus_connection.c	/^    uint8_t unit_id;$/;"	m	struct:modbus_connection_t	file:
modbus_connection_t::unit_id	src/examples/modbus/lib/src/modbus_pdu.c	/^    uint8_t unit_id;$/;"	m	struct:modbus_connection_t	file:
modbus_exception_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_exception_resp_t {$/;"	s
modbus_exception_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_exception_resp_t;$/;"	t	typeref:struct:modbus_exception_resp_t
modbus_exception_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_exception_resp_t
modbus_exception_resp_t::exception_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t exception_code;           \/\/ Error code (1-4, etc.)$/;"	m	struct:modbus_exception_resp_t
modbus_exception_resp_t::exception_function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t exception_function_code;  \/\/ Original function code + 0x80$/;"	m	struct:modbus_exception_resp_t
modbus_pdu_base_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_pdu_base_t {$/;"	s
modbus_pdu_base_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_pdu_base_t;$/;"	t	typeref:struct:modbus_pdu_base_t
modbus_pdu_base_t::buf_base	src/examples/modbus/lib/include/modbus.h	/^    ptk_serializable_t buf_base;  \/\/ Inherits serialization interface$/;"	m	struct:modbus_pdu_base_t
modbus_pdu_base_t::conn	src/examples/modbus/lib/include/modbus.h	/^    modbus_connection_t *conn;      \/\/ Owning connection$/;"	m	struct:modbus_pdu_base_t
modbus_pdu_base_t::pdu_type	src/examples/modbus/lib/include/modbus.h	/^    size_t pdu_type;              \/\/ Unique type identifier from #defines$/;"	m	struct:modbus_pdu_base_t
modbus_pdu_create_from_type	src/examples/modbus/lib/include/modbus.h	/^modbus_pdu_base_t *modbus_pdu_create_from_type(modbus_connection_t *conn, size_t pdu_type);$/;"	p	signature:(modbus_connection_t *conn, size_t pdu_type)
modbus_pdu_create_from_type	src/examples/modbus/lib/src/modbus_pdu.c	/^modbus_pdu_base_t *modbus_pdu_create_from_type(modbus_connection_t *conn, size_t pdu_type) {$/;"	f	signature:(modbus_connection_t *conn, size_t pdu_type)
modbus_pdu_deserialize	src/examples/modbus/lib/src/modbus_pdu.c	/^static modbus_pdu_base_t *modbus_pdu_deserialize(ptk_buf *buf, modbus_connection_t *conn) {$/;"	f	file:	signature:(ptk_buf *buf, modbus_connection_t *conn)
modbus_pdu_destructor	src/examples/modbus/lib/src/modbus_pdu.c	/^static void modbus_pdu_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
modbus_pdu_recv	src/examples/modbus/lib/include/modbus.h	/^modbus_pdu_u modbus_pdu_recv(modbus_connection_t *conn, ptk_duration_ms timeout_ms);$/;"	p	signature:(modbus_connection_t *conn, ptk_duration_ms timeout_ms)
modbus_pdu_recv	src/examples/modbus/lib/src/modbus_pdu.c	/^modbus_pdu_u modbus_pdu_recv(modbus_connection_t *conn, ptk_duration_ms timeout_ms) {$/;"	f	signature:(modbus_connection_t *conn, ptk_duration_ms timeout_ms)
modbus_pdu_send	src/examples/modbus/lib/include/modbus.h	/^modbus_pdu_send(modbus_pdu_base_t **pdu, ptk_duration_ms timeout_ms);$/;"	p	signature:(modbus_pdu_base_t **pdu, ptk_duration_ms timeout_ms)
modbus_pdu_send	src/examples/modbus/lib/src/modbus_pdu.c	/^modbus_pdu_base_t *modbus_pdu_send(modbus_pdu_base_t **pdu, ptk_duration_ms timeout_ms) {$/;"	f	signature:(modbus_pdu_base_t **pdu, ptk_duration_ms timeout_ms)
modbus_pdu_serialize	src/examples/modbus/lib/src/modbus_pdu.c	/^static ptk_err modbus_pdu_serialize(modbus_pdu_base_t *pdu, ptk_buf *buf) {$/;"	f	file:	signature:(modbus_pdu_base_t *pdu, ptk_buf *buf)
modbus_pdu_u	src/examples/modbus/lib/include/modbus.h	/^typedef union modbus_pdu_u {$/;"	u
modbus_pdu_u	src/examples/modbus/lib/include/modbus.h	/^} modbus_pdu_u;$/;"	t	typeref:union:modbus_pdu_u
modbus_pdu_u::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t *base;  \/\/ For type checking and generic access$/;"	m	union:modbus_pdu_u
modbus_pdu_u::exception_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_exception_resp_t *exception_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_exception_resp_t
modbus_pdu_u::read_coils_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_coils_req_t *read_coils_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_coils_req_t
modbus_pdu_u::read_coils_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_coils_resp_t *read_coils_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_coils_resp_t
modbus_pdu_u::read_discrete_inputs_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_discrete_inputs_req_t *read_discrete_inputs_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_discrete_inputs_req_t
modbus_pdu_u::read_discrete_inputs_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_discrete_inputs_resp_t *read_discrete_inputs_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_discrete_inputs_resp_t
modbus_pdu_u::read_holding_registers_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_holding_registers_req_t *read_holding_registers_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_holding_registers_req_t
modbus_pdu_u::read_holding_registers_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_holding_registers_resp_t *read_holding_registers_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_holding_registers_resp_t
modbus_pdu_u::read_input_registers_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_input_registers_req_t *read_input_registers_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_input_registers_req_t
modbus_pdu_u::read_input_registers_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_input_registers_resp_t *read_input_registers_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_input_registers_resp_t
modbus_pdu_u::write_multiple_coils_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_coils_req_t *write_multiple_coils_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_coils_req_t
modbus_pdu_u::write_multiple_coils_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_coils_resp_t *write_multiple_coils_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_coils_resp_t
modbus_pdu_u::write_multiple_registers_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_registers_req_t *write_multiple_registers_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_registers_req_t
modbus_pdu_u::write_multiple_registers_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_registers_resp_t *write_multiple_registers_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_registers_resp_t
modbus_pdu_u::write_single_coil_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_coil_req_t *write_single_coil_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_coil_req_t
modbus_pdu_u::write_single_coil_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_coil_resp_t *write_single_coil_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_coil_resp_t
modbus_pdu_u::write_single_register_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_register_req_t *write_single_register_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_register_req_t
modbus_pdu_u::write_single_register_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_register_resp_t *write_single_register_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_register_resp_t
modbus_read_coils_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_coils_req_t {$/;"	s
modbus_read_coils_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_coils_req_t;$/;"	t	typeref:struct:modbus_read_coils_req_t
modbus_read_coils_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_coils_req_t
modbus_read_coils_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_COILS$/;"	m	struct:modbus_read_coils_req_t
modbus_read_coils_req_t::quantity_of_coils	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_coils;$/;"	m	struct:modbus_read_coils_req_t
modbus_read_coils_req_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_coils_req_t
modbus_read_coils_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_coils_resp_t {$/;"	s
modbus_read_coils_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_coils_resp_t;$/;"	t	typeref:struct:modbus_read_coils_resp_t
modbus_read_coils_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_coils_resp_t
modbus_read_coils_resp_t::coil_status	src/examples/modbus/lib/include/modbus.h	/^    modbus_bit_array_t *coil_status;  \/\/ bit array$/;"	m	struct:modbus_read_coils_resp_t
modbus_read_coils_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_COILS$/;"	m	struct:modbus_read_coils_resp_t
modbus_read_discrete_inputs_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_discrete_inputs_req_t {$/;"	s
modbus_read_discrete_inputs_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_discrete_inputs_req_t;$/;"	t	typeref:struct:modbus_read_discrete_inputs_req_t
modbus_read_discrete_inputs_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_discrete_inputs_req_t
modbus_read_discrete_inputs_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_DISCRETE_INPUTS$/;"	m	struct:modbus_read_discrete_inputs_req_t
modbus_read_discrete_inputs_req_t::quantity_of_inputs	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_inputs;$/;"	m	struct:modbus_read_discrete_inputs_req_t
modbus_read_discrete_inputs_req_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_discrete_inputs_req_t
modbus_read_discrete_inputs_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_discrete_inputs_resp_t {$/;"	s
modbus_read_discrete_inputs_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_discrete_inputs_resp_t;$/;"	t	typeref:struct:modbus_read_discrete_inputs_resp_t
modbus_read_discrete_inputs_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_discrete_inputs_resp_t
modbus_read_discrete_inputs_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_DISCRETE_INPUTS$/;"	m	struct:modbus_read_discrete_inputs_resp_t
modbus_read_discrete_inputs_resp_t::input_status	src/examples/modbus/lib/include/modbus.h	/^    modbus_bit_array_t *input_status;  \/\/ bit array$/;"	m	struct:modbus_read_discrete_inputs_resp_t
modbus_read_holding_registers_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_holding_registers_req_t {$/;"	s
modbus_read_holding_registers_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_holding_registers_req_t;$/;"	t	typeref:struct:modbus_read_holding_registers_req_t
modbus_read_holding_registers_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_holding_registers_req_t
modbus_read_holding_registers_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_HOLDING_REGISTERS$/;"	m	struct:modbus_read_holding_registers_req_t
modbus_read_holding_registers_req_t::quantity_of_registers	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_registers;$/;"	m	struct:modbus_read_holding_registers_req_t
modbus_read_holding_registers_req_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_holding_registers_req_t
modbus_read_holding_registers_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_holding_registers_resp_t {$/;"	s
modbus_read_holding_registers_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_holding_registers_resp_t;$/;"	t	typeref:struct:modbus_read_holding_registers_resp_t
modbus_read_holding_registers_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_holding_registers_resp_t
modbus_read_holding_registers_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_HOLDING_REGISTERS$/;"	m	struct:modbus_read_holding_registers_resp_t
modbus_read_holding_registers_resp_t::register_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_register_array_t *register_values;  \/\/ Variable length$/;"	m	struct:modbus_read_holding_registers_resp_t
modbus_read_input_registers_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_input_registers_req_t {$/;"	s
modbus_read_input_registers_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_input_registers_req_t;$/;"	t	typeref:struct:modbus_read_input_registers_req_t
modbus_read_input_registers_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_input_registers_req_t
modbus_read_input_registers_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_INPUT_REGISTERS$/;"	m	struct:modbus_read_input_registers_req_t
modbus_read_input_registers_req_t::quantity_of_registers	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_registers;$/;"	m	struct:modbus_read_input_registers_req_t
modbus_read_input_registers_req_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_input_registers_req_t
modbus_read_input_registers_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_read_input_registers_resp_t {$/;"	s
modbus_read_input_registers_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_read_input_registers_resp_t;$/;"	t	typeref:struct:modbus_read_input_registers_resp_t
modbus_read_input_registers_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_read_input_registers_resp_t
modbus_read_input_registers_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_READ_INPUT_REGISTERS$/;"	m	struct:modbus_read_input_registers_resp_t
modbus_read_input_registers_resp_t::register_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_register_array_t *register_values;  \/\/ Variable length$/;"	m	struct:modbus_read_input_registers_resp_t
modbus_server_listen	src/examples/modbus/lib/include/modbus.h	/^modbus_connection_t *modbus_server_listen(const char *host, int port, uint8_t unit_id, int backlog);$/;"	p	signature:(const char *host, int port, uint8_t unit_id, int backlog)
modbus_server_listen	src/examples/modbus/lib/src/modbus_connection.c	/^modbus_connection_t *modbus_server_listen(const char *host, int port, uint8_t unit_id, int backlog) {$/;"	f	signature:(const char *host, int port, uint8_t unit_id, int backlog)
modbus_signal	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_signal(modbus_connection_t *conn);$/;"	p	signature:(modbus_connection_t *conn)
modbus_signal	src/examples/modbus/lib/src/modbus_connection.c	/^ptk_err modbus_signal(modbus_connection_t *conn) {$/;"	f	signature:(modbus_connection_t *conn)
modbus_wait_for_signal	src/examples/modbus/lib/include/modbus.h	/^ptk_err modbus_wait_for_signal(modbus_connection_t *conn, ptk_duration_ms timeout_ms);$/;"	p	signature:(modbus_connection_t *conn, ptk_duration_ms timeout_ms)
modbus_wait_for_signal	src/examples/modbus/lib/src/modbus_connection.c	/^ptk_err modbus_wait_for_signal(modbus_connection_t *conn, ptk_duration_ms timeout_ms) {$/;"	f	signature:(modbus_connection_t *conn, ptk_duration_ms timeout_ms)
modbus_write_multiple_coils_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_multiple_coils_req_t {$/;"	s
modbus_write_multiple_coils_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_multiple_coils_req_t;$/;"	t	typeref:struct:modbus_write_multiple_coils_req_t
modbus_write_multiple_coils_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_coils_req_t
modbus_write_multiple_coils_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_COILS$/;"	m	struct:modbus_write_multiple_coils_req_t
modbus_write_multiple_coils_req_t::output_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_bit_array_t *output_values;  \/\/ bit array$/;"	m	struct:modbus_write_multiple_coils_req_t
modbus_write_multiple_coils_req_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_write_multiple_coils_req_t
modbus_write_multiple_coils_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_multiple_coils_resp_t {$/;"	s
modbus_write_multiple_coils_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_multiple_coils_resp_t;$/;"	t	typeref:struct:modbus_write_multiple_coils_resp_t
modbus_write_multiple_coils_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_coils_resp_t
modbus_write_multiple_coils_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_COILS$/;"	m	struct:modbus_write_multiple_coils_resp_t
modbus_write_multiple_coils_resp_t::quantity_of_outputs	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_outputs; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_coils_resp_t
modbus_write_multiple_coils_resp_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_coils_resp_t
modbus_write_multiple_registers_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_multiple_registers_req_t {$/;"	s
modbus_write_multiple_registers_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_multiple_registers_req_t;$/;"	t	typeref:struct:modbus_write_multiple_registers_req_t
modbus_write_multiple_registers_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_registers_req_t
modbus_write_multiple_registers_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_REGISTERS$/;"	m	struct:modbus_write_multiple_registers_req_t
modbus_write_multiple_registers_req_t::register_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_register_array_t *register_values;  \/\/ Variable length$/;"	m	struct:modbus_write_multiple_registers_req_t
modbus_write_multiple_registers_req_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_write_multiple_registers_req_t
modbus_write_multiple_registers_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_multiple_registers_resp_t {$/;"	s
modbus_write_multiple_registers_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_multiple_registers_resp_t;$/;"	t	typeref:struct:modbus_write_multiple_registers_resp_t
modbus_write_multiple_registers_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_multiple_registers_resp_t
modbus_write_multiple_registers_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_MULTIPLE_REGISTERS$/;"	m	struct:modbus_write_multiple_registers_resp_t
modbus_write_multiple_registers_resp_t::quantity_of_registers	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_registers; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_registers_resp_t
modbus_write_multiple_registers_resp_t::starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_registers_resp_t
modbus_write_single_coil_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_single_coil_req_t {$/;"	s
modbus_write_single_coil_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_single_coil_req_t;$/;"	t	typeref:struct:modbus_write_single_coil_req_t
modbus_write_single_coil_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_coil_req_t
modbus_write_single_coil_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_COIL$/;"	m	struct:modbus_write_single_coil_req_t
modbus_write_single_coil_req_t::output_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_address;$/;"	m	struct:modbus_write_single_coil_req_t
modbus_write_single_coil_req_t::output_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_value;     \/\/ 0x0000 = OFF, 0xFF00 = ON$/;"	m	struct:modbus_write_single_coil_req_t
modbus_write_single_coil_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_single_coil_resp_t {$/;"	s
modbus_write_single_coil_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_single_coil_resp_t;$/;"	t	typeref:struct:modbus_write_single_coil_resp_t
modbus_write_single_coil_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_coil_resp_t
modbus_write_single_coil_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_COIL$/;"	m	struct:modbus_write_single_coil_resp_t
modbus_write_single_coil_resp_t::output_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_address;   \/\/ Echo of request$/;"	m	struct:modbus_write_single_coil_resp_t
modbus_write_single_coil_resp_t::output_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_value;     \/\/ Echo of request$/;"	m	struct:modbus_write_single_coil_resp_t
modbus_write_single_register_req_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_single_register_req_t {$/;"	s
modbus_write_single_register_req_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_single_register_req_t;$/;"	t	typeref:struct:modbus_write_single_register_req_t
modbus_write_single_register_req_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_register_req_t
modbus_write_single_register_req_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_REGISTER$/;"	m	struct:modbus_write_single_register_req_t
modbus_write_single_register_req_t::register_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_address;$/;"	m	struct:modbus_write_single_register_req_t
modbus_write_single_register_req_t::register_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_value;$/;"	m	struct:modbus_write_single_register_req_t
modbus_write_single_register_resp_t	src/examples/modbus/lib/include/modbus.h	/^typedef struct modbus_write_single_register_resp_t {$/;"	s
modbus_write_single_register_resp_t	src/examples/modbus/lib/include/modbus.h	/^} modbus_write_single_register_resp_t;$/;"	t	typeref:struct:modbus_write_single_register_resp_t
modbus_write_single_register_resp_t::base	src/examples/modbus/lib/include/modbus.h	/^    modbus_pdu_base_t base;$/;"	m	struct:modbus_write_single_register_resp_t
modbus_write_single_register_resp_t::function_code	src/examples/modbus/lib/include/modbus.h	/^    uint8_t function_code;     \/\/ MODBUS_FC_WRITE_SINGLE_REGISTER$/;"	m	struct:modbus_write_single_register_resp_t
modbus_write_single_register_resp_t::register_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_address; \/\/ Echo of request$/;"	m	struct:modbus_write_single_register_resp_t
modbus_write_single_register_resp_t::register_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_value;   \/\/ Echo of request$/;"	m	struct:modbus_write_single_register_resp_t
mutex	src/lib/ptk_os_thread.c	/^    pthread_mutex_t mutex;$/;"	m	struct:ptk_mutex	file:
mutex	src/lib/ptk_shared.c	/^    ptk_mutex *mutex;           \/\/ Per-entry mutex$/;"	m	struct:__anon27	file:
name	src/include/ptk_config.h	/^    const char *name;           \/\/ Long option name (without --)$/;"	m	struct:__anon2
netmask	src/include/ptk_sock.h	/^    char netmask[16];            \/\/ Subnet mask (e.g., "255.255.255.0")$/;"	m	struct:__anon5
netmask	src/include/ptk_sock.h	/^    char netmask[16];            \/\/ Subnet mask (e.g., "255.255.255.0")$/;"	m	struct:ptk_network_interface
network	src/include/ptk_sock.h	/^    char network[16];            \/\/ Network address (e.g., "192.168.1.0")$/;"	m	struct:ptk_network_interface
next_generation	src/lib/ptk_shared.c	/^    uint32_t next_generation;   \/\/ Global generation counter$/;"	m	struct:__anon28	file:
next_sender_context	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    uint64_t next_sender_context; \/\/ For request\/response matching$/;"	m	struct:eip_connection_t	file:
on_shared_fail	src/include/ptk_shared.h	70;"	d
operational	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool operational;                 \/\/ true if operational$/;"	m	struct:eip_list_identity_resp_t
options	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t options;         \/\/ Options flags (typically 0)$/;"	m	struct:__anon22	file:
options	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t options;         \/\/ Options flags (typically 0)$/;"	m	struct:__anon17	file:
options	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint32_t options;         \/\/ Options flags$/;"	m	struct:__anon14	file:
options	src/tests/demo_type_safe_serialize.c	/^    uint32_t options;         \/\/ Command options$/;"	m	struct:__anon12	file:
options	src/tests/test_type_safe_serialize.c	/^    uint32_t options;         \/\/ Command options$/;"	m	struct:__anon9	file:
output_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_address;   \/\/ Echo of request$/;"	m	struct:modbus_write_single_coil_resp_t
output_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_address;$/;"	m	struct:modbus_write_single_coil_req_t
output_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_value;     \/\/ 0x0000 = OFF, 0xFF00 = ON$/;"	m	struct:modbus_write_single_coil_req_t
output_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t output_value;     \/\/ Echo of request$/;"	m	struct:modbus_write_single_coil_resp_t
output_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_bit_array_t *output_values;  \/\/ bit array$/;"	m	struct:modbus_write_multiple_coils_req_t
owned	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool owned;                         \/\/ Device is owned by another master$/;"	m	struct:eip_list_identity_resp_t
parse_cip_identity_item	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err parse_cip_identity_item(ptk_buf *buffer, cip_identity_item_t *identity, uint16_t item_length) {$/;"	f	file:	signature:(ptk_buf *buffer, cip_identity_item_t *identity, uint16_t item_length)
parse_cip_identity_item	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err parse_cip_identity_item(ptk_buf *buffer, cip_identity_item_t *identity, uint16_t item_length) {$/;"	f	file:	signature:(ptk_buf *buffer, cip_identity_item_t *identity, uint16_t item_length)
parse_cip_identity_item	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^static ptk_err parse_cip_identity_item(ptk_buf *buffer, eip_list_identity_resp_t *resp, uint16_t item_length) {$/;"	f	file:	signature:(ptk_buf *buffer, eip_list_identity_resp_t *resp, uint16_t item_length)
parse_cpf_header	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err parse_cpf_header(ptk_buf *buffer, uint16_t *item_count) {$/;"	f	file:	signature:(ptk_buf *buffer, uint16_t *item_count)
parse_cpf_header	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err parse_cpf_header(ptk_buf *buffer, uint16_t *item_count) {$/;"	f	file:	signature:(ptk_buf *buffer, uint16_t *item_count)
parse_eip_header	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err parse_eip_header(ptk_buf *buffer, eip_encap_header_t *header) {$/;"	f	file:	signature:(ptk_buf *buffer, eip_encap_header_t *header)
parse_eip_header	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err parse_eip_header(ptk_buf *buffer, eip_encap_header_t *header) {$/;"	f	file:	signature:(ptk_buf *buffer, eip_encap_header_t *header)
parse_list_identity_response	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err parse_list_identity_response(ptk_buf *buffer, const ptk_address_t *sender_addr) {$/;"	f	file:	signature:(ptk_buf *buffer, const ptk_address_t *sender_addr)
parse_list_identity_response	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err parse_list_identity_response(ptk_buf *buffer, const ptk_address_t *sender_addr) {$/;"	f	file:	signature:(ptk_buf *buffer, const ptk_address_t *sender_addr)
parse_path_component	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^static ptk_err parse_path_component(const char **path_str, cip_segment_u *segment) {$/;"	f	file:	signature:(const char **path_str, cip_segment_u *segment)
parse_short_string	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static ptk_err parse_short_string(ptk_buf *buffer, char *output, size_t max_len) {$/;"	f	file:	signature:(ptk_buf *buffer, char *output, size_t max_len)
parse_short_string	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static ptk_err parse_short_string(ptk_buf *buffer, char *output, size_t max_len) {$/;"	f	file:	signature:(ptk_buf *buffer, char *output, size_t max_len)
pdu_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    size_t pdu_type;          \/\/ Unique type identifier from #defines$/;"	m	struct:eip_pdu_base_t
pdu_type	src/examples/modbus/lib/include/modbus.h	/^    size_t pdu_type;              \/\/ Unique type identifier from #defines$/;"	m	struct:modbus_pdu_base_t
platform	src/lib/linux/threadlet_scheduler.h	/^    platform_event_loop_t *platform;$/;"	m	struct:event_loop_t
platform_add_fd	src/lib/linux/linux_event_loop.c	/^ptk_err platform_add_fd(platform_event_loop_t *handle, int fd, uint32_t events) {$/;"	f	signature:(platform_event_loop_t *handle, int fd, uint32_t events)
platform_add_fd	src/lib/linux/linux_event_loop.h	/^ptk_err platform_add_fd(platform_event_loop_t *loop, int fd, uint32_t events);$/;"	p	signature:(platform_event_loop_t *loop, int fd, uint32_t events)
platform_event_list_t	src/lib/linux/ptk_platform.h	/^} platform_event_list_t;/;"	t	typeref:struct:__anon32
platform_event_loop_create	src/lib/linux/linux_event_loop.c	/^platform_event_loop_t *platform_event_loop_create(int max_events) {$/;"	f	signature:(int max_events)
platform_event_loop_create	src/lib/linux/linux_event_loop.h	/^platform_event_loop_t *platform_event_loop_create(int max_events);$/;"	p	signature:(int max_events)
platform_event_loop_t	src/lib/linux/linux_event_loop.h	/^typedef struct platform_event_loop_t {$/;"	s
platform_event_loop_t	src/lib/linux/linux_event_loop.h	/^} platform_event_loop_t;$/;"	t	typeref:struct:platform_event_loop_t
platform_event_loop_t::impl	src/lib/linux/linux_event_loop.h	/^    linux_event_loop_t *impl;$/;"	m	struct:platform_event_loop_t
platform_event_loop_t::max_events	src/lib/linux/linux_event_loop.h	/^    int max_events;$/;"	m	struct:platform_event_loop_t
platform_event_loop_wake	src/lib/linux/linux_event_loop.c	/^ptk_err platform_event_loop_wake(platform_event_loop_t *handle) {$/;"	f	signature:(platform_event_loop_t *handle)
platform_event_loop_wake	src/lib/linux/linux_event_loop.h	/^ptk_err platform_event_loop_wake(platform_event_loop_t *loop);/;"	p	signature:(platform_event_loop_t *loop)
platform_event_t	src/lib/linux/ptk_platform.h	/^} platform_event_t;$/;"	t	typeref:struct:__anon31
platform_poll_events	src/lib/linux/linux_event_loop.c	/^int platform_poll_events(platform_event_loop_t *handle, platform_event_list_t *out_events, int timeout_ms) {$/;"	f	signature:(platform_event_loop_t *handle, platform_event_list_t *out_events, int timeout_ms)
platform_poll_events	src/lib/linux/linux_event_loop.h	/^int platform_poll_events(platform_event_loop_t *loop, platform_event_list_t *out_events, int timeout_ms);$/;"	p	signature:(platform_event_loop_t *loop, platform_event_list_t *out_events, int timeout_ms)
platform_remove_fd	src/lib/linux/linux_event_loop.c	/^ptk_err platform_remove_fd(platform_event_loop_t *handle, int fd) {$/;"	f	signature:(platform_event_loop_t *handle, int fd)
platform_remove_fd	src/lib/linux/linux_event_loop.h	/^ptk_err platform_remove_fd(platform_event_loop_t *loop, int fd);$/;"	p	signature:(platform_event_loop_t *loop, int fd)
port	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_port_segment_t port;$/;"	m	union:cip_segment_u
port	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t port;                      \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
port	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    uint16_t port;              \/\/ Target port (typically 44818)$/;"	m	struct:eip_connection_t	file:
port	src/include/ptk_sock.h	/^    uint16_t port;     \/\/ Port number in host byte order$/;"	m	struct:__anon4
port_number	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t port_number;                \/\/ Port number (1-255)$/;"	m	struct:cip_port_segment
prefix_length	src/include/ptk_sock.h	/^    uint8_t prefix_length;       \/\/ CIDR prefix length (e.g., 24 for \/24)$/;"	m	struct:ptk_network_interface
process_ready_events	src/lib/linux/threadlet_scheduler.c	/^static void process_ready_events(event_loop_t *loop, platform_event_list_t *events) {$/;"	f	file:	signature:(event_loop_t *loop, platform_event_list_t *events)
process_timeouts	src/lib/linux/threadlet_scheduler.c	/^static void process_timeouts(event_loop_t *loop) {$/;"	f	file:	signature:(event_loop_t *loop)
product_code	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t product_code;   \/\/ Product code (little-endian)$/;"	m	struct:__anon23	file:
product_code	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t product_code;   \/\/ Product code (little-endian)$/;"	m	struct:__anon18	file:
product_code	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t product_code;              \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
product_name	src/examples/ethernetip/lib/include/ethernetip.h	/^    char product_name[64];              \/\/ Null-terminated string$/;"	m	struct:eip_list_identity_resp_t
protocol_timeout_handler	src/examples/timer_example.c	/^static bool protocol_timeout_handler(void *user_data) {$/;"	f	file:	signature:(void *user_data)
ptk_address_equals	src/include/ptk_sock.h	/^bool ptk_address_equals(const ptk_address_t *addr1, const ptk_address_t *addr2);$/;"	p	signature:(const ptk_address_t *addr1, const ptk_address_t *addr2)
ptk_address_get_port	src/include/ptk_sock.h	/^uint16_t ptk_address_get_port(const ptk_address_t *address);$/;"	p	signature:(const ptk_address_t *address)
ptk_address_init	src/include/ptk_sock.h	/^ptk_err ptk_address_init(ptk_address_t *address, const char *ip_string, uint16_t port);$/;"	p	signature:(ptk_address_t *address, const char *ip_string, uint16_t port)
ptk_address_init_any	src/include/ptk_sock.h	/^ptk_err ptk_address_init_any(ptk_address_t *address, uint16_t port);$/;"	p	signature:(ptk_address_t *address, uint16_t port)
ptk_address_t	src/include/ptk_sock.h	/^} ptk_address_t;$/;"	t	typeref:struct:__anon4
ptk_address_to_string	src/include/ptk_sock.h	/^char *ptk_address_to_string(const ptk_address_t *address);$/;"	p	signature:(const ptk_address_t *address)
ptk_alloc	src/include/ptk_alloc.h	29;"	d
ptk_alloc_header	src/lib/ptk_alloc.c	/^typedef struct ptk_alloc_header {$/;"	s	file:
ptk_alloc_header::destructor	src/lib/ptk_alloc.c	/^    void (*destructor)(void *ptr);$/;"	m	struct:ptk_alloc_header	file:
ptk_alloc_header::file	src/lib/ptk_alloc.c	/^    const char *file;$/;"	m	struct:ptk_alloc_header	file:
ptk_alloc_header::line	src/lib/ptk_alloc.c	/^    int line;$/;"	m	struct:ptk_alloc_header	file:
ptk_alloc_header::size	src/lib/ptk_alloc.c	/^    size_t size;$/;"	m	struct:ptk_alloc_header	file:
ptk_alloc_header_t	src/lib/ptk_alloc.c	/^} ptk_alloc_header_t;$/;"	t	typeref:struct:ptk_alloc_header	file:
ptk_alloc_impl	src/include/ptk_alloc.h	/^extern void *ptk_alloc_impl(const char *file, int line, size_t size, void (*destructor)(void *ptr));$/;"	p	signature:(const char *file, int line, size_t size, void (*destructor)(void *ptr))
ptk_alloc_impl	src/lib/ptk_alloc.c	/^void *ptk_alloc_impl(const char *file, int line, size_t size, void (*destructor)(void *ptr)) {$/;"	f	signature:(const char *file, int line, size_t size, void (*destructor)(void *ptr))
ptk_atomic	src/include/ptk_atomic.h	19;"	d
ptk_atomic_add_fetch_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_add_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_add_fetch_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_add_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_add_fetch_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_add_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_add_fetch_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_add_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_add_fetch_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_add_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_add_fetch_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_add_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_add_fetch_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_add_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_add_fetch_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_add_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_and_fetch_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_and_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_and_fetch_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_and_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_and_fetch_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_and_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_and_fetch_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_and_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_and_fetch_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_and_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_and_fetch_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_and_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_and_fetch_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_and_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_and_fetch_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_and_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_compare_and_swap_ptr	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_compare_and_swap_ptr(ptk_atomic void **dest_value, void *old_value, void *new_value);$/;"	p	signature:(ptk_atomic void **dest_value, void *old_value, void *new_value)
ptk_atomic_compare_and_swap_ptr	src/lib/posix/atomic_operations.c	/^ptk_err ptk_atomic_compare_and_swap_ptr(ptk_atomic void **dest_value, void *old_value, void *new_value) {$/;"	f	signature:(ptk_atomic void **dest_value, void *old_value, void *new_value)
ptk_atomic_compare_and_swap_ptr	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_compare_and_swap_ptr(ptk_atomic void **dest_value, void *old_value, void *new_value) {$/;"	f	signature:(ptk_atomic void **dest_value, void *old_value, void *new_value)
ptk_atomic_compare_and_swap_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_compare_and_swap_u16(ptk_atomic uint16_t *dest_value, uint16_t old_value, uint16_t new_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t old_value, uint16_t new_value)
ptk_atomic_compare_and_swap_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_compare_and_swap_u16(ptk_atomic uint16_t *dest_value, uint16_t old_value, uint16_t new_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t old_value, uint16_t new_value)
ptk_atomic_compare_and_swap_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_compare_and_swap_u32(ptk_atomic uint32_t *dest_value, uint32_t old_value, uint32_t new_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t old_value, uint32_t new_value)
ptk_atomic_compare_and_swap_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_compare_and_swap_u32(ptk_atomic uint32_t *dest_value, uint32_t old_value, uint32_t new_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t old_value, uint32_t new_value)
ptk_atomic_compare_and_swap_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_compare_and_swap_u64(ptk_atomic uint64_t *dest_value, uint64_t old_value, uint64_t new_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t old_value, uint64_t new_value)
ptk_atomic_compare_and_swap_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_compare_and_swap_u64(ptk_atomic uint64_t *dest_value, uint64_t old_value, uint64_t new_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t old_value, uint64_t new_value)
ptk_atomic_compare_and_swap_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_compare_and_swap_u8(ptk_atomic uint8_t *dest_value, uint8_t old_value, uint8_t new_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t old_value, uint8_t new_value)
ptk_atomic_compare_and_swap_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_compare_and_swap_u8(ptk_atomic uint8_t *dest_value, uint8_t old_value, uint8_t new_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t old_value, uint8_t new_value)
ptk_atomic_fetch_add_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_add_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_add_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_add_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_add_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_add_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_add_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_add_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_add_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_add_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_add_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_add_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_add_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_add_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_add_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_add_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_and_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_and_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_and_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_and_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_and_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_and_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_and_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_and_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_and_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_and_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_and_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_and_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_and_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_and_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_and_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_and_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_or_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_or_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_or_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_or_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_or_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_or_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_or_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_or_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_or_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_or_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_or_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_or_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_or_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_or_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_or_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_or_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_sub_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_sub_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_sub_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_sub_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_sub_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_sub_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_sub_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_sub_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_sub_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_sub_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_sub_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_sub_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_sub_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_sub_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_sub_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_sub_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_xor_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_xor_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_xor_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_xor_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_fetch_xor_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_xor_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_xor_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_xor_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_fetch_xor_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_xor_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_xor_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_xor_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_fetch_xor_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_fetch_xor_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_fetch_xor_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_fetch_xor_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_load_ptr	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_load_ptr(void **dest_value, ptk_atomic void **src_value);$/;"	p	signature:(void **dest_value, ptk_atomic void **src_value)
ptk_atomic_load_ptr	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_load_ptr(void **dest_value, ptk_atomic void **src_value) {$/;"	f	signature:(void **dest_value, ptk_atomic void **src_value)
ptk_atomic_load_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_load_u16(uint16_t *dest_value, ptk_atomic uint16_t *src_value);$/;"	p	signature:(uint16_t *dest_value, ptk_atomic uint16_t *src_value)
ptk_atomic_load_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_load_u16(uint16_t *dest_value, ptk_atomic uint16_t *src_value) {$/;"	f	signature:(uint16_t *dest_value, ptk_atomic uint16_t *src_value)
ptk_atomic_load_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_load_u32(uint32_t *dest_value, ptk_atomic uint32_t *src_value);$/;"	p	signature:(uint32_t *dest_value, ptk_atomic uint32_t *src_value)
ptk_atomic_load_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_load_u32(uint32_t *dest_value, ptk_atomic uint32_t *src_value) {$/;"	f	signature:(uint32_t *dest_value, ptk_atomic uint32_t *src_value)
ptk_atomic_load_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_load_u64(uint64_t *dest_value, ptk_atomic uint64_t *src_value);$/;"	p	signature:(uint64_t *dest_value, ptk_atomic uint64_t *src_value)
ptk_atomic_load_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_load_u64(uint64_t *dest_value, ptk_atomic uint64_t *src_value) {$/;"	f	signature:(uint64_t *dest_value, ptk_atomic uint64_t *src_value)
ptk_atomic_load_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_load_u8(uint8_t *dest_value, ptk_atomic uint8_t *src_value);$/;"	p	signature:(uint8_t *dest_value, ptk_atomic uint8_t *src_value)
ptk_atomic_load_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_load_u8(uint8_t *dest_value, ptk_atomic uint8_t *src_value) {$/;"	f	signature:(uint8_t *dest_value, ptk_atomic uint8_t *src_value)
ptk_atomic_or_fetch_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_or_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_or_fetch_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_or_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_or_fetch_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_or_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_or_fetch_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_or_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_or_fetch_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_or_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_or_fetch_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_or_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_or_fetch_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_or_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_or_fetch_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_or_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_store_ptr	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_store_ptr(ptk_atomic void **dest_value, void *src_value);$/;"	p	signature:(ptk_atomic void **dest_value, void *src_value)
ptk_atomic_store_ptr	src/lib/posix/atomic_operations.c	/^ptk_err ptk_atomic_store_ptr(ptk_atomic void **dest_value, void *src_value) {$/;"	f	signature:(ptk_atomic void **dest_value, void *src_value)
ptk_atomic_store_ptr	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_store_ptr(ptk_atomic void **dest_value, void *src_value) {$/;"	f	signature:(ptk_atomic void **dest_value, void *src_value)
ptk_atomic_store_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_store_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_store_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_store_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_store_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_store_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_store_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_store_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_store_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_store_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_store_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_store_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_store_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_store_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_store_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_store_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_sub_fetch_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_sub_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_sub_fetch_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_sub_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_sub_fetch_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_sub_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_sub_fetch_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_sub_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_sub_fetch_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_sub_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_sub_fetch_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_sub_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_sub_fetch_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_sub_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_sub_fetch_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_sub_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_xor_fetch_u16	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_xor_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value);$/;"	p	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_xor_fetch_u16	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_xor_fetch_u16(ptk_atomic uint16_t *dest_value, uint16_t src_value) {$/;"	f	signature:(ptk_atomic uint16_t *dest_value, uint16_t src_value)
ptk_atomic_xor_fetch_u32	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_xor_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value);$/;"	p	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_xor_fetch_u32	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_xor_fetch_u32(ptk_atomic uint32_t *dest_value, uint32_t src_value) {$/;"	f	signature:(ptk_atomic uint32_t *dest_value, uint32_t src_value)
ptk_atomic_xor_fetch_u64	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_xor_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value);$/;"	p	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_xor_fetch_u64	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_xor_fetch_u64(ptk_atomic uint64_t *dest_value, uint64_t src_value) {$/;"	f	signature:(ptk_atomic uint64_t *dest_value, uint64_t src_value)
ptk_atomic_xor_fetch_u8	src/include/ptk_atomic.h	/^ptk_err ptk_atomic_xor_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value);$/;"	p	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_atomic_xor_fetch_u8	src/lib/windows/atomic_operations.c	/^ptk_err ptk_atomic_xor_fetch_u8(ptk_atomic uint8_t *dest_value, uint8_t src_value) {$/;"	f	signature:(ptk_atomic uint8_t *dest_value, uint8_t src_value)
ptk_buf	src/include/ptk_buf.h	/^typedef struct ptk_buf {$/;"	s
ptk_buf	src/include/ptk_buf.h	/^} ptk_buf;$/;"	t	typeref:struct:ptk_buf
ptk_buf	src/include/ptk_log.h	/^typedef struct ptk_buf ptk_buf;$/;"	t	typeref:struct:ptk_buf
ptk_buf::data	src/include/ptk_buf.h	/^    u8 *data;           \/\/ Pointer to start of buffer$/;"	m	struct:ptk_buf
ptk_buf::data_len	src/include/ptk_buf.h	/^    buf_size_t data_len;  \/\/ Total length of buffer$/;"	m	struct:ptk_buf
ptk_buf::end	src/include/ptk_buf.h	/^    buf_size_t end;$/;"	m	struct:ptk_buf
ptk_buf::start	src/include/ptk_buf.h	/^    buf_size_t start;$/;"	m	struct:ptk_buf
ptk_buf_alloc	src/include/ptk_buf.h	/^extern ptk_buf *ptk_buf_alloc(buf_size_t size);$/;"	p	signature:(buf_size_t size)
ptk_buf_alloc	src/lib/ptk_buf.c	/^ptk_buf *ptk_buf_alloc(buf_size_t size) {$/;"	f	signature:(buf_size_t size)
ptk_buf_alloc_from_data	src/include/ptk_buf.h	/^extern ptk_buf *ptk_buf_alloc_from_data(const u8 *data, buf_size_t size);$/;"	p	signature:(const u8 *data, buf_size_t size)
ptk_buf_alloc_from_data	src/lib/ptk_buf.c	/^ptk_buf *ptk_buf_alloc_from_data(const u8 *data, buf_size_t size) {$/;"	f	signature:(const u8 *data, buf_size_t size)
ptk_buf_byte_swap_u32	src/include/ptk_buf.h	/^static inline u32 ptk_buf_byte_swap_u32(u32 value) {$/;"	f	signature:(u32 value)
ptk_buf_byte_swap_u64	src/include/ptk_buf.h	/^static inline u64 ptk_buf_byte_swap_u64(u64 value) {$/;"	f	signature:(u64 value)
ptk_buf_bytes_to_u64	src/lib/ptk_buf.c	/^static inline uint64_t ptk_buf_bytes_to_u64(const uint8_t *bytes, size_t size) {$/;"	f	file:	signature:(const uint8_t *bytes, size_t size)
ptk_buf_convert_endian	src/lib/ptk_buf.c	/^static inline uint64_t ptk_buf_convert_endian(uint64_t value, size_t size, ptk_buf_endian_t endian) {$/;"	f	file:	signature:(uint64_t value, size_t size, ptk_buf_endian_t endian)
ptk_buf_deserialize	src/include/ptk_buf.h	389;"	d
ptk_buf_deserialize_impl	src/include/ptk_buf.h	/^extern ptk_err ptk_buf_deserialize_impl(ptk_buf *buf, bool peek, ptk_buf_endian_t endian, buf_size_t count, ...);$/;"	p	signature:(ptk_buf *buf, bool peek, ptk_buf_endian_t endian, buf_size_t count, ...)
ptk_buf_deserialize_impl	src/lib/ptk_buf.c	/^ptk_err ptk_buf_deserialize_impl(ptk_buf *buf, bool peek, ptk_buf_endian_t endian, buf_size_t count, ...) {$/;"	f	signature:(ptk_buf *buf, bool peek, ptk_buf_endian_t endian, buf_size_t count, ...)
ptk_buf_endian_t	src/include/ptk_buf.h	/^typedef enum { PTK_BUF_LITTLE_ENDIAN = 0, PTK_BUF_BIG_ENDIAN = 1 } ptk_buf_endian_t;$/;"	t	typeref:enum:__anon7
ptk_buf_get_capacity	src/include/ptk_buf.h	/^extern buf_size_t ptk_buf_get_capacity(const ptk_buf *buf);$/;"	p	signature:(const ptk_buf *buf)
ptk_buf_get_capacity	src/lib/ptk_buf.c	/^buf_size_t ptk_buf_get_capacity(const ptk_buf *buf) {$/;"	f	signature:(const ptk_buf *buf)
ptk_buf_get_end	src/include/ptk_buf.h	/^extern buf_size_t ptk_buf_get_end(const ptk_buf *buf);$/;"	p	signature:(const ptk_buf *buf)
ptk_buf_get_end	src/lib/ptk_buf.c	/^buf_size_t ptk_buf_get_end(const ptk_buf *buf) {$/;"	f	signature:(const ptk_buf *buf)
ptk_buf_get_len	src/include/ptk_buf.h	/^extern buf_size_t ptk_buf_get_len(const ptk_buf *buf);$/;"	p	signature:(const ptk_buf *buf)
ptk_buf_get_len	src/lib/ptk_buf.c	/^buf_size_t ptk_buf_get_len(const ptk_buf *buf) {$/;"	f	signature:(const ptk_buf *buf)
ptk_buf_get_start	src/include/ptk_buf.h	/^extern buf_size_t ptk_buf_get_start(const ptk_buf *buf);$/;"	p	signature:(const ptk_buf *buf)
ptk_buf_get_start	src/lib/ptk_buf.c	/^buf_size_t ptk_buf_get_start(const ptk_buf *buf) {$/;"	f	signature:(const ptk_buf *buf)
ptk_buf_get_u8	src/include/ptk_buf.h	/^extern u8 ptk_buf_get_u8(ptk_buf *buf);$/;"	p	signature:(ptk_buf *buf)
ptk_buf_get_u8	src/lib/ptk_buf.c	/^u8 ptk_buf_get_u8(ptk_buf *buf) {$/;"	f	signature:(ptk_buf *buf)
ptk_buf_move_block	src/include/ptk_buf.h	/^extern ptk_err ptk_buf_move_block(ptk_buf *buf, buf_size_t new_position);$/;"	p	signature:(ptk_buf *buf, buf_size_t new_position)
ptk_buf_move_block	src/lib/ptk_buf.c	/^ptk_err ptk_buf_move_block(ptk_buf *buf, buf_size_t new_position) {$/;"	f	signature:(ptk_buf *buf, buf_size_t new_position)
ptk_buf_realloc	src/include/ptk_buf.h	/^extern ptk_buf *ptk_buf_realloc(ptk_buf *buf, buf_size_t new_size);$/;"	p	signature:(ptk_buf *buf, buf_size_t new_size)
ptk_buf_realloc	src/lib/ptk_buf.c	/^ptk_buf *ptk_buf_realloc(ptk_buf *buf, buf_size_t new_size) {$/;"	f	signature:(ptk_buf *buf, buf_size_t new_size)
ptk_buf_serialize	src/include/ptk_buf.h	381;"	d
ptk_buf_serialize_impl	src/include/ptk_buf.h	/^extern ptk_err ptk_buf_serialize_impl(ptk_buf *buf, ptk_buf_endian_t endian, buf_size_t count, ...);$/;"	p	signature:(ptk_buf *buf, ptk_buf_endian_t endian, buf_size_t count, ...)
ptk_buf_serialize_impl	src/lib/ptk_buf.c	/^ptk_err ptk_buf_serialize_impl(ptk_buf *buf, ptk_buf_endian_t endian, buf_size_t count, ...) {$/;"	f	signature:(ptk_buf *buf, ptk_buf_endian_t endian, buf_size_t count, ...)
ptk_buf_set_end	src/include/ptk_buf.h	/^extern ptk_err ptk_buf_set_end(ptk_buf *buf, buf_size_t end);$/;"	p	signature:(ptk_buf *buf, buf_size_t end)
ptk_buf_set_end	src/lib/ptk_buf.c	/^ptk_err ptk_buf_set_end(ptk_buf *buf, buf_size_t end) {$/;"	f	signature:(ptk_buf *buf, buf_size_t end)
ptk_buf_set_start	src/include/ptk_buf.h	/^extern ptk_err ptk_buf_set_start(ptk_buf *buf, buf_size_t start);$/;"	p	signature:(ptk_buf *buf, buf_size_t start)
ptk_buf_set_start	src/lib/ptk_buf.c	/^ptk_err ptk_buf_set_start(ptk_buf *buf, buf_size_t start) {$/;"	f	signature:(ptk_buf *buf, buf_size_t start)
ptk_buf_set_u8	src/include/ptk_buf.h	/^extern ptk_err ptk_buf_set_u8(ptk_buf *buf, u8 val);$/;"	p	signature:(ptk_buf *buf, u8 val)
ptk_buf_set_u8	src/lib/ptk_buf.c	/^ptk_err ptk_buf_set_u8(ptk_buf *buf, u8 val) {$/;"	f	signature:(ptk_buf *buf, u8 val)
ptk_buf_type_size	src/lib/ptk_buf.c	/^static inline size_t ptk_buf_type_size(ptk_buf_type_t type) {$/;"	f	file:	signature:(ptk_buf_type_t type)
ptk_buf_type_t	src/include/ptk_buf.h	/^} ptk_buf_type_t;$/;"	t	typeref:enum:__anon6
ptk_buf_u64_to_bytes	src/lib/ptk_buf.c	/^static inline void ptk_buf_u64_to_bytes(uint64_t value, uint8_t *bytes, size_t size) {$/;"	f	file:	signature:(uint64_t value, uint8_t *bytes, size_t size)
ptk_cond_var	src/include/ptk_os_thread.h	/^typedef struct ptk_cond_var ptk_cond_var;$/;"	t	typeref:struct:ptk_cond_var
ptk_cond_var	src/lib/ptk_os_thread.c	/^struct ptk_cond_var {$/;"	s	file:
ptk_cond_var::cond	src/lib/ptk_os_thread.c	/^    pthread_cond_t cond;$/;"	m	struct:ptk_cond_var	file:
ptk_cond_var_create	src/include/ptk_os_thread.h	/^extern ptk_cond_var *ptk_cond_var_create(void);$/;"	p	signature:(void)
ptk_cond_var_create	src/lib/ptk_os_thread.c	/^ptk_cond_var *ptk_cond_var_create(void) {$/;"	f	signature:(void)
ptk_cond_var_destructor	src/lib/ptk_os_thread.c	/^static void ptk_cond_var_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
ptk_cond_var_signal	src/include/ptk_os_thread.h	/^extern ptk_err ptk_cond_var_signal(ptk_cond_var *cond_var);$/;"	p	signature:(ptk_cond_var *cond_var)
ptk_cond_var_signal	src/lib/ptk_os_thread.c	/^ptk_err ptk_cond_var_signal(ptk_cond_var *cond_var) {$/;"	f	signature:(ptk_cond_var *cond_var)
ptk_cond_var_wait	src/include/ptk_os_thread.h	/^extern ptk_err ptk_cond_var_wait(ptk_cond_var *cond_var, ptk_mutex *mutex, ptk_time_ms timeout_ms);$/;"	p	signature:(ptk_cond_var *cond_var, ptk_mutex *mutex, ptk_time_ms timeout_ms)
ptk_cond_var_wait	src/lib/ptk_os_thread.c	/^ptk_err ptk_cond_var_wait(ptk_cond_var *cond_var, ptk_mutex *mutex, ptk_time_ms timeout_ms) {$/;"	f	signature:(ptk_cond_var *cond_var, ptk_mutex *mutex, ptk_time_ms timeout_ms)
ptk_config_field_t	src/include/ptk_config.h	/^} ptk_config_field_t;$/;"	t	typeref:struct:__anon2
ptk_config_parse	src/include/ptk_config.h	/^ptk_err ptk_config_parse(int argc, char *argv[], const ptk_config_field_t *fields, const char *program_name);$/;"	p	signature:(int argc, char *argv[], const ptk_config_field_t *fields, const char *program_name)
ptk_config_parse	src/lib/ptk_config.c	/^int ptk_config_parse(int argc, char *argv[], const ptk_config_field_t *fields, const char *program_name) {$/;"	f	signature:(int argc, char *argv[], const ptk_config_field_t *fields, const char *program_name)
ptk_config_print_help	src/include/ptk_config.h	/^ptk_err ptk_config_print_help(const char *program_name, const ptk_config_field_t *fields, const char *description);$/;"	p	signature:(const char *program_name, const ptk_config_field_t *fields, const char *description)
ptk_config_print_help	src/lib/ptk_config.c	/^void ptk_config_print_help(const char *program_name, const ptk_config_field_t *fields, const char *description) {$/;"	f	signature:(const char *program_name, const ptk_config_field_t *fields, const char *description)
ptk_config_type_t	src/include/ptk_config.h	/^} ptk_config_type_t;$/;"	t	typeref:enum:__anon1
ptk_current_error	src/lib/ptk_err.c	/^ptk_thread_local ptk_err ptk_current_error = PTK_OK;$/;"	v
ptk_duration_ms	src/include/ptk_utils.h	/^typedef int64_t ptk_duration_ms;$/;"	t
ptk_err	src/include/ptk_err.h	/^typedef enum ptk_err{$/;"	g
ptk_err	src/include/ptk_err.h	/^} ptk_err;$/;"	t	typeref:enum:ptk_err
ptk_err	src/include/ptk_os_thread.h	/^typedef enum ptk_err ptk_err;$/;"	t	typeref:enum:ptk_err
ptk_err_to_string	src/include/ptk_err.h	/^const char* ptk_err_to_string(ptk_err err);$/;"	p	signature:(ptk_err err)
ptk_err_to_string	src/lib/ptk_err.c	/^const char *ptk_err_to_string(ptk_err err) {$/;"	f	signature:(ptk_err err)
ptk_free	src/include/ptk_alloc.h	81;"	d
ptk_free_impl	src/include/ptk_alloc.h	/^extern void ptk_free_impl(const char *file, int line, void **ptr_ref);$/;"	p	signature:(const char *file, int line, void **ptr_ref)
ptk_free_impl	src/lib/ptk_alloc.c	/^void ptk_free_impl(const char *file, int line, void **ptr_ref) {$/;"	f	signature:(const char *file, int line, void **ptr_ref)
ptk_get_err	src/include/ptk_err.h	/^static inline ptk_err ptk_get_err(void) {$/;"	f	signature:(void)
ptk_get_header	src/lib/ptk_alloc.c	/^static ptk_alloc_header_t *ptk_get_header(void *user_ptr) {$/;"	f	file:	signature:(void *user_ptr)
ptk_linux_integration_init	src/lib/linux/linux_integration.c	/^ptk_err ptk_linux_integration_init(void) {$/;"	f	signature:(void)
ptk_linux_integration_run	src/lib/linux/linux_integration.c	/^ptk_err ptk_linux_integration_run(void) {$/;"	f	signature:(void)
ptk_linux_integration_stop	src/lib/linux/linux_integration.c	/^ptk_err ptk_linux_integration_stop(void) {$/;"	f	signature:(void)
ptk_log_buf_impl	src/include/ptk_log.h	/^extern void ptk_log_buf_impl(const char *func, int line_num, ptk_log_level log_level, ptk_buf *data);$/;"	p	signature:(const char *func, int line_num, ptk_log_level log_level, ptk_buf *data)
ptk_log_buf_impl	src/lib/ptk_log.c	/^void ptk_log_buf_impl(const char *func, int line_num, ptk_log_level log_level, ptk_buf *data) {$/;"	f	signature:(const char *func, int line_num, ptk_log_level log_level, ptk_buf *data)
ptk_log_impl	src/include/ptk_log.h	/^extern void ptk_log_impl(const char *func, int line_num, ptk_log_level log_level, const char *tmpl, ...);$/;"	p	signature:(const char *func, int line_num, ptk_log_level log_level, const char *tmpl, ...)
ptk_log_impl	src/lib/ptk_log.c	/^void ptk_log_impl(const char *func, int line_num, ptk_log_level log_level, const char *tmpl, ...) {$/;"	f	signature:(const char *func, int line_num, ptk_log_level log_level, const char *tmpl, ...)
ptk_log_level	src/include/ptk_log.h	/^} ptk_log_level;$/;"	t	typeref:enum:__anon8
ptk_log_level_get	src/include/ptk_log.h	/^extern ptk_log_level ptk_log_level_get(void);$/;"	p	signature:(void)
ptk_log_level_get	src/lib/ptk_log.c	/^ptk_log_level ptk_log_level_get(void) {$/;"	f	signature:(void)
ptk_log_level_set	src/include/ptk_log.h	/^extern ptk_log_level ptk_log_level_set(ptk_log_level level);$/;"	p	signature:(ptk_log_level level)
ptk_log_level_set	src/lib/ptk_log.c	/^ptk_log_level ptk_log_level_set(ptk_log_level level) {$/;"	f	signature:(ptk_log_level level)
ptk_mutex	src/include/ptk_os_thread.h	/^typedef struct ptk_mutex ptk_mutex;$/;"	t	typeref:struct:ptk_mutex
ptk_mutex	src/lib/ptk_os_thread.c	/^struct ptk_mutex {$/;"	s	file:
ptk_mutex::mutex	src/lib/ptk_os_thread.c	/^    pthread_mutex_t mutex;$/;"	m	struct:ptk_mutex	file:
ptk_mutex_create	src/include/ptk_os_thread.h	/^extern ptk_mutex *ptk_mutex_create(void);$/;"	p	signature:(void)
ptk_mutex_create	src/lib/ptk_os_thread.c	/^ptk_mutex *ptk_mutex_create(void) {$/;"	f	signature:(void)
ptk_mutex_destructor	src/lib/ptk_os_thread.c	/^static void ptk_mutex_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
ptk_mutex_unlock	src/include/ptk_os_thread.h	/^extern ptk_err ptk_mutex_unlock(ptk_mutex *mutex);$/;"	p	signature:(ptk_mutex *mutex)
ptk_mutex_unlock	src/lib/ptk_os_thread.c	/^ptk_err ptk_mutex_unlock(ptk_mutex *mutex) {$/;"	f	signature:(ptk_mutex *mutex)
ptk_mutex_wait_lock	src/include/ptk_os_thread.h	/^extern ptk_err ptk_mutex_wait_lock(ptk_mutex *mutex, ptk_time_ms timeout_ms);$/;"	p	signature:(ptk_mutex *mutex, ptk_time_ms timeout_ms)
ptk_mutex_wait_lock	src/lib/ptk_os_thread.c	/^ptk_err ptk_mutex_wait_lock(ptk_mutex *mutex, ptk_time_ms timeout_ms) {$/;"	f	signature:(ptk_mutex *mutex, ptk_time_ms timeout_ms)
ptk_network_discover_interfaces	src/include/ptk_sock.h	/^ptk_network_interface_array_t *ptk_network_discover_interfaces(void);$/;"	p	signature:(void)
ptk_network_info	src/include/ptk_sock.h	/^typedef struct ptk_network_info ptk_network_info;$/;"	t	typeref:struct:ptk_network_info
ptk_network_info_entry	src/include/ptk_sock.h	/^} ptk_network_info_entry;$/;"	t	typeref:struct:__anon5
ptk_network_interface	src/include/ptk_sock.h	/^typedef struct ptk_network_interface {$/;"	s
ptk_network_interface::broadcast	src/include/ptk_sock.h	/^    char broadcast[16];          \/\/ Broadcast address (e.g., "192.168.1.255")$/;"	m	struct:ptk_network_interface
ptk_network_interface::interface_name	src/include/ptk_sock.h	/^    char interface_name[32];     \/\/ Interface name (e.g., "eth0", "wlan0") $/;"	m	struct:ptk_network_interface
ptk_network_interface::ip_address	src/include/ptk_sock.h	/^    char ip_address[16];         \/\/ IP address (e.g., "192.168.1.100")$/;"	m	struct:ptk_network_interface
ptk_network_interface::is_loopback	src/include/ptk_sock.h	/^    bool is_loopback;            \/\/ True if this is loopback interface$/;"	m	struct:ptk_network_interface
ptk_network_interface::is_up	src/include/ptk_sock.h	/^    bool is_up;                  \/\/ True if interface is up$/;"	m	struct:ptk_network_interface
ptk_network_interface::netmask	src/include/ptk_sock.h	/^    char netmask[16];            \/\/ Subnet mask (e.g., "255.255.255.0")$/;"	m	struct:ptk_network_interface
ptk_network_interface::network	src/include/ptk_sock.h	/^    char network[16];            \/\/ Network address (e.g., "192.168.1.0")$/;"	m	struct:ptk_network_interface
ptk_network_interface::prefix_length	src/include/ptk_sock.h	/^    uint8_t prefix_length;       \/\/ CIDR prefix length (e.g., 24 for \/24)$/;"	m	struct:ptk_network_interface
ptk_network_interface::supports_broadcast	src/include/ptk_sock.h	/^    bool supports_broadcast;     \/\/ True if interface supports broadcast$/;"	m	struct:ptk_network_interface
ptk_network_interface_t	src/include/ptk_sock.h	/^} ptk_network_interface_t;$/;"	t	typeref:struct:ptk_network_interface
ptk_now_ms	src/include/ptk_utils.h	/^extern ptk_time_ms ptk_now_ms(void);$/;"	p	signature:(void)
ptk_now_ms	src/lib/ptk_utils.c	/^ptk_time_ms ptk_now_ms(void) {$/;"	f	signature:(void)
ptk_realloc	src/include/ptk_alloc.h	58;"	d
ptk_realloc_impl	src/include/ptk_alloc.h	/^extern void *ptk_realloc_impl(const char *file, int line, void *ptr, size_t new_size);$/;"	p	signature:(const char *file, int line, void *ptr, size_t new_size)
ptk_realloc_impl	src/lib/ptk_alloc.c	/^void *ptk_realloc_impl(const char *file, int line, void *ptr, size_t new_size) {$/;"	f	signature:(const char *file, int line, void *ptr, size_t new_size)
ptk_round_up_16	src/lib/ptk_alloc.c	/^static size_t ptk_round_up_16(size_t sz) { return (sz + PTK_ALLOC_ALIGNMENT - 1) & ~(PTK_ALLOC_ALIGNMENT - 1); }$/;"	f	file:	signature:(size_t sz)
ptk_serializable	src/include/ptk_buf.h	/^struct ptk_serializable {$/;"	s
ptk_serializable::deserialize	src/include/ptk_buf.h	/^    ptk_err (*deserialize)(ptk_buf *buf, struct ptk_serializable *obj);$/;"	m	struct:ptk_serializable
ptk_serializable::serialize	src/include/ptk_buf.h	/^    ptk_err (*serialize)(ptk_buf *buf, struct ptk_serializable *obj);$/;"	m	struct:ptk_serializable
ptk_serializable_t	src/include/ptk_buf.h	/^typedef struct ptk_serializable ptk_serializable_t;$/;"	t	typeref:struct:ptk_serializable
ptk_set_err	src/include/ptk_err.h	/^static inline void ptk_set_err(ptk_err err) {$/;"	f	signature:(ptk_err err)
ptk_set_interrupt_handler	src/include/ptk_utils.h	/^extern ptk_err ptk_set_interrupt_handler(void (*handler)(void));$/;"	p	signature:(void (*handler)(void))
ptk_set_interrupt_handler	src/lib/ptk_utils.c	/^ptk_err ptk_set_interrupt_handler(void (*handler)(void)) {$/;"	f	signature:(void (*handler)(void))
ptk_shared_acquire	src/include/ptk_shared.h	/^extern void *ptk_shared_acquire(ptk_shared_handle_t handle);$/;"	p	signature:(ptk_shared_handle_t handle)
ptk_shared_acquire	src/lib/ptk_shared.c	/^void *ptk_shared_acquire(ptk_shared_handle_t handle) {$/;"	f	signature:(ptk_shared_handle_t handle)
ptk_shared_handle	src/include/ptk_shared.h	/^typedef struct ptk_shared_handle {$/;"	s
ptk_shared_handle::value	src/include/ptk_shared.h	/^    uint64_t value;  \/\/ Opaque handle value$/;"	m	struct:ptk_shared_handle
ptk_shared_handle_t	src/include/ptk_shared.h	/^} ptk_shared_handle_t;$/;"	t	typeref:struct:ptk_shared_handle
ptk_shared_init	src/include/ptk_shared.h	/^extern ptk_err ptk_shared_init(void);$/;"	p	signature:(void)
ptk_shared_init	src/lib/ptk_shared.c	/^ptk_err ptk_shared_init(void) {$/;"	f	signature:(void)
ptk_shared_realloc	src/include/ptk_shared.h	/^extern ptk_err ptk_shared_realloc(ptk_shared_handle_t handle, size_t new_size);  \/\/ reuses the existing handle.$/;"	p	signature:(ptk_shared_handle_t handle, size_t new_size)
ptk_shared_realloc	src/lib/ptk_shared.c	/^ptk_err ptk_shared_realloc(ptk_shared_handle_t handle, size_t new_size) {$/;"	f	signature:(ptk_shared_handle_t handle, size_t new_size)
ptk_shared_release	src/include/ptk_shared.h	/^extern ptk_err ptk_shared_release(ptk_shared_handle_t handle);$/;"	p	signature:(ptk_shared_handle_t handle)
ptk_shared_release	src/lib/ptk_shared.c	/^ptk_err ptk_shared_release(ptk_shared_handle_t handle) {$/;"	f	signature:(ptk_shared_handle_t handle)
ptk_shared_shutdown	src/include/ptk_shared.h	/^extern ptk_err ptk_shared_shutdown(void);$/;"	p	signature:(void)
ptk_shared_shutdown	src/lib/ptk_shared.c	/^ptk_err ptk_shared_shutdown(void) {$/;"	f	signature:(void)
ptk_shared_wrap	src/include/ptk_shared.h	27;"	d
ptk_shared_wrap_impl	src/include/ptk_shared.h	/^extern ptk_shared_handle_t ptk_shared_wrap_impl(const char *file, int line, void *ptr);$/;"	p	signature:(const char *file, int line, void *ptr)
ptk_shared_wrap_impl	src/lib/ptk_shared.c	/^ptk_shared_handle_t ptk_shared_wrap_impl(const char *file, int line, void *ptr) {$/;"	f	signature:(const char *file, int line, void *ptr)
ptk_shutdown	src/include/ptk.h	/^ptk_err ptk_shutdown(void);/;"	p	signature:(void)
ptk_shutdown	src/lib/ptk.c	/^void ptk_shutdown(void) {$/;"	f	signature:(void)
ptk_sock	src/include/ptk_sock.h	/^typedef struct ptk_sock ptk_sock;$/;"	t	typeref:struct:ptk_sock
ptk_sock	src/lib/linux/socket_integration.c	/^struct ptk_sock {$/;"	s	file:
ptk_sock::event_loop	src/lib/linux/socket_integration.c	/^    event_loop_t *event_loop;$/;"	m	struct:ptk_sock	file:
ptk_sock::fd	src/lib/linux/socket_integration.c	/^    int fd;$/;"	m	struct:ptk_sock	file:
ptk_sock::type	src/lib/linux/socket_integration.c	/^    ptk_sock_type type;$/;"	m	struct:ptk_sock	file:
ptk_sock_destructor	src/lib/linux/socket_integration.c	/^static void ptk_sock_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
ptk_sock_type	src/include/ptk_sock.h	/^} ptk_sock_type;$/;"	t	typeref:enum:__anon3
ptk_socket_abort	src/include/ptk_sock.h	/^ptk_err ptk_socket_abort(ptk_sock *sock);$/;"	p	signature:(ptk_sock *sock)
ptk_socket_abort	src/lib/linux/socket_integration.c	/^ptk_err ptk_socket_abort(ptk_sock *sock) {$/;"	f	signature:(ptk_sock *sock)
ptk_socket_list_networks	src/include/ptk_sock.h	/^ptk_network_info *ptk_socket_list_networks(void);$/;"	p	signature:(void)
ptk_socket_network_info_count	src/include/ptk_sock.h	/^size_t ptk_socket_network_info_count(const ptk_network_info *network_info);$/;"	p	signature:(const ptk_network_info *network_info)
ptk_socket_network_info_get	src/include/ptk_sock.h	/^const ptk_network_info_entry *ptk_socket_network_info_get(const ptk_network_info *network_info, size_t index);$/;"	p	signature:(const ptk_network_info *network_info, size_t index)
ptk_socket_signal	src/include/ptk_sock.h	/^ptk_err ptk_socket_signal(ptk_sock *sock);$/;"	p	signature:(ptk_sock *sock)
ptk_socket_signal	src/lib/linux/socket_integration.c	/^ptk_err ptk_socket_signal(ptk_sock *sock) {$/;"	f	signature:(ptk_sock *sock)
ptk_socket_type	src/include/ptk_sock.h	/^ptk_sock_type ptk_socket_type(ptk_sock *sock);$/;"	p	signature:(ptk_sock *sock)
ptk_socket_type	src/lib/linux/socket_integration.c	/^ptk_sock_type ptk_socket_type(ptk_sock *sock) {$/;"	f	signature:(ptk_sock *sock)
ptk_socket_wait	src/include/ptk_sock.h	/^ptk_err ptk_socket_wait(ptk_sock *sock, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *sock, ptk_duration_ms timeout_ms)
ptk_socket_wait	src/lib/linux/socket_integration.c	/^ptk_err ptk_socket_wait(ptk_sock *sock, ptk_duration_ms timeout_ms) {$/;"	f	signature:(ptk_sock *sock, ptk_duration_ms timeout_ms)
ptk_startup	src/include/ptk.h	/^ptk_err ptk_startup(void);$/;"	p	signature:(void)
ptk_startup	src/lib/ptk.c	/^void ptk_startup(void) {$/;"	f	signature:(void)
ptk_tcp_socket_accept	src/include/ptk_sock.h	/^ptk_sock *ptk_tcp_socket_accept(ptk_sock *server, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *server, ptk_duration_ms timeout_ms)
ptk_tcp_socket_connect	src/include/ptk_sock.h	/^ptk_sock *ptk_tcp_socket_connect(const ptk_address_t *remote_addr, ptk_duration_ms timeout_ms);$/;"	p	signature:(const ptk_address_t *remote_addr, ptk_duration_ms timeout_ms)
ptk_tcp_socket_connect	src/lib/linux/socket_integration.c	/^ptk_sock *ptk_tcp_socket_connect(const ptk_address_t *remote_addr, ptk_duration_ms timeout_ms) {$/;"	f	signature:(const ptk_address_t *remote_addr, ptk_duration_ms timeout_ms)
ptk_tcp_socket_listen	src/include/ptk_sock.h	/^ptk_sock *ptk_tcp_socket_listen(const ptk_address_t *local_addr, int backlog);$/;"	p	signature:(const ptk_address_t *local_addr, int backlog)
ptk_tcp_socket_recv	src/include/ptk_sock.h	/^ptk_buf *ptk_tcp_socket_recv(ptk_sock *sock, bool wait_for_data, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *sock, bool wait_for_data, ptk_duration_ms timeout_ms)
ptk_tcp_socket_recv	src/lib/linux/socket_integration.c	/^ptk_buf *ptk_tcp_socket_recv(ptk_sock *sock, bool wait_for_data, ptk_duration_ms timeout_ms) {$/;"	f	signature:(ptk_sock *sock, bool wait_for_data, ptk_duration_ms timeout_ms)
ptk_tcp_socket_send	src/include/ptk_sock.h	/^ptk_err ptk_tcp_socket_send(ptk_sock *sock, ptk_buf_array_t *data_array, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *sock, ptk_buf_array_t *data_array, ptk_duration_ms timeout_ms)
ptk_tcp_socket_send	src/lib/linux/socket_integration.c	/^ptk_err ptk_tcp_socket_send(ptk_sock *sock, ptk_buf_array_t *data_array, ptk_duration_ms timeout_ms) {$/;"	f	signature:(ptk_sock *sock, ptk_buf_array_t *data_array, ptk_duration_ms timeout_ms)
ptk_thread	src/include/ptk_os_thread.h	/^typedef struct ptk_thread ptk_thread;$/;"	t	typeref:struct:ptk_thread
ptk_thread	src/lib/ptk_os_thread.c	/^struct ptk_thread {$/;"	s	file:
ptk_thread::thread	src/lib/ptk_os_thread.c	/^    pthread_t thread;$/;"	m	struct:ptk_thread	file:
ptk_thread_create	src/include/ptk_os_thread.h	/^extern ptk_thread *ptk_thread_create(ptk_thread_func func, void *data);$/;"	p	signature:(ptk_thread_func func, void *data)
ptk_thread_create	src/lib/ptk_os_thread.c	/^ptk_thread *ptk_thread_create(ptk_thread_func func, void *data) {$/;"	f	signature:(ptk_thread_func func, void *data)
ptk_thread_destructor	src/lib/ptk_os_thread.c	/^static void ptk_thread_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
ptk_thread_entry	src/lib/ptk_os_thread.c	/^static void *ptk_thread_entry(void *arg) {$/;"	f	file:	signature:(void *arg)
ptk_thread_func	src/include/ptk_os_thread.h	/^typedef void (*ptk_thread_func)(void *data);$/;"	t
ptk_thread_join	src/include/ptk_os_thread.h	/^extern ptk_err ptk_thread_join(ptk_thread *thread);$/;"	p	signature:(ptk_thread *thread)
ptk_thread_join	src/lib/ptk_os_thread.c	/^ptk_err ptk_thread_join(ptk_thread *thread) {$/;"	f	signature:(ptk_thread *thread)
ptk_thread_local	src/include/ptk_os_thread.h	18;"	d
ptk_thread_local	src/include/ptk_os_thread.h	20;"	d
ptk_threadlet_create	src/include/ptk_threadlet.h	/^threadlet_t *ptk_threadlet_create(threadlet_run_func_t func, void *data);$/;"	p	signature:(threadlet_run_func_t func, void *data)
ptk_threadlet_create	src/lib/linux/threadlet_api.c	/^threadlet_t *ptk_threadlet_create(threadlet_run_func_t func, void *data) {$/;"	f	signature:(threadlet_run_func_t func, void *data)
ptk_threadlet_join	src/include/ptk_threadlet.h	/^ptk_err ptk_threadlet_join(threadlet_t *threadlet, ptk_duration_ms timeout_ms);$/;"	p	signature:(threadlet_t *threadlet, ptk_duration_ms timeout_ms)
ptk_threadlet_join	src/lib/linux/threadlet_api.c	/^ptk_err ptk_threadlet_join(threadlet_t *threadlet, ptk_duration_ms timeout_ms) {$/;"	f	signature:(threadlet_t *threadlet, ptk_duration_ms timeout_ms)
ptk_threadlet_resume	src/include/ptk_threadlet.h	/^ptk_err ptk_threadlet_resume(threadlet_t *threadlet);$/;"	p	signature:(threadlet_t *threadlet)
ptk_threadlet_resume	src/lib/linux/threadlet_api.c	/^ptk_err ptk_threadlet_resume(threadlet_t *threadlet) {$/;"	f	signature:(threadlet_t *threadlet)
ptk_threadlet_yield	src/include/ptk_threadlet.h	/^ptk_err ptk_threadlet_yield(void);$/;"	p	signature:(void)
ptk_threadlet_yield	src/lib/linux/threadlet_api.c	/^ptk_err ptk_threadlet_yield(void) {$/;"	f	signature:(void)
ptk_time_ms	src/include/ptk_os_thread.h	/^typedef int64_t ptk_time_ms;$/;"	t
ptk_time_ms	src/include/ptk_utils.h	/^typedef int64_t ptk_time_ms;$/;"	t
ptk_udp_buf_entry_t	src/include/ptk_sock.h	/^typedef struct ptk_udp_buf_entry_t {$/;"	s
ptk_udp_buf_entry_t	src/include/ptk_sock.h	/^} ptk_udp_buf_entry_t;$/;"	t	typeref:struct:ptk_udp_buf_entry_t
ptk_udp_buf_entry_t::buf	src/include/ptk_sock.h	/^    ptk_buf *buf;                \/\/ Buffer containing UDP packet data$/;"	m	struct:ptk_udp_buf_entry_t
ptk_udp_buf_entry_t::sender_addr	src/include/ptk_sock.h	/^    ptk_address_t sender_addr;   \/\/ Address of the sender of this packet$/;"	m	struct:ptk_udp_buf_entry_t
ptk_udp_socket_create	src/include/ptk_sock.h	/^ptk_sock *ptk_udp_socket_create(const ptk_address_t *local_addr, bool broadcast);$/;"	p	signature:(const ptk_address_t *local_addr, bool broadcast)
ptk_udp_socket_recv_from	src/include/ptk_sock.h	/^ptk_buf *ptk_udp_socket_recv_from(ptk_sock *sock, ptk_address_t *sender_addr, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *sock, ptk_address_t *sender_addr, ptk_duration_ms timeout_ms)
ptk_udp_socket_recv_many_from	src/include/ptk_sock.h	/^ptk_udp_buf_entry_array_t *ptk_udp_socket_recv_many_from(ptk_sock *sock, bool wait_for_packets, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *sock, bool wait_for_packets, ptk_duration_ms timeout_ms)
ptk_udp_socket_send_many_to	src/include/ptk_sock.h	/^ptk_err ptk_udp_socket_send_many_to(ptk_sock *sock, ptk_udp_buf_entry_array_t *data_array, const ptk_address_t *dest_addr, bool broadcast, ptk_duration_ms timeout_ms);$/;"	p	signature:(ptk_sock *sock, ptk_udp_buf_entry_array_t *data_array, const ptk_address_t *dest_addr, bool broadcast, ptk_duration_ms timeout_ms)
ptk_udp_socket_send_to	src/include/ptk_sock.h	/^ptk_err ptk_udp_socket_send_to(ptk_sock *sock, ptk_buf *data, const ptk_address_t *dest_addr, bool broadcast,$/;"	p	signature:(ptk_sock *sock, ptk_buf *data, const ptk_address_t *dest_addr, bool broadcast, ptk_duration_ms timeout_ms)
quantity_of_coils	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_coils;$/;"	m	struct:modbus_read_coils_req_t
quantity_of_inputs	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_inputs;$/;"	m	struct:modbus_read_discrete_inputs_req_t
quantity_of_outputs	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_outputs; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_coils_resp_t
quantity_of_registers	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_registers; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_registers_resp_t
quantity_of_registers	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_registers;$/;"	m	struct:modbus_read_holding_registers_req_t
quantity_of_registers	src/examples/modbus/lib/include/modbus.h	/^    uint16_t quantity_of_registers;$/;"	m	struct:modbus_read_input_registers_req_t
read_coils_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_coils_req_t *read_coils_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_coils_req_t
read_coils_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_coils_resp_t *read_coils_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_coils_resp_t
read_discrete_inputs_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_discrete_inputs_req_t *read_discrete_inputs_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_discrete_inputs_req_t
read_discrete_inputs_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_discrete_inputs_resp_t *read_discrete_inputs_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_discrete_inputs_resp_t
read_holding_registers_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_holding_registers_req_t *read_holding_registers_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_holding_registers_req_t
read_holding_registers_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_holding_registers_resp_t *read_holding_registers_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_holding_registers_resp_t
read_input_registers_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_input_registers_req_t *read_input_registers_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_input_registers_req_t
read_input_registers_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_read_input_registers_resp_t *read_input_registers_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_read_input_registers_resp_t
read_typed_value	src/lib/ptk_buf.c	/^static ptk_err read_typed_value(ptk_buf *buf, bool peek, ptk_buf_type_t type, ptk_buf_endian_t endian, va_list *args) {$/;"	f	file:	signature:(ptk_buf *buf, bool peek, ptk_buf_type_t type, ptk_buf_endian_t endian, va_list *args)
ready_queue	src/lib/linux/threadlet_scheduler.h	/^    threadlet_queue_t *ready_queue;$/;"	m	struct:event_loop_t
ref_count	src/lib/ptk_shared.c	/^    uint32_t ref_count;         \/\/ Reference counter (protected by mutex)$/;"	m	struct:__anon27	file:
register_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_address; \/\/ Echo of request$/;"	m	struct:modbus_write_single_register_resp_t
register_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_address;$/;"	m	struct:modbus_write_single_register_req_t
register_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_value;   \/\/ Echo of request$/;"	m	struct:modbus_write_single_register_resp_t
register_value	src/examples/modbus/lib/include/modbus.h	/^    uint16_t register_value;$/;"	m	struct:modbus_write_single_register_req_t
register_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_register_array_t *register_values;  \/\/ Variable length$/;"	m	struct:modbus_read_holding_registers_resp_t
register_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_register_array_t *register_values;  \/\/ Variable length$/;"	m	struct:modbus_read_input_registers_resp_t
register_values	src/examples/modbus/lib/include/modbus.h	/^    modbus_register_array_t *register_values;  \/\/ Variable length$/;"	m	struct:modbus_write_multiple_registers_req_t
registrations	src/lib/linux/threadlet_scheduler.h	/^    event_registration_t *registrations;$/;"	m	struct:event_loop_t
registrations_capacity	src/lib/linux/threadlet_scheduler.h	/^    size_t registrations_capacity;$/;"	m	struct:event_loop_t
registrations_count	src/lib/linux/threadlet_scheduler.h	/^    size_t registrations_count;$/;"	m	struct:event_loop_t
remove_registration	src/lib/linux/threadlet_scheduler.c	/^static ptk_err remove_registration(event_loop_t *loop, int fd) {$/;"	f	file:	signature:(event_loop_t *loop, int fd)
reserved	src/include/ptk_sock.h	/^    uint8_t reserved;  \/\/ Reserved for alignment\/future use$/;"	m	struct:__anon4
reset_test_state	src/tests/test_parent_child_alloc.c	/^void reset_test_state() {$/;"	f
response_time_range_ms	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t response_time_range_ms;$/;"	m	struct:eip_list_identity_req_t
response_timeout_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int response_timeout_ms;$/;"	m	struct:__anon24	file:
response_timeout_ms	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int response_timeout_ms;$/;"	m	struct:__anon19	file:
revision_major	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t revision_major;  \/\/ Major revision$/;"	m	struct:__anon23	file:
revision_major	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t revision_major;  \/\/ Major revision$/;"	m	struct:__anon18	file:
revision_major	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t revision_major;$/;"	m	struct:eip_list_identity_resp_t
revision_minor	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t revision_minor;  \/\/ Minor revision$/;"	m	struct:__anon23	file:
revision_minor	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t revision_minor;  \/\/ Minor revision$/;"	m	struct:__anon18	file:
revision_minor	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint8_t revision_minor;$/;"	m	struct:eip_list_identity_resp_t
running	src/lib/linux/threadlet_scheduler.h	/^    bool running;$/;"	m	struct:event_loop_t
scheduler_context	src/lib/linux/threadlet_core.c	/^static ptk_thread_local ucontext_t scheduler_context;$/;"	v	file:
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_DATA$/;"	m	struct:cip_data_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_CLASS$/;"	m	struct:cip_class_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_CONNECTION$/;"	m	struct:cip_connection_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_ELEMENT$/;"	m	struct:cip_element_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_INSTANCE$/;"	m	struct:cip_instance_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_LOGICAL_MEMBER$/;"	m	struct:cip_member_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_PORT$/;"	m	struct:cip_port_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ CIP_SEGMENT_TYPE_SYMBOLIC$/;"	m	struct:cip_symbolic_segment
segment_type	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_segment_type_t segment_type;    \/\/ Common type field for all segments$/;"	m	union:cip_segment_u
self_test_in_progress	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool self_test_in_progress;        \/\/ true if self-test is in progress$/;"	m	struct:eip_list_identity_resp_t
sender_addr	src/include/ptk_sock.h	/^    ptk_address_t sender_addr;   \/\/ Address of the sender of this packet$/;"	m	struct:ptk_udp_buf_entry_t
sender_context	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint64_t sender_context;  \/\/ Echo data for request\/response matching$/;"	m	struct:__anon22	file:
sender_context	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint64_t sender_context;  \/\/ Echo data for request\/response matching$/;"	m	struct:__anon17	file:
sender_context	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint64_t sender_context;  \/\/ Context data$/;"	m	struct:__anon14	file:
sender_context	src/tests/demo_type_safe_serialize.c	/^    uint64_t sender_context;  \/\/ Client context data (8 bytes)$/;"	m	struct:__anon12	file:
sender_context	src/tests/test_type_safe_serialize.c	/^    uint64_t sender_context;  \/\/ Client context data (8 bytes)$/;"	m	struct:__anon9	file:
serial_number	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t serial_number;  \/\/ Serial number$/;"	m	struct:__anon23	file:
serial_number	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t serial_number;  \/\/ Serial number$/;"	m	struct:__anon18	file:
serial_number	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint32_t serial_number;             \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
serialize	src/include/ptk_buf.h	/^    ptk_err (*serialize)(ptk_buf *buf, struct ptk_serializable *obj);$/;"	m	struct:ptk_serializable
server_client_data	src/tests/test_tcp_echo_abort.c	/^} server_client_data;$/;"	t	typeref:struct:__anon11	file:
server_client_thread	src/tests/test_tcp_echo_abort.c	/^static void server_client_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
server_thread	src/tests/test_tcp_echo_abort.c	/^static void server_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
server_thread	src/tests/test_udp_echo_abort.c	/^static void server_thread(void *arg) {$/;"	f	file:	signature:(void *arg)
session_handle	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t session_handle;  \/\/ Session identifier (0 for unregistered)$/;"	m	struct:__anon22	file:
session_handle	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t session_handle;  \/\/ Session identifier (0 for unregistered)$/;"	m	struct:__anon17	file:
session_handle	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    uint32_t session_handle;    \/\/ Current session handle (0 if no session)$/;"	m	struct:eip_connection_t	file:
session_handle	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint32_t session_handle;  \/\/ Session identifier$/;"	m	struct:__anon14	file:
session_handle	src/tests/demo_type_safe_serialize.c	/^    uint32_t session_handle;  \/\/ Session identifier$/;"	m	struct:__anon12	file:
session_handle	src/tests/test_type_safe_serialize.c	/^    uint32_t session_handle;  \/\/ Session identifier$/;"	m	struct:__anon9	file:
session_registered	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    bool session_registered;    \/\/ true if session is active$/;"	m	struct:eip_connection_t	file:
set_epoll_event	src/lib/linux/linux_event_loop.c	/^static void set_epoll_event(struct epoll_event *ev, int fd, uint32_t events) {$/;"	f	file:	signature:(struct epoll_event *ev, int fd, uint32_t events)
set_field_value	src/lib/ptk_config.c	/^static void set_field_value(const ptk_config_field_t *field, const char *value) {$/;"	f	file:	signature:(const ptk_config_field_t *field, const char *value)
shared_entry_t	src/lib/ptk_shared.c	/^} shared_entry_t;$/;"	t	typeref:struct:__anon27	file:
shared_table	src/lib/ptk_shared.c	/^static shared_table_t shared_table = {0};$/;"	v	file:
shared_table_initialized	src/lib/ptk_shared.c	/^static bool shared_table_initialized = false;$/;"	v	file:
shared_table_t	src/lib/ptk_shared.c	/^} shared_table_t;$/;"	t	typeref:struct:__anon28	file:
short_name	src/include/ptk_config.h	/^    char short_name;            \/\/ Short option character (0 if none)$/;"	m	struct:__anon2
signal_handler	src/examples/ethernetip/eip_discovery_example.c	/^static void signal_handler(int sig) {$/;"	f	file:	signature:(int sig)
signal_handler	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^static void signal_handler(void) {$/;"	f	file:	signature:(void)
signal_handler	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^static void signal_handler(void) {$/;"	f	file:	signature:(void)
signal_handler	src/tests/test_tcp_echo_abort.c	/^static void signal_handler(void) {$/;"	f	file:	signature:(void)
signal_handler	src/tests/test_udp_echo_abort.c	/^static void signal_handler(void) {$/;"	f	file:	signature:(void)
sin_addr	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t sin_addr[4];     \/\/ IP address (network byte order)$/;"	m	struct:__anon23	file:
sin_addr	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t sin_addr[4];     \/\/ IP address (network byte order)$/;"	m	struct:__anon18	file:
sin_family	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    int16_t sin_family;      \/\/ Address family (big-endian)$/;"	m	struct:__anon23	file:
sin_family	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    int16_t sin_family;      \/\/ Address family (big-endian)$/;"	m	struct:__anon18	file:
sin_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t sin_port;       \/\/ Port number (big-endian)$/;"	m	struct:__anon23	file:
sin_port	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t sin_port;       \/\/ Port number (big-endian)$/;"	m	struct:__anon18	file:
sin_zero	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint8_t sin_zero[8];     \/\/ Padding$/;"	m	struct:__anon23	file:
sin_zero	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint8_t sin_zero[8];     \/\/ Padding$/;"	m	struct:__anon18	file:
size	src/lib/ptk_alloc.c	/^    size_t size;$/;"	m	struct:ptk_alloc_header	file:
socket	src/examples/ethernetip/lib/src/ethernetip_connection.c	/^    ptk_sock *socket;           \/\/ Child of connection$/;"	m	struct:eip_connection_t	file:
socket	src/examples/modbus/lib/src/modbus_connection.c	/^    ptk_sock *socket;$/;"	m	struct:modbus_connection_t	file:
socket	src/examples/modbus/lib/src/modbus_pdu.c	/^    ptk_sock *socket;$/;"	m	struct:modbus_connection_t	file:
stack	src/lib/linux/threadlet_core.h	/^    void *stack;$/;"	m	struct:threadlet_t
standby	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool standby;                     \/\/ true if in standby mode$/;"	m	struct:eip_list_identity_resp_t
start	src/include/ptk_buf.h	/^    buf_size_t start;$/;"	m	struct:ptk_buf
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_coils_resp_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address; \/\/ Echo of request$/;"	m	struct:modbus_write_multiple_registers_resp_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_coils_req_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_discrete_inputs_req_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_holding_registers_req_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_read_input_registers_req_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_write_multiple_coils_req_t
starting_address	src/examples/modbus/lib/include/modbus.h	/^    uint16_t starting_address;$/;"	m	struct:modbus_write_multiple_registers_req_t
stats_handler	src/examples/timer_example.c	/^static bool stats_handler(void *user_data) {$/;"	f	file:	signature:(void *user_data)
status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t status;         \/\/ Device status$/;"	m	struct:__anon23	file:
status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint32_t status;          \/\/ Status code (0 = success)$/;"	m	struct:__anon22	file:
status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t status;         \/\/ Device status$/;"	m	struct:__anon18	file:
status	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint32_t status;          \/\/ Status code (0 = success)$/;"	m	struct:__anon17	file:
status	src/examples/ethernetip/lib/src/ethernetip_pdu.c	/^    uint32_t status;          \/\/ Status code$/;"	m	struct:__anon14	file:
status	src/lib/linux/threadlet_core.h	/^    threadlet_status_t status;$/;"	m	struct:threadlet_t
status	src/tests/demo_type_safe_serialize.c	/^    uint32_t status;          \/\/ Status\/error code$/;"	m	struct:__anon12	file:
status	src/tests/test_type_safe_serialize.c	/^    uint32_t status;          \/\/ Status\/error code$/;"	m	struct:__anon9	file:
supports_broadcast	src/include/ptk_sock.h	/^    bool supports_broadcast;     \/\/ True if interface supports broadcast$/;"	m	struct:__anon5
supports_broadcast	src/include/ptk_sock.h	/^    bool supports_broadcast;     \/\/ True if interface supports broadcast$/;"	m	struct:ptk_network_interface
symbol_length	src/examples/ethernetip/lib/include/ethernetip.h	/^    size_t symbol_length;               \/\/ Length of symbol name$/;"	m	struct:cip_symbolic_segment
symbol_name	src/examples/ethernetip/lib/include/ethernetip.h	/^    char *symbol_name;                  \/\/ Symbolic name (child allocation)$/;"	m	struct:cip_symbolic_segment
symbolic	src/examples/ethernetip/lib/include/ethernetip.h	/^    cip_symbolic_segment_t symbolic;$/;"	m	union:cip_segment_u
table_mutex	src/lib/ptk_shared.c	/^    ptk_mutex *table_mutex;     \/\/ Global table protection$/;"	m	struct:__anon28	file:
tail	src/lib/linux/threadlet_scheduler.h	/^    size_t tail;$/;"	m	struct:threadlet_queue_t
target	src/include/ptk_config.h	/^    void *target;               \/\/ Pointer to store the value$/;"	m	struct:__anon2
test_add_child	src/tests/test_parent_child_alloc.c	/^int test_add_child() {$/;"	f
test_allocator_alignment	src/lib/test/test_ptk_alloc.c	/^static int test_allocator_alignment() {$/;"	f	file:
test_arena_allocator	src/lib/test/test_ptk_alloc.c	/^static int test_arena_allocator() {$/;"	f	file:
test_basic_parent_child	src/tests/test_parent_child_alloc.c	/^int test_basic_parent_child() {$/;"	f
test_basic_serialization	src/tests/test_type_safe_serialize.c	/^void test_basic_serialization() {$/;"	f
test_buffer_basic	src/lib/test/test_ptk_buf.c	/^static int test_buffer_basic() {$/;"	f	file:
test_buffer_positioning	src/lib/test/test_ptk_buf.c	/^static int test_buffer_positioning() {$/;"	f	file:
test_complex_hierarchy	src/tests/test_parent_child_alloc.c	/^int test_complex_hierarchy() {$/;"	f
test_debug_allocator	src/lib/test/test_ptk_alloc.c	/^static int test_debug_allocator() {$/;"	f	file:
test_default_allocator	src/lib/test/test_ptk_alloc.c	/^static int test_default_allocator() {$/;"	f	file:
test_destructor	src/lib/test/test_ptk_alloc.c	/^void test_destructor(void *ptr) {$/;"	f	signature:(void *ptr)
test_edge_cases	src/tests/test_parent_child_alloc.c	/^int test_edge_cases() {$/;"	f
test_endianness	src/tests/test_type_safe_serialize.c	/^void test_endianness() {$/;"	f
test_error_handling	src/tests/test_type_safe_serialize.c	/^void test_error_handling() {$/;"	f
test_free_child_before_parent	src/tests/test_parent_child_alloc.c	/^int test_free_child_before_parent() {$/;"	f
test_multiple_children_lifo	src/tests/test_parent_child_alloc.c	/^int test_multiple_children_lifo() {$/;"	f
test_pdu_deserialize	src/tests/test_type_safe_serialize.c	/^ptk_err test_pdu_deserialize(ptk_buf *buf, ptk_serializable_t *obj) {$/;"	f	signature:(ptk_buf *buf, ptk_serializable_t *obj)
test_pdu_deserialize	src/tests/test_type_safe_serialize.c	/^ptk_err test_pdu_deserialize(ptk_buf *buf, ptk_serializable_t *obj);$/;"	p	file:	signature:(ptk_buf *buf, ptk_serializable_t *obj)
test_pdu_serialize	src/tests/test_type_safe_serialize.c	/^ptk_err test_pdu_serialize(ptk_buf *buf, ptk_serializable_t *obj) {$/;"	f	signature:(ptk_buf *buf, ptk_serializable_t *obj)
test_pdu_serialize	src/tests/test_type_safe_serialize.c	/^ptk_err test_pdu_serialize(ptk_buf *buf, ptk_serializable_t *obj);$/;"	p	file:	signature:(ptk_buf *buf, ptk_serializable_t *obj)
test_pdu_t	src/tests/test_type_safe_serialize.c	/^} test_pdu_t;$/;"	t	typeref:struct:__anon10	file:
test_peek_functionality	src/tests/test_type_safe_serialize.c	/^void test_peek_functionality() {$/;"	f
test_reallocation	src/tests/test_parent_child_alloc.c	/^int test_reallocation() {$/;"	f
test_safety_scenarios	src/tests/test_parent_child_alloc.c	/^int test_safety_scenarios() {$/;"	f
test_serializable_interface	src/tests/test_type_safe_serialize.c	/^void test_serializable_interface() {$/;"	f
test_serialization	src/tests/test_ptk_buf.c	/^void test_serialization() {$/;"	f
test_struct_serialization	src/tests/test_type_safe_serialize.c	/^void test_struct_serialization() {$/;"	f
thread	src/lib/ptk_os_thread.c	/^    pthread_t thread;$/;"	m	struct:ptk_thread	file:
thread_assignment_counter	src/lib/linux/threadlet_api.c	/^static ptk_thread_local size_t thread_assignment_counter = 0;$/;"	v	file:
thread_event_loop	src/lib/linux/threadlet_scheduler.c	/^static ptk_thread_local event_loop_t *thread_event_loop = NULL;$/;"	v	file:
thread_pool	src/lib/linux/threadlet_api.c	/^static ptk_thread **thread_pool = NULL;$/;"	v	file:
thread_pool_size	src/lib/linux/threadlet_api.c	/^static size_t thread_pool_size = 0;$/;"	v	file:
threadlet_create_internal	src/lib/linux/threadlet_core.c	/^threadlet_t *threadlet_create_internal(threadlet_run_func_t func, void *data) {$/;"	f	signature:(threadlet_run_func_t func, void *data)
threadlet_create_internal	src/lib/linux/threadlet_core.h	/^threadlet_t *threadlet_create_internal(threadlet_run_func_t func, void *data);$/;"	p	signature:(threadlet_run_func_t func, void *data)
threadlet_destructor	src/lib/linux/threadlet_core.c	/^static void threadlet_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
threadlet_entry_wrapper	src/lib/linux/threadlet_core.c	/^static void threadlet_entry_wrapper(void) {$/;"	f	file:	signature:(void)
threadlet_get_current	src/lib/linux/threadlet_core.c	/^threadlet_t *threadlet_get_current(void) {$/;"	f	signature:(void)
threadlet_get_current	src/lib/linux/threadlet_core.h	/^threadlet_t *threadlet_get_current(void);$/;"	p	signature:(void)
threadlet_get_status	src/lib/linux/threadlet_core.c	/^threadlet_status_t threadlet_get_status(const threadlet_t *threadlet) {$/;"	f	signature:(const threadlet_t *threadlet)
threadlet_get_status	src/lib/linux/threadlet_core.h	/^threadlet_status_t threadlet_get_status(const threadlet_t *threadlet);$/;"	p	signature:(const threadlet_t *threadlet)
threadlet_queue_create	src/lib/linux/threadlet_scheduler.c	/^static threadlet_queue_t *threadlet_queue_create(void) {$/;"	f	file:	signature:(void)
threadlet_queue_dequeue	src/lib/linux/threadlet_scheduler.c	/^static threadlet_t *threadlet_queue_dequeue(threadlet_queue_t *queue) {$/;"	f	file:	signature:(threadlet_queue_t *queue)
threadlet_queue_destructor	src/lib/linux/threadlet_scheduler.c	/^static void threadlet_queue_destructor(void *ptr) {$/;"	f	file:	signature:(void *ptr)
threadlet_queue_empty	src/lib/linux/threadlet_scheduler.c	/^static bool threadlet_queue_empty(threadlet_queue_t *queue) {$/;"	f	file:	signature:(threadlet_queue_t *queue)
threadlet_queue_enqueue	src/lib/linux/threadlet_scheduler.c	/^static ptk_err threadlet_queue_enqueue(threadlet_queue_t *queue, threadlet_t *threadlet) {$/;"	f	file:	signature:(threadlet_queue_t *queue, threadlet_t *threadlet)
threadlet_queue_t	src/lib/linux/threadlet_scheduler.h	/^struct threadlet_queue_t {$/;"	s
threadlet_queue_t	src/lib/linux/threadlet_scheduler.h	/^typedef struct threadlet_queue_t threadlet_queue_t;$/;"	t	typeref:struct:threadlet_queue_t
threadlet_queue_t::head	src/lib/linux/threadlet_scheduler.h	/^    size_t head;$/;"	m	struct:threadlet_queue_t
threadlet_queue_t::tail	src/lib/linux/threadlet_scheduler.h	/^    size_t tail;$/;"	m	struct:threadlet_queue_t
threadlet_queue_t::threadlets	src/lib/linux/threadlet_scheduler.h	/^    threadlet_ptr_array_t *threadlets;$/;"	m	struct:threadlet_queue_t
threadlet_resume_execution	src/lib/linux/threadlet_core.c	/^void threadlet_resume_execution(threadlet_t *threadlet) {$/;"	f	signature:(threadlet_t *threadlet)
threadlet_resume_execution	src/lib/linux/threadlet_core.h	/^void threadlet_resume_execution(threadlet_t *threadlet);/;"	p	signature:(threadlet_t *threadlet)
threadlet_run_func_t	src/include/ptk_threadlet.h	/^typedef void (*threadlet_run_func_t)(void *param);$/;"	t
threadlet_set_current	src/lib/linux/threadlet_core.c	/^void threadlet_set_current(threadlet_t *threadlet) {$/;"	f	signature:(threadlet_t *threadlet)
threadlet_set_current	src/lib/linux/threadlet_core.h	/^void threadlet_set_current(threadlet_t *threadlet);$/;"	p	signature:(threadlet_t *threadlet)
threadlet_set_status	src/lib/linux/threadlet_core.c	/^void threadlet_set_status(threadlet_t *threadlet, threadlet_status_t status) {$/;"	f	signature:(threadlet_t *threadlet, threadlet_status_t status)
threadlet_set_status	src/lib/linux/threadlet_core.h	/^void threadlet_set_status(threadlet_t *threadlet, threadlet_status_t status);$/;"	p	signature:(threadlet_t *threadlet, threadlet_status_t status)
threadlet_status_t	src/lib/linux/threadlet_core.h	/^} threadlet_status_t;$/;"	t	typeref:enum:__anon29
threadlet_t	src/include/ptk_threadlet.h	/^typedef struct threadlet_t threadlet_t;$/;"	t	typeref:struct:threadlet_t
threadlet_t	src/lib/linux/threadlet_core.h	/^struct threadlet_t {$/;"	s
threadlet_t::context	src/lib/linux/threadlet_core.h	/^    ucontext_t context;$/;"	m	struct:threadlet_t
threadlet_t::deadline	src/lib/linux/threadlet_core.h	/^    ptk_time_ms deadline;$/;"	m	struct:threadlet_t
threadlet_t::entry_func	src/lib/linux/threadlet_core.h	/^    threadlet_run_func_t entry_func;$/;"	m	struct:threadlet_t
threadlet_t::finished	src/lib/linux/threadlet_core.h	/^    bool finished;$/;"	m	struct:threadlet_t
threadlet_t::stack	src/lib/linux/threadlet_core.h	/^    void *stack;$/;"	m	struct:threadlet_t
threadlet_t::status	src/lib/linux/threadlet_core.h	/^    threadlet_status_t status;$/;"	m	struct:threadlet_t
threadlet_t::user_data	src/lib/linux/threadlet_core.h	/^    void *user_data;$/;"	m	struct:threadlet_t
threadlet_t::waiting_events	src/lib/linux/threadlet_core.h	/^    uint32_t waiting_events;$/;"	m	struct:threadlet_t
threadlet_t::waiting_fd	src/lib/linux/threadlet_core.h	/^    int waiting_fd;$/;"	m	struct:threadlet_t
threadlet_yield_to_scheduler	src/lib/linux/threadlet_core.c	/^void threadlet_yield_to_scheduler(threadlet_t *threadlet) {$/;"	f	signature:(threadlet_t *threadlet)
threadlet_yield_to_scheduler	src/lib/linux/threadlet_core.h	/^void threadlet_yield_to_scheduler(threadlet_t *threadlet);$/;"	p	signature:(threadlet_t *threadlet)
threadlets	src/lib/linux/threadlet_scheduler.h	/^    threadlet_ptr_array_t *threadlets;$/;"	m	struct:threadlet_queue_t
trace	src/include/ptk_log.h	102;"	d
trace_buf	src/include/ptk_log.h	147;"	d
transaction_id	src/examples/modbus/lib/src/modbus_connection.c	/^    uint16_t transaction_id;$/;"	m	struct:modbus_connection_t	file:
transaction_id	src/examples/modbus/lib/src/modbus_pdu.c	/^    uint16_t transaction_id;$/;"	m	struct:modbus_connection_t	file:
type	src/include/ptk_config.h	/^    ptk_config_type_t type;     \/\/ Type of the field$/;"	m	struct:__anon2
type	src/lib/linux/socket_integration.c	/^    ptk_sock_type type;$/;"	m	struct:ptk_sock	file:
type_sizes	src/lib/ptk_buf.c	/^static const size_t type_sizes[] = {$/;"	v	file:
u16	src/include/ptk_buf.h	/^typedef uint16_t u16;$/;"	t
u32	src/include/ptk_buf.h	/^typedef uint32_t u32;$/;"	t
u64	src/include/ptk_buf.h	/^typedef uint64_t u64;$/;"	t
u64_to_bytes	src/lib/ptk_buf.c	/^static inline void u64_to_bytes(uint64_t value, uint8_t *bytes, size_t size) {$/;"	f	file:	signature:(uint64_t value, uint8_t *bytes, size_t size)
u8	src/include/ptk_buf.h	/^typedef uint8_t u8;$/;"	t
unit_id	src/examples/modbus/lib/src/modbus_connection.c	/^    uint8_t unit_id;$/;"	m	struct:modbus_connection_t	file:
unit_id	src/examples/modbus/lib/src/modbus_pdu.c	/^    uint8_t unit_id;$/;"	m	struct:modbus_connection_t	file:
use_shared	src/include/ptk_shared.h	55;"	d
user_data	src/lib/linux/threadlet_core.h	/^    void *user_data;$/;"	m	struct:threadlet_t
value	src/include/ptk_shared.h	/^    uint64_t value;  \/\/ Opaque handle value$/;"	m	struct:ptk_shared_handle
vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t vendor_id;      \/\/ Vendor ID (little-endian)$/;"	m	struct:__anon23	file:
vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    uint16_t vendor_id;$/;"	m	struct:__anon25	file:
vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t vendor_id;      \/\/ Vendor ID (little-endian)$/;"	m	struct:__anon18	file:
vendor_id	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    uint16_t vendor_id;$/;"	m	struct:__anon20	file:
vendor_id	src/examples/ethernetip/lib/include/ethernetip.h	/^    uint16_t vendor_id;                 \/\/ Host byte order$/;"	m	struct:eip_list_identity_resp_t
vendor_id	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    uint16_t vendor_id;$/;"	m	struct:__anon15	file:
vendor_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    const char *vendor_name;$/;"	m	struct:__anon25	file:
vendor_name	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    const char *vendor_name;$/;"	m	struct:__anon20	file:
vendor_name	src/examples/ethernetip/lib/src/ethernetip_serialization.c	/^    const char *vendor_name;$/;"	m	struct:__anon15	file:
verbose_output	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices.c	/^    bool verbose_output;$/;"	m	struct:__anon24	file:
verbose_output	src/examples/ethernetip/ethernetip_find_devices/ethernetip_find_devices_new.c	/^    bool verbose_output;$/;"	m	struct:__anon19	file:
wait_for_io	src/lib/linux/socket_integration.c	/^static ptk_err wait_for_io(ptk_sock *sock, uint32_t events, ptk_duration_ms timeout_ms) {$/;"	f	file:	signature:(ptk_sock *sock, uint32_t events, ptk_duration_ms timeout_ms)
waiting_events	src/lib/linux/threadlet_core.h	/^    uint32_t waiting_events;$/;"	m	struct:threadlet_t
waiting_fd	src/lib/linux/threadlet_core.h	/^    int waiting_fd;$/;"	m	struct:threadlet_t
waiting_for_reset	src/examples/ethernetip/lib/include/ethernetip.h	/^    bool waiting_for_reset;           \/\/ true if waiting for reset$/;"	m	struct:eip_list_identity_resp_t
waiting_queue	src/lib/linux/threadlet_scheduler.h	/^    threadlet_queue_t *waiting_queue;$/;"	m	struct:event_loop_t
waiting_threadlet	src/lib/linux/threadlet_scheduler.h	/^    threadlet_t *waiting_threadlet;$/;"	m	struct:__anon30
wake_fd	src/lib/linux/linux_event_loop.c	/^    int wake_fd;$/;"	m	struct:linux_event_loop_t	file:
warn	src/include/ptk_log.h	81;"	d
warn_buf	src/include/ptk_log.h	126;"	d
write_multiple_coils_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_coils_req_t *write_multiple_coils_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_coils_req_t
write_multiple_coils_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_coils_resp_t *write_multiple_coils_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_coils_resp_t
write_multiple_registers_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_registers_req_t *write_multiple_registers_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_registers_req_t
write_multiple_registers_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_multiple_registers_resp_t *write_multiple_registers_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_multiple_registers_resp_t
write_single_coil_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_coil_req_t *write_single_coil_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_coil_req_t
write_single_coil_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_coil_resp_t *write_single_coil_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_coil_resp_t
write_single_register_req	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_register_req_t *write_single_register_req;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_register_req_t
write_single_register_resp	src/examples/modbus/lib/include/modbus.h	/^    struct modbus_write_single_register_resp_t *write_single_register_resp;$/;"	m	union:modbus_pdu_u	typeref:struct:modbus_pdu_u::modbus_write_single_register_resp_t
write_typed_value	src/lib/ptk_buf.c	/^static ptk_err write_typed_value(ptk_buf *buf, ptk_buf_type_t type, ptk_buf_endian_t endian, va_list *args) {$/;"	f	file:	signature:(ptk_buf *buf, ptk_buf_type_t type, ptk_buf_endian_t endian, va_list *args)
